(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x255 () Bool)
(declare-fun x74 () Bool)
(declare-fun x131 () Bool)
(declare-fun x23 () (_ BitVec 256))
(declare-fun x35 () Bool)
(declare-fun x268 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x273 () Bool)
(declare-fun x26 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x238 () Bool)
(declare-fun x326 () Bool)
(declare-fun x212 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x266 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x55 () (_ BitVec 256))
(declare-fun x113 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x308 () (_ BitVec 256))
(declare-fun x376 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x342 () Bool)
(declare-fun x298 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x346 () (_ BitVec 256))
(declare-fun x332 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x189 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x377 () (_ BitVec 256))
(declare-fun x307 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x227 () Bool)
(declare-fun x300 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x278 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x45 () Bool)
(declare-fun x380 () Bool)
(declare-fun x1 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x204 () Bool)
(declare-fun x148 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x259 () Bool)
(declare-fun x249 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x319 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x289 () Bool)
(declare-fun x71 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x177 () Bool)
(declare-fun x38 () Bool)
(declare-fun x94 () (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x379 () Bool)
(declare-fun x337 () (_ BitVec 256))
(declare-fun x33 () Bool)
(declare-fun x203 () (_ BitVec 256))
(declare-fun x137 () Bool)
(declare-fun x315 () Bool)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x352 () Bool)
(declare-fun x331 () Bool)
(declare-fun x237 () Bool)
(declare-fun x344 () (_ BitVec 256))
(declare-fun x339 () Bool)
(declare-fun x186 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x370 () Bool)
(declare-fun x15 () Bool)
(declare-fun x252 () Bool)
(declare-fun x367 () (_ BitVec 256))
(declare-fun x327 () Bool)
(declare-fun x234 () Bool)
(declare-fun x102 () Bool)
(declare-fun x210 () (_ BitVec 256))
(declare-fun x351 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x330 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x321 () (_ BitVec 256))
(declare-fun x124 () Bool)
(declare-fun x364 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x369 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x335 () (_ BitVec 256))
(declare-fun x310 () (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x355 () Bool)
(declare-fun x239 () Bool)
(declare-fun x7 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x349 () Bool)
(declare-fun x183 () Bool)
(declare-fun x64 () Bool)
(declare-fun x374 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x290 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x285 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x206 () Bool)
(declare-fun x281 () Bool)
(declare-fun x232 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x304 () Bool)
(declare-fun x336 () (_ BitVec 256))
(declare-fun x195 () Bool)
(declare-fun x162 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x341 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x225 () (_ BitVec 256))
(declare-fun x151 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x363 () Bool)
(declare-fun x262 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x99 () Bool)
(declare-fun x253 () Bool)
(declare-fun x4 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x325 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x313 () Bool)
(declare-fun x345 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x72 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x201 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x46 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x340 () Bool)
(declare-fun x53 () Bool)
(declare-fun x37 () Bool)
(declare-fun x260 () Bool)
(declare-fun x129 () Bool)
(declare-fun x58 () Bool)
(declare-fun x56 () Bool)
(declare-fun x205 () Bool)
(declare-fun x361 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x11 () (_ BitVec 256))
(declare-fun x322 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x24 () (_ BitVec 256))
(declare-fun x168 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x294 () Bool)
(declare-fun x169 () Bool)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x348 () (_ BitVec 256))
(declare-fun x78 () Bool)
(declare-fun x235 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x365 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x140 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x156 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x42 () Bool)
(declare-fun x320 () Bool)
(declare-fun x77 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x314 () Bool)
(declare-fun x135 () (_ BitVec 256))
(declare-fun x324 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x356 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x306 () Bool)
(declare-fun x241 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x84 () Bool)
(declare-fun x80 () Bool)
(declare-fun x147 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x350 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x47 () Bool)
(declare-fun x283 () Bool)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x267 () Bool)
(declare-fun x299 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x2 () Bool)
(declare-fun x141 () Bool)
(declare-fun x133 () Bool)
(declare-fun x214 () Bool)
(declare-fun x282 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x173 () Bool)
(declare-fun x338 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x257 () Bool)
(declare-fun x114 () Bool)
(declare-fun x366 () Bool)
(declare-fun x373 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x316 () (_ BitVec 256))
(declare-fun x318 () Bool)
(declare-fun x3 () Bool)
(declare-fun x244 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x371 () Bool)
(declare-fun x270 () Bool)
(declare-fun x343 () Bool)
(declare-fun x264 () Bool)
(declare-fun x216 () Bool)
(declare-fun x142 () Bool)
(declare-fun x353 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x329 () Bool)
(declare-fun x67 () Bool)
(declare-fun x63 () Bool)
(declare-fun x272 () Bool)
(declare-fun x233 () Bool)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x75 () Bool)
(declare-fun x258 () Bool)
(declare-fun x134 () Bool)
(declare-fun x293 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x93 () Bool)
(declare-fun x284 () Bool)
(declare-fun x104 () Bool)
(declare-fun x95 () Bool)
(declare-fun x218 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x302 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x291 () (_ BitVec 256))
(declare-fun x372 () Bool)
(declare-fun x311 () Bool)
(declare-fun x153 () Bool)
(declare-fun x323 () Bool)
(declare-fun x334 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x378 () Bool)
(declare-fun x256 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x354 () Bool)
(declare-fun x309 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x317 () Bool)
(declare-fun x265 () (_ BitVec 256))
(declare-fun x368 () Bool)
(declare-fun x357 () Bool)
(declare-fun x221 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x312 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x288 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x224 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x333 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x250 () Bool)
(declare-fun x180 () Bool)
(declare-fun x202 () Bool)
(declare-fun x73 () Bool)
(declare-fun x130 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x360 () Bool)
(declare-fun x375 () (_ BitVec 256))
(declare-fun x87 () Bool)
(declare-fun x122 () (_ BitVec 256))
(declare-fun x358 () Bool)
(declare-fun x236 () (_ BitVec 256))
(declare-fun x66 () Bool)
(declare-fun x362 () (_ BitVec 256))
(declare-fun x144 () Bool)
(declare-fun x222 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x359 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x347 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x112 () Bool)
(declare-fun x174 () (_ BitVec 256))
(declare-fun x328 () (_ BitVec 256))
(declare-fun x31 ((_ BitVec 256)) (_ BitVec 256))
(define-fun x166 ((x245 (_ BitVec 256)) (x220 (_ BitVec 256))) Bool (= x245 (bvudiv (bvmul x220 x245) x220)))
(define-fun x39 ((x245 (_ BitVec 256)) (x220 (_ BitVec 256))) Bool (= x245 (bvsdiv (bvmul x220 x245) x220)))
(define-fun x200 ((x245 (_ BitVec 256)) (x220 (_ BitVec 256))) Bool (= x245 (bvsdiv (bvmul x220 x245) x220)))
(assert (= x173 (and x144 (not x206))))
(assert (= (and x38 x29) x239))
(assert (= x324 (and (not x95) x47)))
(assert (not x342))
(assert (= (and x311 x357) x115))
(assert (= (and (not x252) x324) x255))
(assert (= x58 (and x311 (not x357))))
(assert (= x370 (and x340 x58)))
(assert (= x250 (and x101 x45)))
(assert (= x285 (and x327 x330)))
(assert (= x323 (and x252 x324)))
(assert (= x294 (=> (and (and (= x280 x176) (= (_ bv2 256) x345) x313 (= false x204) (= x292 x313)) (and (= x271 x296) (= x216 x379) (= (bvudiv x280 (_ bv2 256)) x271))) x180)))
(assert (= (=> (and (and (= (bvudiv x337 (_ bv10 256)) x212) (= x296 x212) (= x216 x379)) (and (= (_ bv10 256) x55) (= x337 x82) (= x67 false) x284 (= x284 x37))) x180) x318))
(assert (= x317 (and x129 x3)))
(assert (= (and x306 (not x37)) x47))
(assert (= x171 (=> (and (and (= x216 x379) (= x296 x178) (= (bvudiv x126 (_ bv2 256)) x178)) (and (= x299 false) x7 (= x35 x7) (= x126 x82) (= x49 (_ bv2 256)))) x180)))
(assert (= (=> (and (= x275 x63) (= x321 x82) (bvule (_ bv0 256) x309) (= x233 (bvule (_ bv1 256) x322)) (= x22 (bvmul x301 x359)) (= x269 x20) (= (bvult (_ bv0 256) (x151 x182)) x73) (= x325 x176) (= x81 (_ bv2685885107 256)) (= (x168 x182) x309) (not (= x81 (_ bv1245370514 256))) (= (= x325 (_ bv0 256)) x238) (= x230 x61) (= x83 x254) (= (_ bv1 256) x44) (= x301 x263) x73 (= x269 x90) x233 (= x267 x290) (= (bvule x22 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x290) (= (or x238 x307) x357) (bvule x182 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (_ bv0 256) x30) (= x48 x176) (= x90 x61) (= x275 (not (= x20 (_ bv0 256)))) (= x307 (= x321 (_ bv0 256))) (not (= x81 (_ bv149895259 256))) (= x359 x48) (= x150 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (and x63 x267) x379) (= x225 x83) (= x263 x82) (bvult (_ bv0 256) x182) (= x12 x374) (= x176 x12) (= x97 x90) (= x328 x19) (= x254 x82) (= x328 x12) (bvult (_ bv0 256) x376) (= x364 (_ bv400 256)) (= (_ bv0 256) x291) (= x219 x254) (= (x151 x182) x376) (= x97 x322) (= x167 (_ bv0 256))) (and (=> (and (and (= (not x170) x183) (= (= x246 x149) x340) (= x269 x149) x183 (= x246 x82) (= x357 x170)) (not x357)) (and (=> (and (and x231 (= x379 x216) (= x68 x176) (= x340 x231) (= x68 x296)) x340) x180) (=> (and (not x340) (and (= x340 x4) x270 (= x211 x269) (= x221 x176) (= (not x4) x270) (= (= x221 x211) x327))) (and (=> (and x327 (and (= x17 x296) (= x82 x17) x227 (= x216 x379) (= x227 x327))) x180) (=> (and (not x327) (and (= x293 x82) (= x142 x327) x329 (= x329 (not x142)) (= x353 x269) (= (bvmul (_ bv2 256) x353) x196) (= (_ bv2 256) x11) (= x140 (= x293 x196)))) (and (=> (and (and (= x248 (bvmul x6 (_ bv2 256))) (= x379 x216) (= x140 x153) x153 (= x296 x248) (= x176 x6) (= (_ bv2 256) x119)) x140) x180) (=> (and (not x140) (and (= (= x135 x72) x158) (= x140 x8) x372 (= x135 (bvmul (_ bv2 256) x125)) (= x372 (not x8)) (= x54 (_ bv2 256)) (= x176 x72) (= x269 x125))) (and (=> (and (and (= (_ bv2 256) x70) (= x349 x158) (= (not x349) x360) x360 (= x25 x269) (= x82 x50) (= (= x25 x218) x292) (= (bvmul x50 (_ bv2 256)) x218)) (not x158)) (and (=> (and (and (= x278 x292) (= x274 (bvmul (_ bv2 256) x303)) (= (_ bv2 256) x89) (= x339 (not x278)) (= x269 x241) (= x176 x303) (= (= x274 x241) x35) x339) (not x292)) (and (=> x35 x171) (=> (and (not x35) (and (= x172 (_ bv3 256)) (= x269 x197) (= x368 (not x363)) (= x80 (= x256 x138)) (= x363 x35) x368 (= x138 (bvmul (_ bv3 256) x197)) (= x256 x82))) (and (=> (and (not x80) (and (= (_ bv3 256) x362) x273 (= x80 x214) (= x21 (bvmul x143 (_ bv3 256))) (= (not x214) x273) (= (= x21 x277) x206) (= x176 x277) (= x143 x269))) (and (=> (and x206 (and (= x249 x82) x133 (= (bvmul (_ bv3 256) x249) x28) (= x379 x216) (= x206 x133) (= x32 (_ bv3 256)) (= x296 x28))) x180) (=> (and (not x206) (and (= x348 x269) (= x108 (bvmul x162 (_ bv3 256))) (= x74 x206) (= x346 (_ bv3 256)) (= (= x108 x348) x156) (= x162 x82) (= (not x74) x380) x380)) (and (=> x156 x237) (=> (and (not x156) (and (= x235 (bvmul (_ bv3 256) x5)) (= (_ bv3 256) x139) (= (= x235 x65) x124) (= x5 x176) (= x104 (not x46)) (= x156 x46) x104 (= x269 x65))) (and (=> (and (and (= x110 (_ bv10 256)) (= x269 x18) x146 (= x146 (not x159)) (= x124 x159) (= x82 x187) (= x2 (= x179 x187)) (= (bvmul x18 (_ bv10 256)) x179)) (not x124)) (and (=> (and (and (= x379 x216) (= x296 x213) (= x213 (bvmul x1 (_ bv10 256))) (= x136 (_ bv10 256)) (= x176 x1) (= x160 x2) x160) x2) x180) (=> (and (not x2) (and (= x163 (bvmul x105 (_ bv10 256))) x93 (= (not x234) x93) (= x129 (= x163 x94)) (= x94 x176) (= x269 x105) (= (_ bv10 256) x222) (= x2 x234))) (and (=> (and (and (= x296 x57) (= x251 (_ bv10 256)) x43 (= x82 x62) (= x57 (bvmul (_ bv10 256) x62)) (= x216 x379) (= x129 x43)) x129) x180) (=> (and (not x129) (and (= x215 (_ bv10 256)) (= x260 (not x355)) (= x240 (bvmul x184 (_ bv10 256))) (= x184 x82) (= x36 x269) (= x129 x355) (= (= x240 x36) x45) x260)) (and (=> (and (not x45) (and (= x45 x289) (= (bvmul (_ bv10 256) x120) x334) (= x288 (not x289)) (= x161 x269) (= (_ bv10 256) x336) x288 (= x120 x176) (= x37 (= x334 x161)))) (and (=> (and (and (= x82 x109) x56 (= (= x109 x297) x95) (= (bvmul x152 (_ bv500 256)) x297) (= x205 x37) (= (_ bv500 256) x26) (= x152 x269) (= x56 (not x205))) (not x37)) (and (=> (and (and (= (= x77 x229) x252) (= (bvmul x130 (_ bv500 256)) x229) (= x203 (_ bv500 256)) (= x53 x95) (= x315 (not x53)) (= x269 x130) x315 (= x176 x77)) (not x95)) (and (=> (and (and x331 (= (_ bv500 256) x92) (= x296 x76) (= (bvmul (_ bv500 256) x60) x76) (= x60 x82) (= x379 x216) (= x331 x252)) x252) x180) (=> (and (not x252) (and (= x202 (= x236 x310)) (= x269 x310) (= x82 x96) (= (not x351) x132) x132 (= x351 x252) (= x69 (_ bv500 256)) (= x236 (bvmul (_ bv500 256) x96)))) (and (=> x202 x42) (=> (and (not x202) (and x148 (= (not x155) x148) (= x155 x202) (= (_ bv500 256) x207) (= x326 (= x377 x174)) (= x377 (bvmul x10 (_ bv500 256))) (= x10 x176) (= x174 x269))) (and (=> x326 x232) (=> (and (not x326) (and (= (= x103 x287) x38) (= (bvmul x228 (_ bv400 256)) x103) x302 (= x82 x287) (= (not x175) x302) (= x375 (_ bv400 256)) (= x175 x326) (= x228 x269))) (and (=> (and (and (= (= x23 x266) x84) (= (bvmul x88 (_ bv400 256)) x23) (= x335 (_ bv400 256)) x283 (= x283 (not x272)) (= x272 x38) (= x266 x176) (= x88 x269)) (not x38)) (and (=> (and (not x84) (and x141 (= x82 x300) (= x66 x84) (= x210 x269) (= (bvmul x300 (_ bv400 256)) x181) (= x141 (not x66)) (= (_ bv400 256) x40) (= x298 (= x181 x210)))) (and (=> x298 x195) (=> (and (and (= x286 (= x261 x279)) x86 (= (not x253) x86) (= (bvmul x122 (_ bv400 256)) x279) (= x253 x298) (= x305 (_ bv400 256)) (= x122 x176) (= x261 x269)) (not x298)) (and (=> x286 x137) (=> (and (and (= x296 x16) x314 (= false x352) (= x286 x264) (= x216 x352) (= (_ bv0 256) x16) (= x314 (not x264))) (not x286)) x180))))) (=> (and x84 (and (= (_ bv400 256) x192) (= x84 x347) x347 (= x216 x379) (= x85 (bvmul x98 (_ bv400 256))) (= x85 x296) (= x82 x98))) x180))) (=> (and (and (= x100 (bvmul x341 (_ bv400 256))) (= x59 x38) (= x216 x379) (= x100 x296) (= (_ bv400 256) x265) x59 (= x176 x341)) x38) x180))))))))) (=> (and (and (= (_ bv500 256) x111) x102 (= (bvmul x243 (_ bv500 256)) x51) (= x102 x95) (= x296 x51) (= x379 x216) (= x243 x176)) x95) x180))) (=> x37 x318))) (=> x45 x164))))))) (=> x124 x64))))))) (=> (and x80 (and (= x123 x176) (= x147 x80) x147 (= x333 (_ bv3 256)) (= x296 x367) (= x379 x216) (= (bvmul (_ bv3 256) x123) x367))) x180))))) (=> x292 x294))) (=> (and (and (= x373 (bvmul x332 (_ bv2 256))) (= x296 x373) (= x379 x216) x189 (= x158 x189) (= (_ bv2 256) x308) (= x332 x82)) x158) x180))))))))) (=> (and (and x257 (= (_ bv0 256) x316) (= x216 x379) (= x357 x257) (= x316 x296)) x357) x180))) x342))
(assert (= x144 (and (not x80) x87)))
(assert (= (and x128 (not x124)) x114))
(assert (= (and x281 (not x298)) x71))
(assert (= x201 (and x2 x114)))
(assert (= x87 (and (not x35) x165)))
(assert (= x224 (and (not x327) x330)))
(assert (= (and (not x38) x29) x27))
(assert (= (and (not x156) x173) x128))
(assert (= (and (not x286) x71) x304))
(assert (= (or x239 x186 x317 x285 x191 x113 x262 x312 x99 x106 x157 x304 x323 x258 x145 x115 x250 x107 x343 x370 x356 x354 x134 x201) x378))
(assert (= x137 (=> (and (and (= x286 x131) (= (_ bv400 256) x193) (= x177 false) x131 (= x319 x82)) (and (= x296 x226) (= x216 x379) (= x226 (bvudiv x319 (_ bv400 256))))) x180)))
(assert (= x195 (=> (and (and (= x338 false) (= x91 x298) x91 (= x127 (_ bv400 256)) (= x24 x176)) (and (= x296 x79) (= x79 (bvudiv x24 (_ bv400 256))) (= x379 x216))) x180)))
(assert (= x99 (and x156 x173)))
(assert (= x371 (and (not x158) x75)))
(assert (= x101 (and (not x129) x3)))
(assert (= (and x306 x37) x145))
(assert (= (and x27 (not x84)) x281))
(assert (= (and x292 x371) x258))
(assert (= (=> (and (and (= x190 x365) (= x365 x296) x216 (= x198 x365)) (and (= x219 x295) (= x13 x188) (= x198 x185) (= x52 (bvule x13 x117)) (= x117 (bvadd (bvneg (_ bv1 256)) x208)) (= x97 x209) (= x208 x97) (= (bvmul x194 x295) x276) (= (_ bv1 256) x344) (= (bvmul x209 x247) x217) (= x374 x194) (= x185 x247) (= x188 (bvadd x276 (bvneg x217))))) x52) x180))
(assert (= x107 (and x95 x47)))
(assert (= x157 (and x128 x124)))
(assert (= (and (not x202) x255) x320))
(assert (= (and x75 x158) x354))
(assert (= (and x286 x71) x262))
(assert (= x191 (and x224 x140)))
(assert (= x106 (and x202 x255)))
(assert (= x113 (and x87 x80)))
(assert (= x237 (=> (and (and (= x379 x216) (= x9 (bvudiv x350 (_ bv3 256))) (= x9 x296)) (and (= (_ bv3 256) x369) x358 (= x118 false) (= x358 x156) (= x350 x176))) x180)))
(assert (= (=> (and (and (= x199 (bvudiv x116 (_ bv500 256))) (= x379 x216) (= x199 x296)) (and (= x259 x202) x259 (= false x15) (= x176 x116) (= (_ bv500 256) x268))) x180) x42))
(assert (= (=> (and (and (= x45 x33) (= x282 (_ bv10 256)) x33 (= false x169) (= x14 x176)) (and (= x216 x379) (= x41 (bvudiv x14 (_ bv10 256))) (= x41 x296))) x180) x164))
(assert (= (=> (and (and (= x366 x124) (= (_ bv3 256) x34) x366 (= x82 x361) (= false x78)) (and (= x296 x223) (= x223 (bvudiv x361 (_ bv3 256))) (= x379 x216))) x180) x64))
(assert (= x311 true))
(assert (= (=> (and (and (= x379 x216) (= (bvudiv x242 (_ bv500 256)) x121) (= x121 x296)) (and x112 (= x82 x242) (= x112 x326) (= (_ bv500 256) x244) (= x154 false))) x180) x232))
(assert (= x165 (and (not x292) x371)))
(assert (= x75 (and (not x140) x224)))
(assert (= (and x320 x326) x186))
(assert (= (and (not x340) x58) x330))
(assert (= x306 (and (not x45) x101)))
(assert (= (and x298 x281) x134))
(assert (= x29 (and x320 (not x326))))
(assert (= (and x35 x165) x356))
(assert (= x343 (and x84 x27)))
(assert (= x312 (and x144 x206)))
(assert (= x3 (and (not x2) x114)))
(check-sat)
(exit)