(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x45 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x50 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x27 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x129 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x82 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x15 () Bool)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x95 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x94 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x137 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x77 () Bool)
(declare-fun x90 () Bool)
(declare-fun x136 () Bool)
(declare-fun x71 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x40 () Bool)
(declare-fun x59 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x3 () Bool)
(declare-fun x78 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x4 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x103 () Bool)
(declare-fun x111 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x47 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x28 () Bool)
(declare-fun x7 () Bool)
(declare-fun x54 () Bool)
(declare-fun x33 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x17 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x42 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x30 () Bool)
(declare-fun x61 () Bool)
(declare-fun x11 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x52 () Bool)
(declare-fun x120 () Bool)
(declare-fun x48 () Bool)
(declare-fun x67 () Bool)
(declare-fun x96 () Bool)
(declare-fun x88 () Bool)
(declare-fun x12 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x73 () Bool)
(declare-fun x85 () Bool)
(declare-fun x125 () Bool)
(declare-fun x130 () (_ BitVec 256))
(define-fun x117 ((x57 (_ BitVec 256)) (x51 (_ BitVec 256))) Bool (= x57 (bvudiv (bvmul x51 x57) x51)))
(define-fun x79 ((x57 (_ BitVec 256)) (x51 (_ BitVec 256))) Bool (= x57 (bvsdiv (bvmul x51 x57) x51)))
(define-fun x10 ((x57 (_ BitVec 256)) (x51 (_ BitVec 256))) Bool (= x57 (bvsdiv (bvmul x57 x51) x51)))
(define-fun x72 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x55) x114 (x42 x55)))
(define-fun x138 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= x55 (_ bv160 256)) x1 (x33 x55)))
(define-fun x93 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x55) x106 (x33 x55)))
(define-fun x2 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= x55 (_ bv192 256)) x22 (x138 x55)))
(define-fun x6 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite x132 (x33 x55) (ite x3 (ite x40 (x138 x55) (x2 x55)) (x93 x55))))
(define-fun x53 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= x115 x55) (_ bv32 256) (x27 x55)))
(define-fun x80 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= x35 x55) x130 (x53 x55)))
(define-fun x32 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= x55 x25) x112 (x80 x55)))
(define-fun x127 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= x55 x36) x119 (x32 x55)))
(define-fun x107 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= x41 x55) x21 (x127 x55)))
(define-fun x105 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= x74 x55) x76 (x107 x55)))
(define-fun x131 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite x37 (x107 x55) (ite x90 (x127 x55) (ite x54 (x32 x55) (ite x116 (x80 x55) (x105 x55))))))
(define-fun x23 ((x55 (_ BitVec 256))) (_ BitVec 256) (ite (= x55 x118) (_ bv0 256) (x131 x55)))
(assert (= true x4))
(assert (not (= (bvadd (_ bv1 256) x123) (_ bv826074471 256))))
(assert (= x18 (and x30 x28)))
(assert (not (= (_ bv3337024914 256) (bvadd x123 (_ bv1 256)))))
(assert (= x28 (and x95 x64)))
(assert (not (= (_ bv117300739 256) (x59 (_ bv1 256)))))
(assert (= x45 (=> (and (and (bvult x26 (_ bv3017275065 256)) (= (bvadd (_ bv32 256) x65) x46) (= (bvudiv x5 (_ bv32 256)) x63) (not (bvult x82 (_ bv4 256))) (= x26 (_ bv2514000705 256)) (= x65 (bvmul x63 (_ bv32 256))) (bvule x68 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x13 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x120 (= (_ bv0 256) x114)) (= x114 (ite (bvugt x8 (_ bv0 256)) x9 (bvand x9 (_ bv127 256)))) (= x108 (x17 x89)) (bvule (_ bv0 256) x68) (bvugt x108 (_ bv0 256)) (= x9 (bvudiv x24 (_ bv2 256))) (bvult x26 (_ bv3337024914 256)) (bvuge x13 (_ bv0 256)) (not (= (_ bv2376452955 256) x26)) (= x8 (bvand x24 (_ bv1 256))) (= (_ bv0 256) x91) (= x115 (bvadd x46 (_ bv128 256))) (= x19 x84) (= (ite (bvugt (_ bv32 256) x114) (_ bv1 256) (_ bv0 256)) x49) (= x5 (bvadd x114 (_ bv31 256))) (not (bvult x26 (_ bv2376452955 256))) (not (= x26 (_ bv2495578189 256))) (bvule x84 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x84 (_ bv0 256)) (= x38 x56) (not (= x8 x49)) (bvsgt x82 (_ bv3 256))) (and (= x137 (bvugt (x17 x110) (_ bv0 256))) (not (= x98 (_ bv117300739 256))) (= x86 (x47 x110)) x15 (= x48 false) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x68) (= (x47 x89) x44) (= (_ bv0 256) x91) (bvugt (_ bv826074471 256) x98) (bvuge x43 (_ bv0 256)) (= (_ bv2514000705 256) x20) (= x135 (x17 x110)) (bvult (_ bv0 256) x135) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x83) (bvule x43 (_ bv1461501637330902918203684832716283019655932542975 256)) (= true x94) x137 (= (_ bv404098525 256) x98) (bvuge x11 (_ bv0 256)) (not (= x110 x89)) (bvuge x44 (_ bv0 256)) (= x121 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x89) (not (= (_ bv157198259 256) x98)) (bvuge x68 (_ bv0 256)) (bvule x11 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x31) (bvule x139 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x86) (= x83 x19) (= x15 (bvugt (x17 x89) (_ bv0 256))) (bvule (_ bv0 256) x68) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x110) (bvult (_ bv0 256) x89) (bvuge x139 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x31) (= x31 x56) (bvule x68 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvult (_ bv0 256) x110) (= false x77) (bvuge x83 (_ bv0 256)) (= x14 false))) (and (=> (and (not x120) (= x64 (bvugt x114 (_ bv31 256)))) (and (=> (and x64 (and (= x133 (bvadd x123 (_ bv1 256))) (= (x129 x123) x1) (= (bvadd x114 (_ bv160 256)) x99) (= (x59 (_ bv1 256)) x123) (= x30 (bvugt x99 (_ bv192 256))))) (and (=> (not x30) x61) (=> x30 x60))) (=> (and (and (= (bvudiv x24 (_ bv256 256)) x87) (= x113 x75) (= (bvmul (_ bv256 256) x87) x106)) (not x64)) x134))) (=> (and (= x113 x75) x120) x134)))))
(assert (= (or x90 x116 x54 x37 x136) x103))
(assert (= (and x4 (not x120)) x95))
(assert (= (x33 (_ bv160 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x110) (not (= (x59 (_ bv1 256)) x110))))
(assert (= x69 (and x96 x92)))
(assert (not (= (bvadd x123 (_ bv1 256)) (_ bv157198259 256))))
(assert (= (or x40 x18) x3))
(assert (= (x33 (_ bv224 256)) (_ bv0 256)))
(assert (= x52 (and (not x109) x103)))
(assert (= (and x28 (not x30)) x40))
(assert (= x60 (=> (and (= x22 (x129 x133)) (= (not (bvult (_ bv224 256) x99)) x70)) (and x61 x70))))
(assert (= (x33 (_ bv192 256)) (_ bv0 256)))
(assert (= x132 (and x4 x120)))
(assert (=> (bvuge (_ bv10000 256) x110) (not (= x110 (bvadd x123 (_ bv1 256))))))
(assert (=> (= (x59 (_ bv1 256)) (bvadd x123 (_ bv1 256))) (= (_ bv1 256) (_ bv0 256))))
(assert (not (= (_ bv1461501637330902918203684832716283019655932542975 256) (x59 (_ bv1 256)))))
(assert (= (=> (and (and (= (= x39 x29) x73) (= x124 x39) (= x38 x29) (= x124 x12)) (and (bvule (_ bv0 256) x16) (bvugt x81 (_ bv0 256)) (not (= (_ bv117300739 256) x100)) (bvugt (_ bv826074471 256) x100) (= (_ bv0 256) x91) (bvule (_ bv0 256) x58) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x58) (= x12 x31) (not (= x100 (_ bv157198259 256))) (= x58 x19) (bvule (_ bv0 256) x68) (bvuge x31 (_ bv0 256)) (bvule x31 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x100 (_ bv404098525 256)) (= x81 (x17 x110)) (bvule x16 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (ite (= x115 (_ bv0 256)) x113 (ite (= (_ bv32 256) x115) x34 (ite (= x115 (_ bv64 256)) x115 (ite x52 (x131 x115) (x23 x115))))) x66) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x68))) x73) x122))
(assert (not (= (x59 (_ bv1 256)) (_ bv826074471 256))))
(assert (not (= (_ bv157198259 256) (x59 (_ bv1 256)))))
(assert (=> (bvuge (_ bv10000 256) (_ bv1 256)) (not (= (_ bv1 256) (bvadd (_ bv1 256) x123)))))
(assert (= (_ bv0 256) (x33 (_ bv256 256))))
(assert (= (and x103 x109) x7))
(assert (not (= (bvadd x123 (_ bv1 256)) (_ bv117300739 256))))
(assert (= x61 (=> (= x113 (_ bv1 256)) x134)))
(assert (= x134 (=> (and (= (bvadd x35 (_ bv32 256)) x25) (= (bvugt x130 (_ bv0 256)) x92) (= x35 (bvadd (_ bv32 256) x115)) (= (x72 (_ bv128 256)) x130)) (and (=> (and (not x92) (= x104 (_ bv0 256))) x88) (=> (and x92 (and (= (x6 (_ bv160 256)) x112) (= x101 (bvult (_ bv32 256) x130)))) (and (=> (and (and (= (bvult (_ bv64 256) x130) x67) (= (x6 (_ bv192 256)) x119) (= (bvadd x25 (_ bv32 256)) x36)) x101) (and (=> (and (= x104 (_ bv64 256)) (not x67)) x88) (=> (and x67 (and (= x126 (bvult (_ bv96 256) x130)) (= x21 (x6 (_ bv224 256))) (= x41 (bvadd (_ bv64 256) x25)))) (and (=> x126 x102) (=> (and (not x126) (= x104 (_ bv96 256))) x88))))) (=> (and (not x101) (= x104 (_ bv32 256))) x88)))))))
(assert (= x88 (=> (and (= (bvugt x104 x130) x109) (or (and (= (bvadd x25 x130) x118) x109) (not x109))) x122)))
(assert (not (= (x59 (_ bv1 256)) (_ bv2376452955 256))))
(assert (not (= (_ bv2495578189 256) (bvadd (_ bv1 256) x123))))
(assert (not (= (_ bv2376452955 256) (bvadd (_ bv1 256) x123))))
(assert (= x111 (and x67 x50)))
(assert (not (= (_ bv3337024914 256) (x59 (_ bv1 256)))))
(assert (= x90 (and x50 (not x67))))
(assert (=> (bvuge (_ bv10000 256) (_ bv1 256)) (not (= (x59 (_ bv1 256)) (_ bv1 256)))))
(assert (= x50 (and x101 x69)))
(assert (not (= (_ bv1461501637330902918203684832716283019655932542975 256) (bvadd x123 (_ bv1 256)))))
(assert (not x45))
(assert (= x37 (and (not x126) x111)))
(assert (=> (bvule x89 (_ bv10000 256)) (not (= (x59 (_ bv1 256)) x89))))
(assert (not (= (x59 (_ bv1 256)) (_ bv2514000705 256))))
(assert (not (= (x59 (_ bv1 256)) (_ bv2495578189 256))))
(assert (= x78 (and x95 (not x64))))
(assert (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvadd x123 (_ bv1 256)))))
(assert (= (and (not x92) x96) x116))
(assert (not (= (x59 (_ bv1 256)) (_ bv404098525 256))))
(assert (= (or x78 x132 x3) x96))
(assert (not (= (x59 (_ bv1 256)) (_ bv3017275065 256))))
(assert (= x136 (and x126 x111)))
(assert (=> (bvule x89 (_ bv10000 256)) (not (= x89 (bvadd x123 (_ bv1 256))))))
(assert (not (= (bvadd (_ bv1 256) x123) (_ bv3017275065 256))))
(assert (not (= (x59 (_ bv1 256)) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (and (not x101) x69) x54))
(assert (= (=> (and (= x74 (bvadd (_ bv96 256) x25)) (= (x6 (_ bv256 256)) x76) (= (not (bvult (_ bv128 256) x130)) x125)) (and (=> (= x104 (_ bv128 256)) x88) x125)) x102))
(assert (not (= (bvadd x123 (_ bv1 256)) (_ bv2514000705 256))))
(assert (= x85 (or x7 x52)))
(assert (not (= (bvadd (_ bv1 256) x123) (_ bv404098525 256))))
(check-sat)
(exit)