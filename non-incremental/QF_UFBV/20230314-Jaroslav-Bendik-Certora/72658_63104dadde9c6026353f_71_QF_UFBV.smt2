(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x69 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x77 () Bool)
(declare-fun x110 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x82 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x90 () Bool)
(declare-fun x3 () (_ BitVec 256))
(declare-fun x39 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x40 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x104 () Bool)
(declare-fun x37 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x98 () Bool)
(declare-fun x20 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x102 () (_ BitVec 256))
(declare-fun x117 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x47 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x28 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x1 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x35 () Bool)
(declare-fun x43 () Bool)
(declare-fun x14 () Bool)
(declare-fun x34 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x56 () Bool)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x60 () Bool)
(declare-fun x122 () Bool)
(declare-fun x88 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x105 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x15 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x21 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x95 () Bool)
(declare-fun x86 () (_ BitVec 256))
(declare-fun x31 () Bool)
(declare-fun x120 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x45 () Bool)
(declare-fun x57 () Bool)
(declare-fun x19 () Bool)
(declare-fun x93 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x74 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x96 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(define-fun x29 ((x23 (_ BitVec 256)) (x2 (_ BitVec 256))) Bool (= (bvudiv (bvmul x2 x23) x2) x23))
(define-fun x87 ((x23 (_ BitVec 256)) (x2 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x23 x2) x2) x23))
(define-fun x16 ((x23 (_ BitVec 256)) (x2 (_ BitVec 256))) Bool (= x23 (bvsdiv (bvmul x2 x23) x2)))
(assert (= x35 (=> (or (not x76) x76) x94)))
(assert (= (and x31 (not x121)) x63))
(assert (= (=> (and (= x22 (= x98 x60)) (= x19 x60) (= x101 x43) (= x51 (or x74 x104)) (= x77 x104) (= x59 x74) (= x51 x101) (= x43 x98)) x22) x47))
(assert (= (and (not x14) x5) x31))
(assert (= x52 (and x45 x76)))
(assert (= (and x5 x14) x67))
(assert (= x88 (and x72 x67)))
(assert (= x117 (=> (and (= x100 x96) (= x76 false)) x35)))
(assert (= x94 (=> (and (or (and (and (= x122 x39) x56 (= (not x122) x56) (= x37 x77) (= false x37)) (not x39)) (and (and (= x97 x58) (= x54 x7) (= x38 x113) (= x8 x77) x15 (= x7 x97) (= x8 (bvugt x113 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (= x30 x32) (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x12) (= x38 (bvudiv x32 x58)) (= x15 x39)) x39)) (and (= x1 x123) (= x54 x99) (= x54 x26) (= x75 x28) (= x6 x102) (= x30 (bvmul x75 x49)) (= x39 (not x21)) (= x49 x123) (= x102 x28) (= (_ bv0 256) x17) (= x76 x19) (= x65 x1) (= x91 x65) (= (= x99 (_ bv0 256)) x59) (= x6 x82) (= x21 x59))) x47)))
(assert (= x53 (and x39 x11)))
(assert (= (or x40 x53) x34))
(assert (= (and x31 x121) x95))
(assert (= (or x57 x90) x45))
(assert (= true x5))
(assert (= x57 (or x95 x88)))
(assert (= x11 (or x62 x52)))
(assert (= x40 (and (not x39) x11)))
(assert (= (=> (= x76 true) x35) x120))
(assert (= (or x63 (and x67 (not x72))) x90))
(assert (not x25))
(assert (= x62 (and x45 (not x76))))
(assert (= (=> (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x42) (= (bvadd (bvneg x18) x36) x33) x114 (bvult (_ bv0 256) x42) (= (= x85 (_ bv0 256)) x14) (= x111 x108) (bvugt x109 (_ bv0 256)) (= x89 x71) (= x78 x41) (= x92 x82) (= x18 (bvmul x92 x89)) (= x78 x92) (= x84 x71) (bvuge x48 (_ bv0 256)) (= (x69 x42) x48) (= x91 x89) (= x36 ((_ extract 255 0) (bvurem (bvmul (concat (_ bv0 256) x92) (concat (_ bv0 256) x89)) (concat (_ bv0 256) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))) (= x114 (bvult (_ bv0 256) (x20 x42))) (= x26 x111) (= x108 x13) (= x85 (bvadd x33 (bvneg (ite (bvult x36 x18) (_ bv1 256) (_ bv0 256))))) (= (x20 x42) x109) (= (_ bv1415856751 256) x83)) (and (=> (and (= x121 (bvult x85 x111)) (not x14)) (and (=> (and (and (= (bvadd (_ bv2 256) (bvneg x68)) x107) (= x66 (bvmul x115 x10)) (= x86 (bvmul x81 x73)) (= x64 (bvxor (_ bv2 256) x106)) (= (bvadd (bvneg x4) (_ bv2 256)) x61) (= x4 (bvmul x86 x115)) (= x81 (bvadd (_ bv2 256) (bvneg x125))) (= x46 (bvadd (bvneg x124) x18)) (= (bvadd x85 (bvneg (ite (bvult x18 x124) (_ bv1 256) (_ bv0 256)))) x126) (= x116 (bvadd (bvneg x27) (_ bv2 256))) (= (bvmul x115 x50) x68) (= x96 x118) (= x106 (bvmul x115 (_ bv3 256))) (= (bvmul x116 x64) x73) (= x24 (bvadd (_ bv0 256) (bvneg x9))) (= (bvmul x93 (bvor x103 x112)) x118) (= x55 (bvmul x80 x115)) (= x125 (bvmul x115 x73)) (= x119 (bvadd (bvnot x111) (_ bv1 256))) (= x115 (bvudiv x111 x9)) (= x9 (bvand x111 x119)) (= (bvmul x115 x64) x27) (= (bvadd (_ bv1 256) x44) x3) (= (bvmul x70 x80) x93) (= (bvmul x107 x50) x10) (= x80 (bvmul x105 x10)) (= x105 (bvadd (bvneg x66) (_ bv2 256))) (= x44 (bvudiv x24 x9)) (= x124 ((_ extract 255 0) (bvurem (bvmul (concat (_ bv0 256) x89) (concat (_ bv0 256) x92)) (concat (_ bv0 256) x111)))) (= x50 (bvmul x86 x61)) (= (bvudiv x46 x9) x112) (= x103 (bvmul x126 x3)) (= (bvadd (_ bv2 256) (bvneg x55)) x70)) x121) x117) (=> (not x121) x120))) (=> (and x14 (= (bvugt x111 (_ bv0 256)) x72)) (and (=> (not x72) x120) (=> (and (and (= x79 (bvudiv x18 x111)) (= x96 x79)) x72) x117))))) x25))
(check-sat)
(exit)