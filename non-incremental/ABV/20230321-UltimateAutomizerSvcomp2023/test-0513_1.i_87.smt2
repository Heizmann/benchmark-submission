(set-info :smt-lib-version 2.6)
(set-logic ABV)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PID () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PGID () (_ BitVec 32))
(declare-fun |c_#memory_int| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_ULTIMATE.start_main_~data~0#1.base| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~data~0#1.offset| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~item~0#1.base| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~item~0#1.offset| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~item2~0#1.base| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~item2~0#1.offset| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~lItem~0#1.base| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~lItem~0#1.offset| () (_ BitVec 64))
(assert (= ~unnamed0~0~P_ALL (_ bv0 32)))
(assert (= ~unnamed0~0~P_PID (_ bv1 32)))
(assert (= (_ bv2 32) ~unnamed0~0~P_PGID))
(assert (let ((.cse5 (bvadd (_ bv8 64) |c_ULTIMATE.start_main_~item~0#1.offset|))) (let ((.cse2 (forall ((v_ArrVal_770 (Array (_ BitVec 64) (_ BitVec 32))) (v_arrayElimCell_43 (_ BitVec 64)) (v_arrayElimCell_42 (_ BitVec 64))) (let ((.cse8 (store |c_#memory_int| |c_ULTIMATE.start_main_~lItem~0#1.base| v_ArrVal_770))) (or (bvslt (select (select .cse8 |c_ULTIMATE.start_main_~item~0#1.base|) .cse5) (_ bv15 32)) (bvslt (select (select .cse8 v_arrayElimCell_42) (bvadd (_ bv8 64) v_arrayElimCell_43)) (_ bv15 32)))))) (.cse0 (= |c_ULTIMATE.start_main_~data~0#1.offset| |c_ULTIMATE.start_main_~lItem~0#1.offset|)) (.cse3 (= |c_ULTIMATE.start_main_~data~0#1.base| |c_ULTIMATE.start_main_~lItem~0#1.base|)) (.cse1 (and (forall ((v_ArrVal_770 (Array (_ BitVec 64) (_ BitVec 32))) (v_arrayElimCell_43 (_ BitVec 64)) (v_arrayElimCell_42 (_ BitVec 64))) (let ((.cse7 (select (store |c_#memory_int| |c_ULTIMATE.start_main_~lItem~0#1.base| v_ArrVal_770) v_arrayElimCell_42))) (or (bvslt (select .cse7 .cse5) (_ bv15 32)) (bvslt (select .cse7 (bvadd (_ bv8 64) v_arrayElimCell_43)) (_ bv15 32))))) (forall ((v_ArrVal_770 (Array (_ BitVec 64) (_ BitVec 32))) (v_arrayElimCell_43 (_ BitVec 64)) (v_arrayElimCell_42 (_ BitVec 64))) (bvslt (select (select (store |c_#memory_int| |c_ULTIMATE.start_main_~lItem~0#1.base| v_ArrVal_770) v_arrayElimCell_42) (bvadd (_ bv8 64) v_arrayElimCell_43)) (_ bv15 32)))))) (and (or .cse0 .cse1) (or .cse2 .cse0) (or .cse3 .cse2) (forall ((v_ArrVal_770 (Array (_ BitVec 64) (_ BitVec 32)))) (let ((.cse6 (store |c_#memory_int| |c_ULTIMATE.start_main_~lItem~0#1.base| v_ArrVal_770))) (or (forall ((v_arrayElimCell_43 (_ BitVec 64)) (v_arrayElimCell_42 (_ BitVec 64))) (let ((.cse4 (select .cse6 v_arrayElimCell_42))) (or (bvslt (select .cse4 .cse5) (_ bv15 32)) (bvslt (select .cse4 (bvadd (_ bv8 64) v_arrayElimCell_43)) (_ bv15 32))))) (bvslt (select (select .cse6 |c_ULTIMATE.start_main_~item~0#1.base|) .cse5) (_ bv15 32))))) (or (not .cse3) (not .cse0) (forall ((v_ArrVal_770 (Array (_ BitVec 64) (_ BitVec 32)))) (bvslt (select (select (store |c_#memory_int| |c_ULTIMATE.start_main_~lItem~0#1.base| v_ArrVal_770) |c_ULTIMATE.start_main_~item~0#1.base|) .cse5) (_ bv15 32)))) (or .cse3 .cse1)))))
(assert (not (and (= (_ bv0 64) |c_ULTIMATE.start_main_~item2~0#1.offset|) (= (_ bv6 32) (select (select |c_#memory_int| |c_ULTIMATE.start_main_~item2~0#1.base|) (_ bv8 64))))))
(check-sat)
(exit)
