(set-info :smt-lib-version 2.6)
(set-logic ABV)
(set-info :source |
Generated by: Matthias Heizmann
Generated on: 2023-03-21
Generator: Ultimate Automizer
Application: Software verification
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |c_#valid| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_#length| () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun |c_#memory_$Pointer$.base| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.base_primed| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.offset| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.offset_primed| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_int| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))))
(declare-fun |c_#memory_int_primed| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))))
(declare-fun |c_ULTIMATE.start_create_data_#t~mem8#1.base| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_create_data_#t~mem8#1.offset| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_create_data_#t~nondet9#1| () (_ BitVec 32))
(declare-fun |c_ULTIMATE.start_create_data_~counter~0#1| () (_ BitVec 32))
(declare-fun |c_ULTIMATE.start_create_data_~data~0#1.base| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_create_data_~data~0#1.offset| () (_ BitVec 64))
(assert (let ((.cse7 (bvmul (_ bv4 64) ((_ sign_extend 32) |c_ULTIMATE.start_create_data_~counter~0#1|)))) (let ((.cse2 (bvadd |c_ULTIMATE.start_create_data_#t~mem8#1.offset| (_ bv1 64) .cse7)) (.cse3 (bvadd |c_ULTIMATE.start_create_data_#t~mem8#1.offset| (_ bv2 64) .cse7)) (.cse4 (bvadd (_ bv3 64) |c_ULTIMATE.start_create_data_#t~mem8#1.offset| .cse7)) (.cse5 (bvadd |c_ULTIMATE.start_create_data_#t~mem8#1.offset| (_ bv4 64) .cse7)) (.cse0 (bvadd |c_ULTIMATE.start_create_data_#t~mem8#1.offset| .cse7))) (and (= (store |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_create_data_#t~mem8#1.base| (let ((.cse1 (select |c_#memory_$Pointer$.offset_primed| |c_ULTIMATE.start_create_data_#t~mem8#1.base|))) (store (store (store (store (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_create_data_#t~mem8#1.base|) .cse0 (select .cse1 .cse0)) .cse2 (select .cse1 .cse2)) .cse3 (select .cse1 .cse3)) .cse4 (select .cse1 .cse4)))) |c_#memory_$Pointer$.offset_primed|) (bvule .cse0 .cse5) (= (bvadd (select |c_#valid| |c_ULTIMATE.start_create_data_#t~mem8#1.base|) (_ bv1 1)) (_ bv0 1)) (= |c_#memory_$Pointer$.base_primed| (store |c_#memory_$Pointer$.base| |c_ULTIMATE.start_create_data_#t~mem8#1.base| (let ((.cse6 (select |c_#memory_$Pointer$.base_primed| |c_ULTIMATE.start_create_data_#t~mem8#1.base|))) (store (store (store (store (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_create_data_#t~mem8#1.base|) .cse0 (select .cse6 .cse0)) .cse2 (select .cse6 .cse2)) .cse3 (select .cse6 .cse3)) .cse4 (select .cse6 .cse4))))) (= |c_#memory_int_primed| (store |c_#memory_int| |c_ULTIMATE.start_create_data_#t~mem8#1.base| (store (store (store (store (select |c_#memory_int| |c_ULTIMATE.start_create_data_#t~mem8#1.base|) .cse0 ((_ extract 7 0) |c_ULTIMATE.start_create_data_#t~nondet9#1|)) .cse2 ((_ extract 15 8) |c_ULTIMATE.start_create_data_#t~nondet9#1|)) .cse3 ((_ extract 23 16) |c_ULTIMATE.start_create_data_#t~nondet9#1|)) .cse4 ((_ extract 31 24) |c_ULTIMATE.start_create_data_#t~nondet9#1|)))) (bvule .cse5 (select |c_#length| |c_ULTIMATE.start_create_data_#t~mem8#1.base|)) (bvule (_ bv0 64) .cse0)))))
(assert (let ((.cse1 (bvmul (_ bv4 64) ((_ sign_extend 32) |c_ULTIMATE.start_create_data_~counter~0#1|))) (.cse3 (bvadd |c_ULTIMATE.start_create_data_~data~0#1.offset| (_ bv4 64)))) (let ((.cse0 (select (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_create_data_~data~0#1.base|) .cse3)) (.cse4 (bvmul (_ bv4 64) ((_ sign_extend 32) (bvadd |c_ULTIMATE.start_create_data_~counter~0#1| (_ bv1 32))))) (.cse2 (bvadd |c_ULTIMATE.start_create_data_#t~mem8#1.offset| (_ bv4 64) .cse1))) (and (= (_ bv160 64) (select |c_#length| .cse0)) (= |c_ULTIMATE.start_create_data_~counter~0#1| (_ bv0 32)) (bvule (bvadd |c_ULTIMATE.start_create_data_#t~mem8#1.offset| .cse1) .cse2) (forall ((v_ArrVal_349 (Array (_ BitVec 64) (_ BitVec 64))) (v_ArrVal_350 (Array (_ BitVec 64) (_ BitVec 64)))) (bvule (bvadd (select (select (store |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_create_data_#t~mem8#1.base| v_ArrVal_349) |c_ULTIMATE.start_create_data_~data~0#1.base|) .cse3) (_ bv4 64) .cse4) (select |c_#length| (select (select (store |c_#memory_$Pointer$.base| |c_ULTIMATE.start_create_data_#t~mem8#1.base| v_ArrVal_350) |c_ULTIMATE.start_create_data_~data~0#1.base|) .cse3)))) (= .cse0 |c_ULTIMATE.start_create_data_#t~mem8#1.base|) (forall ((v_ArrVal_349 (Array (_ BitVec 64) (_ BitVec 64)))) (let ((.cse5 (select (select (store |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_create_data_#t~mem8#1.base| v_ArrVal_349) |c_ULTIMATE.start_create_data_~data~0#1.base|) .cse3))) (bvule (bvadd .cse5 .cse4) (bvadd .cse5 (_ bv4 64) .cse4)))) (= (_ bv0 1) (bvadd (select |c_#valid| |c_ULTIMATE.start_create_data_~data~0#1.base|) (_ bv1 1))) (= (_ bv0 64) (select (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_create_data_~data~0#1.base|) .cse3)) (bvule .cse2 (select |c_#length| |c_ULTIMATE.start_create_data_#t~mem8#1.base|))))))
(assert (not (let ((.cse0 (bvadd |c_ULTIMATE.start_create_data_~data~0#1.offset| (_ bv4 64)))) (let ((.cse1 (select (select |c_#memory_$Pointer$.base_primed| |c_ULTIMATE.start_create_data_~data~0#1.base|) .cse0))) (and (= (_ bv0 64) (select (select |c_#memory_$Pointer$.offset_primed| |c_ULTIMATE.start_create_data_~data~0#1.base|) .cse0)) (= |c_ULTIMATE.start_create_data_#t~mem8#1.base| .cse1) (= (select |c_#length| .cse1) (_ bv160 64)) (= |c_ULTIMATE.start_create_data_~counter~0#1| (_ bv0 32)) (not (= |c_ULTIMATE.start_create_data_~data~0#1.base| .cse1)))))))
(check-sat)
(exit)
