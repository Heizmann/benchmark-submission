(set-info :smt-lib-version 2.6)
(set-logic ABV)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PID () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PGID () (_ BitVec 32))
(declare-fun |c_#valid| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_#valid_primed| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_#length| () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun |c_#length_primed| () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun |c_#memory_int| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_#memory_int_primed| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_#memory_$Pointer$.base| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.base_primed| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.offset| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.offset_primed| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#StackHeapBarrier| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_#t~short15#1| () Bool)
(declare-fun |c_ULTIMATE.start_main_~new_process~0#1.base_primed| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~new_process~0#1.offset_primed| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~#queue~0#1.base| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~#queue~0#1.offset| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~next_time~0#1| () (_ BitVec 32))
(declare-fun |c_ULTIMATE.start_main_~next_time~0#1_primed| () (_ BitVec 32))
(declare-fun |c_ULTIMATE.start_append_to_queue_#in~n#1.base_primed| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_append_to_queue_#in~n#1.offset_primed| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_append_to_queue_#in~q#1.base_primed| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_append_to_queue_#in~q#1.offset_primed| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_append_to_queue_~n#1.base_primed| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_append_to_queue_~n#1.offset_primed| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_append_to_queue_~q#1.base_primed| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_append_to_queue_~q#1.offset_primed| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_check_queue_~n~0#1.base| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_check_queue_~n~0#1.offset| () (_ BitVec 64))
(assert (= ~unnamed0~0~P_ALL (_ bv0 32)))
(assert (= ~unnamed0~0~P_PID (_ bv1 32)))
(assert (= (_ bv2 32) ~unnamed0~0~P_PGID))
(declare-fun |c_aux_v_#memory_$Pointer$.base_8| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_aux_v_#memory_$Pointer$.base_9| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_aux_v_#memory_int_8| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_aux_v_#memory_$Pointer$.offset_8| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_aux_v_ULTIMATE.start_main_#t~nondet18#1_4| () (_ BitVec 32))
(declare-fun |c_aux_v_#memory_$Pointer$.offset_9| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(assert (let ((.cse0 (select |c_aux_v_#memory_$Pointer$.offset_8| |c_ULTIMATE.start_main_~new_process~0#1.base_primed|)) (.cse2 (bvadd (_ bv8 64) |c_ULTIMATE.start_append_to_queue_~n#1.offset_primed|)) (.cse5 (select |c_aux_v_#memory_$Pointer$.base_9| |c_ULTIMATE.start_main_~new_process~0#1.base_primed|)) (.cse4 (bvadd |c_ULTIMATE.start_main_~new_process~0#1.offset_primed| (_ bv4 64)))) (and (= (store |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~new_process~0#1.base_primed| (store (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~new_process~0#1.base_primed|) |c_ULTIMATE.start_main_~new_process~0#1.offset_primed| (select .cse0 |c_ULTIMATE.start_main_~new_process~0#1.offset_primed|))) |c_aux_v_#memory_$Pointer$.offset_8|) |c_ULTIMATE.start_main_#t~short15#1| (= |c_#length_primed| (store |c_#length| |c_ULTIMATE.start_main_~new_process~0#1.base_primed| (_ bv16 64))) (= |c_#memory_$Pointer$.base_primed| (let ((.cse1 (store |c_aux_v_#memory_$Pointer$.base_8| |c_ULTIMATE.start_append_to_queue_~n#1.base_primed| (store (select |c_aux_v_#memory_$Pointer$.base_8| |c_ULTIMATE.start_append_to_queue_~n#1.base_primed|) .cse2 (select (select |c_aux_v_#memory_$Pointer$.base_8| |c_ULTIMATE.start_append_to_queue_~q#1.base_primed|) |c_ULTIMATE.start_append_to_queue_~q#1.offset_primed|))))) (store .cse1 |c_ULTIMATE.start_append_to_queue_~q#1.base_primed| (store (select .cse1 |c_ULTIMATE.start_append_to_queue_~q#1.base_primed|) |c_ULTIMATE.start_append_to_queue_~q#1.offset_primed| |c_ULTIMATE.start_append_to_queue_~n#1.base_primed|)))) (= |c_ULTIMATE.start_append_to_queue_#in~q#1.offset_primed| |c_ULTIMATE.start_append_to_queue_~q#1.offset_primed|) (= |c_ULTIMATE.start_append_to_queue_#in~q#1.base_primed| |c_ULTIMATE.start_main_~#queue~0#1.base|) (= (let ((.cse3 (store |c_aux_v_#memory_$Pointer$.offset_9| |c_ULTIMATE.start_append_to_queue_~n#1.base_primed| (store (select |c_aux_v_#memory_$Pointer$.offset_9| |c_ULTIMATE.start_append_to_queue_~n#1.base_primed|) .cse2 (select (select |c_aux_v_#memory_$Pointer$.offset_9| |c_ULTIMATE.start_append_to_queue_~q#1.base_primed|) |c_ULTIMATE.start_append_to_queue_~q#1.offset_primed|))))) (store .cse3 |c_ULTIMATE.start_append_to_queue_~q#1.base_primed| (store (select .cse3 |c_ULTIMATE.start_append_to_queue_~q#1.base_primed|) |c_ULTIMATE.start_append_to_queue_~q#1.offset_primed| |c_ULTIMATE.start_append_to_queue_~n#1.offset_primed|))) |c_#memory_$Pointer$.offset_primed|) (= |c_aux_v_#memory_$Pointer$.offset_9| (store |c_aux_v_#memory_$Pointer$.offset_8| |c_ULTIMATE.start_main_~new_process~0#1.base_primed| (store .cse0 .cse4 (select (select |c_aux_v_#memory_$Pointer$.offset_9| |c_ULTIMATE.start_main_~new_process~0#1.base_primed|) .cse4)))) (= |c_ULTIMATE.start_append_to_queue_#in~n#1.base_primed| |c_ULTIMATE.start_main_~new_process~0#1.base_primed|) (= |c_aux_v_#memory_$Pointer$.base_9| (store |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~new_process~0#1.base_primed| (store (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~new_process~0#1.base_primed|) |c_ULTIMATE.start_main_~new_process~0#1.offset_primed| (select .cse5 |c_ULTIMATE.start_main_~new_process~0#1.offset_primed|)))) (= |c_aux_v_#memory_int_8| (let ((.cse6 (store |c_#memory_int| |c_ULTIMATE.start_main_~new_process~0#1.base_primed| (store (store (select |c_#memory_int| |c_ULTIMATE.start_main_~new_process~0#1.base_primed|) |c_ULTIMATE.start_main_~new_process~0#1.offset_primed| |c_aux_v_ULTIMATE.start_main_#t~nondet18#1_4|) .cse4 |c_ULTIMATE.start_main_~next_time~0#1|)))) (store .cse6 |c_ULTIMATE.start_append_to_queue_~n#1.base_primed| (store (select .cse6 |c_ULTIMATE.start_append_to_queue_~n#1.base_primed|) .cse2 (select (select |c_aux_v_#memory_int_8| |c_ULTIMATE.start_append_to_queue_~n#1.base_primed|) .cse2))))) (= |c_ULTIMATE.start_append_to_queue_#in~n#1.offset_primed| |c_ULTIMATE.start_append_to_queue_~n#1.offset_primed|) (= |c_ULTIMATE.start_append_to_queue_~q#1.base_primed| |c_ULTIMATE.start_append_to_queue_#in~q#1.base_primed|) (= |c_#valid_primed| (store |c_#valid| |c_ULTIMATE.start_main_~new_process~0#1.base_primed| (_ bv1 1))) (= |c_aux_v_#memory_$Pointer$.base_8| (store |c_aux_v_#memory_$Pointer$.base_9| |c_ULTIMATE.start_main_~new_process~0#1.base_primed| (store .cse5 .cse4 (select (select |c_aux_v_#memory_$Pointer$.base_8| |c_ULTIMATE.start_main_~new_process~0#1.base_primed|) .cse4)))) (bvult |c_ULTIMATE.start_main_~new_process~0#1.base_primed| |c_#StackHeapBarrier|) (= |c_ULTIMATE.start_append_to_queue_#in~n#1.offset_primed| |c_ULTIMATE.start_main_~new_process~0#1.offset_primed|) (= |c_ULTIMATE.start_main_~next_time~0#1_primed| (bvadd |c_ULTIMATE.start_main_~next_time~0#1| (_ bv1 32))) (= (_ bv0 64) |c_ULTIMATE.start_main_~new_process~0#1.offset_primed|) (not (= (_ bv0 64) |c_ULTIMATE.start_main_~new_process~0#1.base_primed|)) (= |c_ULTIMATE.start_append_to_queue_#in~q#1.offset_primed| |c_ULTIMATE.start_main_~#queue~0#1.offset|) (= (store |c_aux_v_#memory_int_8| |c_ULTIMATE.start_append_to_queue_~q#1.base_primed| (store (select |c_aux_v_#memory_int_8| |c_ULTIMATE.start_append_to_queue_~q#1.base_primed|) |c_ULTIMATE.start_append_to_queue_~q#1.offset_primed| (select (select |c_#memory_int_primed| |c_ULTIMATE.start_append_to_queue_~q#1.base_primed|) |c_ULTIMATE.start_append_to_queue_~q#1.offset_primed|))) |c_#memory_int_primed|) (= (_ bv0 1) (select |c_#valid| |c_ULTIMATE.start_main_~new_process~0#1.base_primed|)) (= |c_ULTIMATE.start_append_to_queue_#in~n#1.base_primed| |c_ULTIMATE.start_append_to_queue_~n#1.base_primed|))))
(assert (let ((.cse0 (select (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~#queue~0#1.base|) |c_ULTIMATE.start_main_~#queue~0#1.offset|)) (.cse1 (bvadd (_ bv8 64) (select (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~#queue~0#1.base|) |c_ULTIMATE.start_main_~#queue~0#1.offset|)))) (and (= (_ bv0 64) |c_ULTIMATE.start_check_queue_~n~0#1.offset|) (= (_ bv0 64) (select (select |c_#memory_$Pointer$.base| .cse0) .cse1)) (exists ((|ULTIMATE.start_main_~#queue~0#1.base| (_ BitVec 64)) (|ULTIMATE.start_main_~#queue~0#1.offset| (_ BitVec 64))) (let ((.cse4 (select (select |c_#memory_$Pointer$.offset| |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|))) (let ((.cse3 (bvadd (_ bv8 64) .cse4)) (.cse2 (select (select |c_#memory_$Pointer$.base| |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|))) (and (= (_ bv0 64) (select (select |c_#memory_$Pointer$.offset| .cse2) .cse3)) (= (_ bv0 64) (select (select |c_#memory_$Pointer$.base| .cse2) .cse3)) (not (= .cse2 |ULTIMATE.start_main_~#queue~0#1.base|)) (= .cse4 |c_ULTIMATE.start_check_queue_~n~0#1.offset|) (= .cse2 |c_ULTIMATE.start_check_queue_~n~0#1.base|))))) (not (= .cse0 |c_ULTIMATE.start_main_~#queue~0#1.base|)) (= (_ bv0 64) (select (select |c_#memory_$Pointer$.offset| .cse0) .cse1)) (= (_ bv0 64) |c_ULTIMATE.start_check_queue_~n~0#1.base|))))
(assert (not (exists ((|ULTIMATE.start_main_~#queue~0#1.base| (_ BitVec 64)) (|ULTIMATE.start_main_~#queue~0#1.offset| (_ BitVec 64))) (let ((.cse2 (select (select |c_#memory_$Pointer$.offset_primed| |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|))) (let ((.cse0 (select (select |c_#memory_$Pointer$.base_primed| |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|)) (.cse1 (bvadd (_ bv8 64) .cse2))) (and (= (_ bv0 64) (select (select |c_#memory_$Pointer$.base_primed| .cse0) .cse1)) (= |c_ULTIMATE.start_check_queue_~n~0#1.base| .cse0) (not (= .cse0 |ULTIMATE.start_main_~#queue~0#1.base|)) (= .cse2 |c_ULTIMATE.start_check_queue_~n~0#1.offset|) (= (_ bv0 64) (select (select |c_#memory_$Pointer$.offset_primed| .cse0) .cse1))))))))
(check-sat)
(exit)
