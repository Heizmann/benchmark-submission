(set-info :smt-lib-version 2.6)
(set-logic ABV)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PID () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PGID () (_ BitVec 32))
(assert (= ~unnamed0~0~P_ALL (_ bv0 32)))
(assert (= ~unnamed0~0~P_PID (_ bv1 32)))
(assert (= (_ bv2 32) ~unnamed0~0~P_PGID))
(declare-fun |ULTIMATE.start_dll_create_~new_head~0#1.offset| () (_ BitVec 64))
(declare-fun |ULTIMATE.start_dll_create_~new_head~0#1.base| () (_ BitVec 64))
(declare-fun |#memory_$Pointer$.offset| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |ULTIMATE.start_main_~#s~0#1.base| () (_ BitVec 64))
(declare-fun |#memory_$Pointer$.base| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |ULTIMATE.start_dll_create_~head~0#1.base| () (_ BitVec 64))
(declare-fun |ULTIMATE.start_dll_create_~head~0#1.offset| () (_ BitVec 64))
(assert (forall ((v_ArrVal_233 (_ BitVec 64)) (v_ArrVal_231 (_ BitVec 64)) (|ULTIMATE.start_main_~#s~0#1.offset| (_ BitVec 64))) (let ((.cse8 (bvadd |ULTIMATE.start_dll_create_~head~0#1.offset| (_ bv12 64)))) (let ((.cse4 (store |#memory_$Pointer$.offset| |ULTIMATE.start_dll_create_~head~0#1.base| (store (select |#memory_$Pointer$.offset| |ULTIMATE.start_dll_create_~head~0#1.base|) .cse8 v_ArrVal_231))) (.cse6 (store |#memory_$Pointer$.base| |ULTIMATE.start_dll_create_~head~0#1.base| (store (select |#memory_$Pointer$.base| |ULTIMATE.start_dll_create_~head~0#1.base|) .cse8 v_ArrVal_233)))) (let ((.cse0 (select (select .cse6 |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset|)) (.cse1 (select (select .cse4 |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset|))) (or (not (= |ULTIMATE.start_dll_create_~new_head~0#1.base| .cse0)) (not (= |ULTIMATE.start_dll_create_~new_head~0#1.offset| .cse1)) (forall ((v_ArrVal_236 (_ BitVec 64))) (= (_ bv0 64) (let ((.cse7 (bvadd (_ bv4 64) .cse1))) (let ((.cse3 (select (select .cse4 .cse0) .cse7))) (select (let ((.cse5 (select (select .cse6 .cse0) .cse7))) (select (let ((.cse2 (store .cse4 .cse5 (store (select .cse4 .cse5) (bvadd .cse3 (_ bv12 64)) v_ArrVal_236)))) (store .cse2 |ULTIMATE.start_main_~#s~0#1.base| (store (select .cse2 |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset| .cse3))) .cse5)) (bvadd (_ bv4 64) .cse3))))))))))))
(assert (forall ((v_ArrVal_233 (_ BitVec 64)) (v_ArrVal_231 (_ BitVec 64)) (|ULTIMATE.start_main_~#s~0#1.offset| (_ BitVec 64))) (let ((.cse8 (bvadd |ULTIMATE.start_dll_create_~head~0#1.offset| (_ bv12 64)))) (let ((.cse7 (store |#memory_$Pointer$.offset| |ULTIMATE.start_dll_create_~head~0#1.base| (store (select |#memory_$Pointer$.offset| |ULTIMATE.start_dll_create_~head~0#1.base|) .cse8 v_ArrVal_231))) (.cse4 (store |#memory_$Pointer$.base| |ULTIMATE.start_dll_create_~head~0#1.base| (store (select |#memory_$Pointer$.base| |ULTIMATE.start_dll_create_~head~0#1.base|) .cse8 v_ArrVal_233)))) (let ((.cse0 (select (select .cse4 |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset|)) (.cse1 (select (select .cse7 |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset|))) (or (not (= |ULTIMATE.start_dll_create_~new_head~0#1.base| .cse0)) (not (= |ULTIMATE.start_dll_create_~new_head~0#1.offset| .cse1)) (forall ((v_ArrVal_235 (_ BitVec 64))) (= (let ((.cse6 (bvadd (_ bv4 64) .cse1))) (let ((.cse5 (select (select .cse7 .cse0) .cse6))) (select (let ((.cse3 (select (select .cse4 .cse0) .cse6))) (select (let ((.cse2 (store .cse4 .cse3 (store (select .cse4 .cse3) (bvadd .cse5 (_ bv12 64)) v_ArrVal_235)))) (store .cse2 |ULTIMATE.start_main_~#s~0#1.base| (store (select .cse2 |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset| .cse3))) .cse3)) (bvadd (_ bv4 64) .cse5)))) (_ bv0 64)))))))))
(check-sat)
(exit)
