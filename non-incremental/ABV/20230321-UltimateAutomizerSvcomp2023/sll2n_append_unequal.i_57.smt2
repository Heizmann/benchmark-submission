(set-info :smt-lib-version 2.6)
(set-logic ABV)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PID () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PGID () (_ BitVec 32))
(declare-fun |c_old(#valid)| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_#valid| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_old(#memory_int)| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_#memory_int| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_#memory_int_primed| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_old(#memory_$Pointer$.base)| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.base| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.base_primed| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_old(#memory_$Pointer$.offset)| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.offset| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.offset_primed| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#StackHeapBarrier| () (_ BitVec 64))
(declare-fun |c_node_create_#in~data#1| () (_ BitVec 32))
(declare-fun |c_node_create_#res#1.base_primed| () (_ BitVec 64))
(declare-fun |c_node_create_#res#1.offset_primed| () (_ BitVec 64))
(declare-fun |c_node_create_~data#1| () (_ BitVec 32))
(declare-fun |c_node_create_~temp~0#1.base| () (_ BitVec 64))
(declare-fun |c_node_create_~temp~0#1.offset| () (_ BitVec 64))
(assert (= ~unnamed0~0~P_ALL (_ bv0 32)))
(assert (= ~unnamed0~0~P_PID (_ bv1 32)))
(assert (= (_ bv2 32) ~unnamed0~0~P_PGID))
(declare-fun |c_aux_v_#memory_int_17| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(assert (let ((.cse1 (select |c_aux_v_#memory_int_17| |c_node_create_~temp~0#1.base|)) (.cse0 (bvadd |c_node_create_~temp~0#1.offset| (_ bv4 64)))) (and (= (store |c_#memory_$Pointer$.offset| |c_node_create_~temp~0#1.base| (store (store (select |c_#memory_$Pointer$.offset| |c_node_create_~temp~0#1.base|) .cse0 (_ bv0 64)) |c_node_create_~temp~0#1.offset| (select (select |c_#memory_$Pointer$.offset_primed| |c_node_create_~temp~0#1.base|) |c_node_create_~temp~0#1.offset|))) |c_#memory_$Pointer$.offset_primed|) (= (store |c_aux_v_#memory_int_17| |c_node_create_~temp~0#1.base| (store .cse1 |c_node_create_~temp~0#1.offset| |c_node_create_~data#1|)) |c_#memory_int_primed|) (= |c_aux_v_#memory_int_17| (store |c_#memory_int| |c_node_create_~temp~0#1.base| (store (select |c_#memory_int| |c_node_create_~temp~0#1.base|) .cse0 (select .cse1 .cse0)))) (= |c_node_create_~temp~0#1.offset| |c_node_create_#res#1.offset_primed|) (= |c_#memory_$Pointer$.base_primed| (store |c_#memory_$Pointer$.base| |c_node_create_~temp~0#1.base| (store (store (select |c_#memory_$Pointer$.base| |c_node_create_~temp~0#1.base|) .cse0 (_ bv0 64)) |c_node_create_~temp~0#1.offset| (select (select |c_#memory_$Pointer$.base_primed| |c_node_create_~temp~0#1.base|) |c_node_create_~temp~0#1.offset|)))) (= |c_node_create_~temp~0#1.base| |c_node_create_#res#1.base_primed|))))
(assert (and (= (_ bv0 64) |c_node_create_~temp~0#1.offset|) (= (_ bv0 1) (select |c_old(#valid)| |c_node_create_~temp~0#1.base|)) (not (= (_ bv0 64) |c_node_create_~temp~0#1.base|)) (not (= (_ bv0 64) (bvadd (_ bv1 64) |c_#StackHeapBarrier|))) (= |c_old(#memory_$Pointer$.base)| |c_#memory_$Pointer$.base|) (= (_ bv0 1) (bvadd (select |c_#valid| |c_node_create_~temp~0#1.base|) (_ bv1 1))) (= |c_node_create_#in~data#1| |c_node_create_~data#1|) (bvult |c_node_create_~temp~0#1.base| |c_#StackHeapBarrier|) (= |c_old(#memory_$Pointer$.offset)| |c_#memory_$Pointer$.offset|)))
(assert (not (and (exists ((|node_create_~temp~0#1.base| (_ BitVec 64)) (v_ArrVal_457 (Array (_ BitVec 64) (_ BitVec 64))) (v_ArrVal_460 (Array (_ BitVec 64) (_ BitVec 64))) (v_ArrVal_459 (Array (_ BitVec 64) (_ BitVec 32)))) (and (= |c_#memory_$Pointer$.base_primed| (store |c_old(#memory_$Pointer$.base)| |node_create_~temp~0#1.base| v_ArrVal_457)) (= |c_#memory_$Pointer$.offset_primed| (store |c_old(#memory_$Pointer$.offset)| |node_create_~temp~0#1.base| v_ArrVal_460)) (bvult |node_create_~temp~0#1.base| |c_#StackHeapBarrier|) (= |c_#memory_int_primed| (store |c_old(#memory_int)| |node_create_~temp~0#1.base| v_ArrVal_459)) (= (_ bv0 1) (select |c_old(#valid)| |node_create_~temp~0#1.base|)))) (not (= (_ bv0 64) (bvadd |c_#StackHeapBarrier| (_ bv1 64)))))))
(check-sat)
(exit)
