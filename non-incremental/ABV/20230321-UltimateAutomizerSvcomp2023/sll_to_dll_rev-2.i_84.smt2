(set-info :smt-lib-version 2.6)
(set-logic ABV)
(set-info :source |
Generated by: Matthias Heizmann
Generated on: 2023-03-21
Generator: Ultimate Automizer
Application: Software verification
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PID () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PGID () (_ BitVec 32))
(declare-fun |c_old(#valid)| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_old(#length)| () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun |c_old(#memory_$Pointer$.base)| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.base| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_old(#memory_$Pointer$.offset)| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_old(#memory_int)| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_#StackHeapBarrier| () (_ BitVec 64))
(declare-fun |c_chain_node_#in~ppnode#1.base| () (_ BitVec 64))
(declare-fun |c_chain_node_#in~ppnode#1.offset| () (_ BitVec 64))
(declare-fun |c_chain_node_~ppnode#1.base| () (_ BitVec 64))
(declare-fun |c_chain_node_~ppnode#1.offset| () (_ BitVec 64))
(declare-fun |c_chain_node_alloc_node_#res#1.base| () (_ BitVec 64))
(declare-fun |c_chain_node_alloc_node_~ptr~0#1.base| () (_ BitVec 64))
(assert (= ~unnamed0~0~P_ALL (_ bv0 32)))
(assert (= ~unnamed0~0~P_PID (_ bv1 32)))
(assert (= (_ bv2 32) ~unnamed0~0~P_PGID))
(declare-fun |c_#memory_$Pointer$.base_Hier| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#valid_Hier| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_#memory_int_Hier| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_#length_Hier| () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun |c_#memory_$Pointer$.offset_Hier| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(assert (and (= |c_#length_Hier| |c_old(#length)|) (= |c_#valid_Hier| |c_old(#valid)|) (= |c_old(#memory_int)| |c_#memory_int_Hier|) (= |c_old(#memory_$Pointer$.base)| |c_#memory_$Pointer$.base_Hier|) (= |c_#memory_$Pointer$.offset_Hier| |c_old(#memory_$Pointer$.offset)|)))
(declare-fun |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_create_sll_~#list~0#1.offset_Hier| () (_ BitVec 64))
(assert (and (= |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| |c_chain_node_#in~ppnode#1.base|) (= |c_ULTIMATE.start_create_sll_~#list~0#1.offset_Hier| |c_chain_node_#in~ppnode#1.offset|)))
(assert (let ((.cse2 (select (select |c_#memory_$Pointer$.base| |c_chain_node_#in~ppnode#1.base|) |c_chain_node_#in~ppnode#1.offset|))) (and (= |c_chain_node_#in~ppnode#1.offset| |c_chain_node_~ppnode#1.offset|) (exists ((v_DerPreprocessor_3 (Array (_ BitVec 64) (_ BitVec 64))) (v_DerPreprocessor_2 (Array (_ BitVec 64) (_ BitVec 64)))) (let ((.cse0 (select v_DerPreprocessor_3 |c_chain_node_#in~ppnode#1.offset|))) (let ((.cse1 (select (store (store (store (store |c_#memory_$Pointer$.base| .cse0 v_DerPreprocessor_2) |c_chain_node_#in~ppnode#1.base| v_DerPreprocessor_3) .cse0 v_DerPreprocessor_2) |c_chain_node_#in~ppnode#1.base| v_DerPreprocessor_3) .cse0))) (and (not (= (_ bv0 64) .cse0)) (= v_DerPreprocessor_2 .cse1) (= (select |c_#memory_$Pointer$.base| .cse0) .cse1) (= .cse0 .cse2))))) (not (= (_ bv0 64) |c_chain_node_alloc_node_#res#1.base|)) (exists ((v_ArrVal_138 (Array (_ BitVec 64) (_ BitVec 64))) (|chain_node_~node~0#1.base| (_ BitVec 64)) (v_ArrVal_137 (Array (_ BitVec 64) (_ BitVec 64)))) (and (bvult |chain_node_~node~0#1.base| |c_#StackHeapBarrier|) (not (= |chain_node_~node~0#1.base| (_ bv0 64))) (= (store (store |c_old(#memory_$Pointer$.base)| |chain_node_~node~0#1.base| v_ArrVal_138) |c_chain_node_#in~ppnode#1.base| (store (select (store |c_old(#memory_$Pointer$.base)| |chain_node_~node~0#1.base| v_ArrVal_137) |c_chain_node_#in~ppnode#1.base|) |c_chain_node_#in~ppnode#1.offset| |chain_node_~node~0#1.base|)) |c_#memory_$Pointer$.base|))) (not (= (_ bv0 64) (bvadd (_ bv1 64) |c_#StackHeapBarrier|))) (or (= |c_chain_node_#in~ppnode#1.base| .cse2) (exists ((v_DerPreprocessor_9 (Array (_ BitVec 64) (_ BitVec 64))) (v_DerPreprocessor_8 (Array (_ BitVec 64) (_ BitVec 64)))) (and (= (select v_DerPreprocessor_9 |c_chain_node_#in~ppnode#1.offset|) .cse2) (= (select (store (store (store (store |c_#memory_$Pointer$.base| .cse2 v_DerPreprocessor_8) |c_chain_node_#in~ppnode#1.base| v_DerPreprocessor_9) .cse2 v_DerPreprocessor_8) |c_chain_node_#in~ppnode#1.base| v_DerPreprocessor_9) .cse2) (select |c_#memory_$Pointer$.base| .cse2))))) (not (= (_ bv0 64) |c_chain_node_alloc_node_~ptr~0#1.base|)) (= |c_chain_node_~ppnode#1.base| |c_chain_node_#in~ppnode#1.base|))))
(declare-fun |c_ULTIMATE.start_main_~#p1~0#1.offset_Hier| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_create_sll_~pp1#1.base_Hier| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~#p1~0#1.base_Hier| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_create_sll_~pp1#1.offset_Hier| () (_ BitVec 64))
(assert (and (= (_ bv0 64) |c_ULTIMATE.start_create_sll_~pp1#1.offset_Hier|) (exists ((v_DerPreprocessor_7 (Array (_ BitVec 64) (_ BitVec 64))) (v_DerPreprocessor_6 (Array (_ BitVec 64) (_ BitVec 64))) (|#StackHeapBarrier| (_ BitVec 64)) (|ULTIMATE.start_create_sll_~#list~0#1.base| (_ BitVec 64))) (let ((.cse2 (select v_DerPreprocessor_7 (_ bv0 64)))) (let ((.cse1 (store (store (store (store |c_#memory_$Pointer$.base_Hier| .cse2 v_DerPreprocessor_6) |ULTIMATE.start_create_sll_~#list~0#1.base| v_DerPreprocessor_7) .cse2 v_DerPreprocessor_6) |ULTIMATE.start_create_sll_~#list~0#1.base| v_DerPreprocessor_7))) (let ((.cse0 (select .cse1 .cse2))) (and (= v_DerPreprocessor_6 .cse0) (not (= (select (select .cse1 |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|) (_ bv0 64)) (_ bv0 64))) (not (= .cse2 (_ bv0 64))) (= (select |c_#memory_$Pointer$.base_Hier| .cse2) .cse0) (bvult .cse2 |#StackHeapBarrier|) (= (select (select |c_#memory_$Pointer$.base_Hier| |ULTIMATE.start_create_sll_~#list~0#1.base|) (_ bv0 64)) .cse2) (bvult |#StackHeapBarrier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|)))))) (= (_ bv0 64) |c_ULTIMATE.start_create_sll_~#list~0#1.offset_Hier|) (= (_ bv0 64) |c_ULTIMATE.start_main_~#p1~0#1.offset_Hier|) (exists ((|#StackHeapBarrier| (_ BitVec 64)) (|ULTIMATE.start_create_sll_~#list~0#1.base| (_ BitVec 64)) (v_DerPreprocessor_11 (Array (_ BitVec 64) (_ BitVec 64))) (v_DerPreprocessor_12 (Array (_ BitVec 64) (_ BitVec 64)))) (let ((.cse4 (select v_DerPreprocessor_12 (_ bv0 64)))) (let ((.cse3 (select (store (store (store (store |c_#memory_$Pointer$.base_Hier| .cse4 v_DerPreprocessor_11) |ULTIMATE.start_create_sll_~#list~0#1.base| v_DerPreprocessor_12) .cse4 v_DerPreprocessor_11) |ULTIMATE.start_create_sll_~#list~0#1.base| v_DerPreprocessor_12) .cse4))) (and (= .cse3 v_DerPreprocessor_11) (= (select |c_#memory_$Pointer$.base_Hier| .cse4) .cse3) (not (= (_ bv0 64) .cse4)) (= (select (select |c_#memory_$Pointer$.base_Hier| |ULTIMATE.start_create_sll_~#list~0#1.base|) (_ bv0 64)) .cse4) (bvult .cse4 |#StackHeapBarrier|) (bvult |#StackHeapBarrier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|))))) (= |c_ULTIMATE.start_main_~#p1~0#1.base_Hier| |c_ULTIMATE.start_create_sll_~pp1#1.base_Hier|) (bvult |c_#StackHeapBarrier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|)))
(assert (not (and (exists ((v_DerPreprocessor_7 (Array (_ BitVec 64) (_ BitVec 64))) (v_DerPreprocessor_6 (Array (_ BitVec 64) (_ BitVec 64))) (|#StackHeapBarrier| (_ BitVec 64)) (|ULTIMATE.start_create_sll_~#list~0#1.base| (_ BitVec 64))) (let ((.cse2 (select v_DerPreprocessor_7 (_ bv0 64)))) (let ((.cse1 (store (store (store (store |c_#memory_$Pointer$.base| .cse2 v_DerPreprocessor_6) |ULTIMATE.start_create_sll_~#list~0#1.base| v_DerPreprocessor_7) .cse2 v_DerPreprocessor_6) |ULTIMATE.start_create_sll_~#list~0#1.base| v_DerPreprocessor_7))) (let ((.cse0 (select .cse1 .cse2))) (and (= v_DerPreprocessor_6 .cse0) (not (= (select (select .cse1 |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|) (_ bv0 64)) (_ bv0 64))) (not (= .cse2 (_ bv0 64))) (= (select |c_#memory_$Pointer$.base| .cse2) .cse0) (bvult .cse2 |#StackHeapBarrier|) (= (select (select |c_#memory_$Pointer$.base| |ULTIMATE.start_create_sll_~#list~0#1.base|) (_ bv0 64)) .cse2) (bvult |#StackHeapBarrier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|)))))) (= (_ bv0 64) |c_ULTIMATE.start_main_~#p1~0#1.offset_Hier|))))
(check-sat)
(exit)
