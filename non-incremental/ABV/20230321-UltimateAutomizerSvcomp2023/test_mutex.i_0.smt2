(set-info :smt-lib-version 2.6)
(set-logic ABV)
(set-info :source |
Generated by: Matthias Heizmann
Generated on: 2023-03-21
Generator: Ultimate Automizer
Application: Software verification
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PID () (_ BitVec 32))
(declare-fun ~unnamed0~0~P_PGID () (_ BitVec 32))
(declare-fun |c_~#mutexes~0.base| () (_ BitVec 64))
(declare-fun |c_~#mutexes~0.offset| () (_ BitVec 64))
(declare-fun |c_#valid| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_old(#memory_$Pointer$.base)| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.base| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c_#memory_$Pointer$.offset| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 64))))
(declare-fun |c___ldv_list_add_#in~new.base| () (_ BitVec 64))
(declare-fun |c___ldv_list_add_#in~new.offset| () (_ BitVec 64))
(declare-fun |c___ldv_list_add_#in~prev.base| () (_ BitVec 64))
(declare-fun |c___ldv_list_add_#in~prev.offset| () (_ BitVec 64))
(declare-fun |c___ldv_list_add_#in~next.base| () (_ BitVec 64))
(assert (= ~unnamed0~0~P_ALL (_ bv0 32)))
(assert (= ~unnamed0~0~P_PID (_ bv1 32)))
(assert (= (_ bv2 32) ~unnamed0~0~P_PGID))
(assert (and (= (bvadd (select |c_#valid| (_ bv3 64)) (_ bv1 1)) (_ bv0 1)) (= (_ bv3 64) (select (select |c_#memory_$Pointer$.base| (_ bv3 64)) (_ bv0 64))) (= |c_~#mutexes~0.offset| (_ bv0 64)) (= (_ bv3 64) |c_~#mutexes~0.base|)))
(assert (not (and (exists ((v_ArrVal_84 (Array (_ BitVec 64) (_ BitVec 64))) (v_ArrVal_87 (Array (_ BitVec 64) (_ BitVec 64))) (v_ArrVal_77 (Array (_ BitVec 64) (_ BitVec 64))) (__ldv_list_add_~next.offset (_ BitVec 64))) (= (store (store (store |c_old(#memory_$Pointer$.base)| |c___ldv_list_add_#in~next.base| v_ArrVal_84) |c___ldv_list_add_#in~new.base| (store (store (select (store |c_old(#memory_$Pointer$.base)| |c___ldv_list_add_#in~next.base| (store (select |c_old(#memory_$Pointer$.base)| |c___ldv_list_add_#in~next.base|) (bvadd (_ bv8 64) __ldv_list_add_~next.offset) |c___ldv_list_add_#in~new.base|)) |c___ldv_list_add_#in~new.base|) |c___ldv_list_add_#in~new.offset| |c___ldv_list_add_#in~next.base|) (bvadd (_ bv8 64) |c___ldv_list_add_#in~new.offset|) |c___ldv_list_add_#in~prev.base|)) |c___ldv_list_add_#in~prev.base| (store (select (store (store |c_old(#memory_$Pointer$.base)| |c___ldv_list_add_#in~next.base| v_ArrVal_77) |c___ldv_list_add_#in~new.base| v_ArrVal_87) |c___ldv_list_add_#in~prev.base|) |c___ldv_list_add_#in~prev.offset| |c___ldv_list_add_#in~new.base|)) |c_#memory_$Pointer$.base|)) (= |c_~#mutexes~0.offset| (_ bv0 64)) (= (_ bv3 64) |c_~#mutexes~0.base|) (let ((.cse0 (= (select (select |c_#memory_$Pointer$.offset| |c___ldv_list_add_#in~prev.base|) |c___ldv_list_add_#in~prev.offset|) |c___ldv_list_add_#in~new.offset|))) (or (and .cse0 (or (and (= |c___ldv_list_add_#in~next.base| |c___ldv_list_add_#in~prev.base|) (exists ((v_DerPreprocessor_7 (Array (_ BitVec 64) (_ BitVec 64))) (v_DerPreprocessor_9 (Array (_ BitVec 64) (_ BitVec 64))) (v_DerPreprocessor_8 (Array (_ BitVec 64) (_ BitVec 64)))) (let ((.cse1 (store (store (store (store (store (store |c_#memory_$Pointer$.offset| |c___ldv_list_add_#in~next.base| v_DerPreprocessor_7) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_8) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_9) |c___ldv_list_add_#in~next.base| v_DerPreprocessor_7) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_8) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_9))) (and (= v_DerPreprocessor_8 (select .cse1 |c___ldv_list_add_#in~new.base|)) (= |c___ldv_list_add_#in~new.offset| (select v_DerPreprocessor_9 |c___ldv_list_add_#in~prev.offset|)) (= (select .cse1 |c___ldv_list_add_#in~next.base|) v_DerPreprocessor_7)))) (exists ((v_prenex_9 (Array (_ BitVec 64) (_ BitVec 64))) (v_prenex_10 (Array (_ BitVec 64) (_ BitVec 64))) (v_prenex_11 (Array (_ BitVec 64) (_ BitVec 64)))) (let ((.cse2 (store (store (store (store (store (store |c_#memory_$Pointer$.offset| |c___ldv_list_add_#in~next.base| v_prenex_11) |c___ldv_list_add_#in~new.base| v_prenex_10) |c___ldv_list_add_#in~prev.base| v_prenex_9) |c___ldv_list_add_#in~next.base| v_prenex_11) |c___ldv_list_add_#in~new.base| v_prenex_10) |c___ldv_list_add_#in~prev.base| v_prenex_9))) (and (= v_prenex_10 (select .cse2 |c___ldv_list_add_#in~new.base|)) (= v_prenex_11 (select .cse2 |c___ldv_list_add_#in~next.base|)) (= (select v_prenex_9 |c___ldv_list_add_#in~prev.offset|) |c___ldv_list_add_#in~new.offset|))))) (exists ((v_DerPreprocessor_9 (Array (_ BitVec 64) (_ BitVec 64)))) (and (exists ((v_DerPreprocessor_7 (Array (_ BitVec 64) (_ BitVec 64))) (v_DerPreprocessor_8 (Array (_ BitVec 64) (_ BitVec 64)))) (let ((.cse3 (store (store (store (store (store (store |c_#memory_$Pointer$.offset| |c___ldv_list_add_#in~next.base| v_DerPreprocessor_7) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_8) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_9) |c___ldv_list_add_#in~next.base| v_DerPreprocessor_7) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_8) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_9))) (let ((.cse5 (select .cse3 |c___ldv_list_add_#in~next.base|))) (and (= v_DerPreprocessor_8 (select .cse3 |c___ldv_list_add_#in~new.base|)) (exists ((v_DerPreprocessor_6 (Array (_ BitVec 64) (_ BitVec 64))) (v_DerPreprocessor_5 (Array (_ BitVec 64) (_ BitVec 64))) (v_DerPreprocessor_4 (Array (_ BitVec 64) (_ BitVec 64)))) (let ((.cse4 (store (store (store (store (store (store |c_#memory_$Pointer$.offset| |c___ldv_list_add_#in~next.base| v_DerPreprocessor_4) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_5) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_6) |c___ldv_list_add_#in~next.base| v_DerPreprocessor_4) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_5) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_6))) (let ((.cse6 (select .cse4 |c___ldv_list_add_#in~next.base|))) (and (= (select v_DerPreprocessor_6 |c___ldv_list_add_#in~prev.offset|) |c___ldv_list_add_#in~new.offset|) (= v_DerPreprocessor_5 (select .cse4 |c___ldv_list_add_#in~new.base|)) (= .cse5 .cse6) (= .cse6 (select |c_#memory_$Pointer$.offset| |c___ldv_list_add_#in~next.base|)) (= v_DerPreprocessor_4 .cse6))))) (= .cse5 v_DerPreprocessor_7))))) (= |c___ldv_list_add_#in~new.offset| (select v_DerPreprocessor_9 |c___ldv_list_add_#in~prev.offset|)))))) (and (not (= |c___ldv_list_add_#in~new.base| |c___ldv_list_add_#in~prev.base|)) .cse0))))))
(check-sat)
(exit)
