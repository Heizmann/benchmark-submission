(set-info :smt-lib-version 2.6)
(set-logic ABV)
(set-info :source |
Generated by: Matthias Heizmann
Generated on: 2023-03-21
Generator: Ultimate Automizer
Application: Software verification
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |c_#memory_int| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun c_check_~a.base () (_ BitVec 64))
(declare-fun c_check_~a.offset () (_ BitVec 64))
(declare-fun c_check_~x0~0 () (_ BitVec 32))
(declare-fun c_check_~y0~0 () (_ BitVec 32))
(declare-fun c_check_~x1~0 () (_ BitVec 32))
(assert (forall ((check_~x1~0 (_ BitVec 32)) (check_~i~0 (_ BitVec 32)) (check_~a.offset (_ BitVec 64))) (let ((.cse0 (select |c_#memory_int| c_check_~a.base))) (bvsle (select .cse0 (bvadd check_~a.offset (bvmul (_ bv4 64) ((_ sign_extend 32) check_~i~0)))) (select .cse0 (bvadd (bvmul ((_ sign_extend 32) check_~x1~0) (_ bv4 64)) check_~a.offset))))))
(assert (not (forall ((check_~i~0 (_ BitVec 32))) (or (not (bvsle c_check_~x0~0 check_~i~0)) (not (bvsle check_~i~0 c_check_~y0~0)) (let ((.cse0 (select |c_#memory_int| c_check_~a.base))) (bvsle (select .cse0 (bvadd (bvmul (_ bv4 64) ((_ sign_extend 32) check_~i~0)) c_check_~a.offset)) (select .cse0 (bvadd (bvmul ((_ sign_extend 32) c_check_~x1~0) (_ bv4 64)) c_check_~a.offset))))))))
(check-sat)
(exit)
