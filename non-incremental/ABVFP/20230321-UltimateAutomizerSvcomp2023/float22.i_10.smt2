(set-info :smt-lib-version 2.6)
(set-logic ABVFP)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |c_old(#valid)| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_#valid| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_old(#length)| () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun |c_old(#memory_int)| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_#memory_int| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_returnsStructure_#in~index| () (_ BitVec 32))
(declare-fun |c_returnsStructure_#res.ieee.negative| () (_ BitVec 32))
(declare-fun |c_returnsStructure_#res.ieee.exponent| () (_ BitVec 32))
(declare-fun |c_returnsStructure_#res.ieee.mantissa| () (_ BitVec 32))
(declare-fun |c_returnsStructure_#res.f| () (_ FloatingPoint 8 24))
(declare-fun |c_ULTIMATE.start_testOne_#t~ret7#1.ieee.negative_primed| () (_ BitVec 32))
(declare-fun |c_ULTIMATE.start_testOne_#t~ret7#1.ieee.exponent_primed| () (_ BitVec 32))
(declare-fun |c_ULTIMATE.start_testOne_#t~ret7#1.ieee.mantissa_primed| () (_ BitVec 32))
(declare-fun |c_ULTIMATE.start_testOne_#t~ret7#1.f_primed| () (_ FloatingPoint 8 24))
(assert (and (= |c_returnsStructure_#res.ieee.exponent| |c_ULTIMATE.start_testOne_#t~ret7#1.ieee.exponent_primed|) (= |c_returnsStructure_#res.ieee.negative| |c_ULTIMATE.start_testOne_#t~ret7#1.ieee.negative_primed|) (= |c_returnsStructure_#res.ieee.mantissa| |c_ULTIMATE.start_testOne_#t~ret7#1.ieee.mantissa_primed|) (= |c_returnsStructure_#res.f| |c_ULTIMATE.start_testOne_#t~ret7#1.f_primed|)))
(declare-fun |c_#valid_Hier| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_#memory_int_Hier| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_#length_Hier| () (Array (_ BitVec 64) (_ BitVec 64)))
(assert (and (= |c_#length_Hier| |c_old(#length)|) (= |c_#valid_Hier| |c_old(#valid)|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)))
(assert (= |c_returnsStructure_#in~index| (_ bv1 32)))
(assert (let ((.cse0 (bvand |c_returnsStructure_#in~index| (_ bv1 32)))) (and (= |c_old(#valid)| |c_#valid|) (exists ((|v_returnsStructure_~#c~1.base_18| (_ BitVec 64)) (v_ArrVal_118 (_ BitVec 1))) (let ((.cse1 (select (select |c_#memory_int| |v_returnsStructure_~#c~1.base_18|) (_ bv0 64)))) (and (= |c_#valid| (store |c_old(#valid)| |v_returnsStructure_~#c~1.base_18| v_ArrVal_118)) (= .cse0 .cse1) (= |c_returnsStructure_#res.f| (fp ((_ extract 31 31) .cse1) ((_ extract 30 23) .cse1) ((_ extract 22 0) .cse1))) (= (select |c_old(#valid)| |v_returnsStructure_~#c~1.base_18|) (_ bv0 1))))) (exists ((|v_returnsStructure_~#c~1.base_19| (_ BitVec 64)) (v_ArrVal_127 (_ BitVec 32)) (v_ArrVal_126 (_ BitVec 32))) (and (= (store |c_old(#memory_int)| |v_returnsStructure_~#c~1.base_19| (store (store (store (select |c_old(#memory_int)| |v_returnsStructure_~#c~1.base_19|) (_ bv0 64) .cse0) (_ bv4 64) v_ArrVal_127) (_ bv8 64) v_ArrVal_126)) |c_#memory_int|) (= (select |c_old(#valid)| |v_returnsStructure_~#c~1.base_19|) (_ bv0 1)) (= (let ((.cse2 (select (select |c_#memory_int| |v_returnsStructure_~#c~1.base_19|) (_ bv0 64)))) (fp ((_ extract 31 31) .cse2) ((_ extract 30 23) .cse2) ((_ extract 22 0) .cse2))) |c_returnsStructure_#res.f|))))))
(declare-fun |c_ULTIMATE.start_testOne_~#f2~0#1.base_Hier| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_testOne_~#f1~0#1.offset_Hier| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_testOne_~#f1~0#1.base_Hier| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_testOne_~#f2~0#1.offset_Hier| () (_ BitVec 64))
(assert (and (= (bvadd (select |c_#valid_Hier| |c_ULTIMATE.start_testOne_~#f1~0#1.base_Hier|) (_ bv1 1)) (_ bv0 1)) (exists ((|v_returnsStructure_~#c~1.base_8| (_ BitVec 64))) (and (= (_ bv0 32) (select (select |c_#memory_int_Hier| |v_returnsStructure_~#c~1.base_8|) (_ bv0 64))) (not (= |v_returnsStructure_~#c~1.base_8| |c_ULTIMATE.start_testOne_~#f1~0#1.base_Hier|)))) (= (_ bv0 64) |c_ULTIMATE.start_testOne_~#f2~0#1.offset_Hier|) (not (= |c_ULTIMATE.start_testOne_~#f2~0#1.base_Hier| |c_ULTIMATE.start_testOne_~#f1~0#1.base_Hier|)) (= (_ bv0 64) |c_ULTIMATE.start_testOne_~#f1~0#1.offset_Hier|) (= (let ((.cse0 (select (select |c_#memory_int_Hier| |c_ULTIMATE.start_testOne_~#f1~0#1.base_Hier|) (_ bv0 64)))) (fp ((_ extract 31 31) .cse0) ((_ extract 30 23) .cse0) ((_ extract 22 0) .cse0))) (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)))))
(assert (not (and (= (bvadd (select |c_#valid| |c_ULTIMATE.start_testOne_~#f1~0#1.base_Hier|) (_ bv1 1)) (_ bv0 1)) (exists ((|v_returnsStructure_~#c~1.base_8| (_ BitVec 64))) (and (= (_ bv0 32) (select (select |c_#memory_int| |v_returnsStructure_~#c~1.base_8|) (_ bv0 64))) (not (= |v_returnsStructure_~#c~1.base_8| |c_ULTIMATE.start_testOne_~#f1~0#1.base_Hier|)))) (= (_ bv0 64) |c_ULTIMATE.start_testOne_~#f2~0#1.offset_Hier|) (not (= |c_ULTIMATE.start_testOne_~#f2~0#1.base_Hier| |c_ULTIMATE.start_testOne_~#f1~0#1.base_Hier|)) (= (_ bv0 64) |c_ULTIMATE.start_testOne_~#f1~0#1.offset_Hier|) (= (let ((.cse0 (select (select |c_#memory_int| |c_ULTIMATE.start_testOne_~#f1~0#1.base_Hier|) (_ bv0 64)))) (fp ((_ extract 31 31) .cse0) ((_ extract 30 23) .cse0) ((_ extract 22 0) .cse0))) (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))))
(check-sat)
(exit)
