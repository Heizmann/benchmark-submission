(set-info :smt-lib-version 2.6)
(set-logic ABVFP)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun c_currentRoundingMode () RoundingMode)
(declare-fun |c_~#atanhi_atan~0.base| () (_ BitVec 64))
(declare-fun |c_~#atanhi_atan~0.offset| () (_ BitVec 64))
(declare-fun |c_~#atanlo_atan~0.base| () (_ BitVec 64))
(declare-fun |c_~#atanlo_atan~0.offset| () (_ BitVec 64))
(declare-fun |c_#memory_int| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_ULTIMATE.start___ieee754_atan2f_~y#1| () (_ FloatingPoint 8 24))
(declare-fun |c_ULTIMATE.start___ieee754_atan2f_~hx~1#1| () (_ BitVec 32))
(declare-fun |c_atan_float_#res_primed| () (_ FloatingPoint 8 24))
(declare-fun c_atan_float_~x () (_ FloatingPoint 8 24))
(declare-fun c_atan_float_~s1~0 () (_ FloatingPoint 8 24))
(declare-fun c_atan_float_~s2~0 () (_ FloatingPoint 8 24))
(declare-fun c_atan_float_~z~0_primed () (_ FloatingPoint 8 24))
(declare-fun c_atan_float_~hx~0 () (_ BitVec 32))
(declare-fun c_atan_float_~id~0 () (_ BitVec 32))
(assert (and (= (ite (bvslt c_atan_float_~hx~0 (_ bv0 32)) (fp.neg c_atan_float_~z~0_primed) c_atan_float_~z~0_primed) |c_atan_float_#res_primed|) (not (bvslt c_atan_float_~id~0 (_ bv0 32))) (= (let ((.cse1 (bvmul ((_ sign_extend 32) c_atan_float_~id~0) (_ bv4 64)))) (fp.sub c_currentRoundingMode (let ((.cse0 (select (select |c_#memory_int| |c_~#atanhi_atan~0.base|) (bvadd |c_~#atanhi_atan~0.offset| .cse1)))) (fp ((_ extract 31 31) .cse0) ((_ extract 30 23) .cse0) ((_ extract 22 0) .cse0))) (fp.sub c_currentRoundingMode (fp.sub c_currentRoundingMode (fp.mul c_currentRoundingMode c_atan_float_~x (fp.add c_currentRoundingMode c_atan_float_~s1~0 c_atan_float_~s2~0)) (let ((.cse2 (select (select |c_#memory_int| |c_~#atanlo_atan~0.base|) (bvadd |c_~#atanlo_atan~0.offset| .cse1)))) (fp ((_ extract 31 31) .cse2) ((_ extract 30 23) .cse2) ((_ extract 22 0) .cse2)))) c_atan_float_~x))) c_atan_float_~z~0_primed)))
(assert (not (and (exists ((|v_ULTIMATE.start___ieee754_atan2f_~#gf_u~2#1.base_6| (_ BitVec 64)) (currentRoundingMode RoundingMode)) (let ((.cse0 (select (select |c_#memory_int| |v_ULTIMATE.start___ieee754_atan2f_~#gf_u~2#1.base_6|) (_ bv0 64)))) (and (= .cse0 |c_ULTIMATE.start___ieee754_atan2f_~hx~1#1|) (= (fp.div currentRoundingMode ((_ to_fp 8 24) currentRoundingMode 1.0) (_ +zero 8 24)) (fp ((_ extract 31 31) .cse0) ((_ extract 30 23) .cse0) ((_ extract 22 0) .cse0)))))) (fp.lt |c_ULTIMATE.start___ieee754_atan2f_~y#1| (_ +zero 8 24)))))
(check-sat)
(exit)
