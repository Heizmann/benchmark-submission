(set-info :smt-lib-version 2.6)
(set-logic ABVFP)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |c_#valid| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_#valid_primed| () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun |c_#length| () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun |c_#length_primed| () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun |c_#memory_int| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_#memory_int_primed| () (Array (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 32))))
(declare-fun |c_#StackHeapBarrier| () (_ BitVec 64))
(declare-fun |c_ULTIMATE.start_main_~x~0#1| () (_ FloatingPoint 8 24))
(declare-fun |c_ULTIMATE.start_fmod_float_~x#1| () (_ FloatingPoint 8 24))
(declare-fun |c_ULTIMATE.start_fmod_float_~y#1| () (_ FloatingPoint 8 24))
(declare-fun |c_ULTIMATE.start_fmod_float_~hx~0#1| () (_ BitVec 32))
(declare-fun |c_ULTIMATE.start_fmod_float_~hy~0#1_primed| () (_ BitVec 32))
(declare-fun |c_aux_v_ULTIMATE.start_fmod_float_~#gf_u~1#1.base_4| () (_ BitVec 64))
(declare-fun |c_aux_v_skolemized_q#valueAsBitvector_6| () (_ BitVec 32))
(assert (and (not (= (_ bv0 64) |c_aux_v_ULTIMATE.start_fmod_float_~#gf_u~1#1.base_4|)) (= |c_#length_primed| (store |c_#length| |c_aux_v_ULTIMATE.start_fmod_float_~#gf_u~1#1.base_4| (_ bv4 64))) (= |c_ULTIMATE.start_fmod_float_~hy~0#1_primed| (select (select |c_#memory_int_primed| |c_aux_v_ULTIMATE.start_fmod_float_~#gf_u~1#1.base_4|) (_ bv0 64))) (= |c_#valid_primed| (store |c_#valid| |c_aux_v_ULTIMATE.start_fmod_float_~#gf_u~1#1.base_4| (_ bv0 1))) (= |c_ULTIMATE.start_fmod_float_~y#1| (fp ((_ extract 31 31) |c_aux_v_skolemized_q#valueAsBitvector_6|) ((_ extract 30 23) |c_aux_v_skolemized_q#valueAsBitvector_6|) ((_ extract 22 0) |c_aux_v_skolemized_q#valueAsBitvector_6|))) (bvult |c_#StackHeapBarrier| |c_aux_v_ULTIMATE.start_fmod_float_~#gf_u~1#1.base_4|) (= (store |c_#memory_int| |c_aux_v_ULTIMATE.start_fmod_float_~#gf_u~1#1.base_4| (store (select |c_#memory_int| |c_aux_v_ULTIMATE.start_fmod_float_~#gf_u~1#1.base_4|) (_ bv0 64) |c_aux_v_skolemized_q#valueAsBitvector_6|)) |c_#memory_int_primed|) (= (_ bv0 1) (select |c_#valid| |c_aux_v_ULTIMATE.start_fmod_float_~#gf_u~1#1.base_4|))))
(assert (and (exists ((|v_ULTIMATE.start_fmod_float_~#gf_u~0#1.base_6| (_ BitVec 64))) (let ((.cse0 (select (select |c_#memory_int| |v_ULTIMATE.start_fmod_float_~#gf_u~0#1.base_6|) (_ bv0 64)))) (and (= (fp ((_ extract 31 31) .cse0) ((_ extract 30 23) .cse0) ((_ extract 22 0) .cse0)) (_ +zero 8 24)) (= |c_ULTIMATE.start_fmod_float_~hx~0#1| .cse0)))) (= |c_ULTIMATE.start_fmod_float_~x#1| (_ +zero 8 24)) (or (fp.gt |c_ULTIMATE.start_fmod_float_~y#1| (_ +zero 8 24)) (fp.lt |c_ULTIMATE.start_fmod_float_~y#1| (_ +zero 8 24))) (= |c_ULTIMATE.start_main_~x~0#1| (_ +zero 8 24))))
(assert (not (and (exists ((|v_ULTIMATE.start_fmod_float_~#gf_u~0#1.base_6| (_ BitVec 64))) (let ((.cse0 (select (select |c_#memory_int_primed| |v_ULTIMATE.start_fmod_float_~#gf_u~0#1.base_6|) (_ bv0 64)))) (and (= .cse0 |c_ULTIMATE.start_fmod_float_~hx~0#1|) (= (fp ((_ extract 31 31) .cse0) ((_ extract 30 23) .cse0) ((_ extract 22 0) .cse0)) (_ +zero 8 24))))) (or (fp.lt |c_ULTIMATE.start_fmod_float_~y#1| (_ +zero 8 24)) (fp.gt |c_ULTIMATE.start_fmod_float_~y#1| (_ +zero 8 24))))))
(check-sat)
(exit)
