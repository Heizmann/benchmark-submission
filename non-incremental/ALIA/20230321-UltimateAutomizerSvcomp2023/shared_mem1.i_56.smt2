(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |c_ULTIMATE.start_main_#t~mem9#1| () Int)
(declare-fun |c_ULTIMATE.start_main_~m~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_main_~m~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_main_~head~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_main_~head~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_main_~list~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_main_~list~0#1.offset| () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(assert (let ((.cse17 (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~list~0#1.base|)) (.cse26 (+ |c_ULTIMATE.start_main_~list~0#1.offset| 4)) (.cse16 (select |c_#memory_int| |c_ULTIMATE.start_main_~list~0#1.base|))) (let ((.cse19 (select |c_#memory_int| |c_ULTIMATE.start_main_~m~0#1.base|)) (.cse0 (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~list~0#1.base|)) (.cse23 (select .cse16 |c_ULTIMATE.start_main_~list~0#1.offset|)) (.cse22 (select .cse17 .cse26))) (let ((.cse14 (select |c_#memory_int| |c_ULTIMATE.start_main_~head~0#1.base|)) (.cse15 (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~head~0#1.base|)) (.cse21 (let ((.cse28 (+ |c_ULTIMATE.start_main_~list~0#1.offset| 12))) (let ((.cse29 (select .cse17 .cse28))) (and (= (select .cse0 .cse28) |c_ULTIMATE.start_main_~list~0#1.offset|) (= .cse23 1) (not (= |c_ULTIMATE.start_main_~list~0#1.base| .cse22)) (= (select |c_#memory_int| .cse29) .cse16) (not (= .cse29 .cse22)))))) (.cse18 (= (select .cse19 |c_ULTIMATE.start_main_~m~0#1.offset|) 100)) (.cse13 (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~head~0#1.base|)) (.cse12 (+ |c_ULTIMATE.start_main_~head~0#1.offset| 12))) (and (= (select .cse0 4) 0) (forall ((v_ArrVal_614 (Array Int Int)) (v_ArrVal_613 (Array Int Int)) (v_ArrVal_615 (Array Int Int)) (v_ArrVal_616 Int)) (let ((.cse11 (select .cse13 (+ |c_ULTIMATE.start_main_~head~0#1.offset| 4)))) (let ((.cse8 (store |c_#memory_$Pointer$.offset| .cse11 v_ArrVal_614))) (let ((.cse7 (select (select .cse8 |c_ULTIMATE.start_main_~head~0#1.base|) .cse12)) (.cse10 (store |c_#memory_$Pointer$.base| .cse11 v_ArrVal_613))) (let ((.cse6 (select (select .cse10 |c_ULTIMATE.start_main_~head~0#1.base|) .cse12)) (.cse9 (+ .cse7 4))) (let ((.cse1 (store |c_#memory_int| .cse11 v_ArrVal_615)) (.cse2 (select (select .cse10 .cse6) .cse9))) (let ((.cse3 (select .cse1 .cse2)) (.cse4 (select (select .cse8 .cse6) .cse9))) (let ((.cse5 (select .cse3 .cse4))) (or (<= 91 (select (select (store .cse1 .cse2 (store .cse3 .cse4 v_ArrVal_616)) |c_ULTIMATE.start_main_~m~0#1.base|) |c_ULTIMATE.start_main_~m~0#1.offset|)) (< .cse5 101) (< (+ v_ArrVal_616 (select (select .cse1 .cse6) .cse7)) .cse5)))))))))) (not (= |c_ULTIMATE.start_main_~m~0#1.base| |c_ULTIMATE.start_main_~head~0#1.base|)) (= |c_ULTIMATE.start_main_~list~0#1.offset| 0) (= (select .cse14 |c_ULTIMATE.start_main_~head~0#1.offset|) 1) (= (select .cse15 12) 0) (= |c_ULTIMATE.start_main_~head~0#1.offset| 0) (<= (select .cse16 0) 1) (= (select .cse15 .cse12) |c_ULTIMATE.start_main_~head~0#1.offset|) (= |c_ULTIMATE.start_main_~list~0#1.base| (select .cse17 12)) (= (select .cse0 12) 0) .cse18 (= |c_ULTIMATE.start_main_~m~0#1.base| (select .cse13 4)) (exists ((v_DerPreprocessor_5 (Array Int Int)) (v_DerPreprocessor_4 (Array Int Int))) (let ((.cse20 (select v_DerPreprocessor_5 0))) (and (= .cse19 (select (store (store (store (store |c_#memory_int| |c_ULTIMATE.start_main_~m~0#1.base| v_DerPreprocessor_4) |c_ULTIMATE.start_main_~head~0#1.base| v_DerPreprocessor_5) |c_ULTIMATE.start_main_~m~0#1.base| v_DerPreprocessor_4) |c_ULTIMATE.start_main_~head~0#1.base| v_DerPreprocessor_5) |c_ULTIMATE.start_main_~m~0#1.base|)) (<= .cse20 1) (= (select v_DerPreprocessor_5 4) (select .cse14 4)) (= (select .cse14 0) .cse20) (= (select .cse14 12) (select v_DerPreprocessor_5 12))))) (= 0 (select .cse15 4)) (= |c_ULTIMATE.start_main_~head~0#1.base| (select .cse13 12)) (= |c_ULTIMATE.start_main_~m~0#1.base| (select .cse17 4)) (not (= |c_ULTIMATE.start_main_~m~0#1.base| |c_ULTIMATE.start_main_~list~0#1.base|)) (or .cse21 (not (= |c_ULTIMATE.start_main_~m~0#1.base| .cse22))) (= |c_ULTIMATE.start_main_~m~0#1.offset| 0) (or .cse21 .cse18) (or (forall ((v_ArrVal_616 Int)) (let ((.cse24 (select |c_#memory_int| .cse22)) (.cse25 (select .cse0 .cse26))) (or (< (+ v_ArrVal_616 .cse23) (select .cse24 .cse25)) (<= 91 (select (select (store |c_#memory_int| .cse22 (store .cse24 .cse25 v_ArrVal_616)) |c_ULTIMATE.start_main_~m~0#1.base|) |c_ULTIMATE.start_main_~m~0#1.offset|))))) (<= |c_ULTIMATE.start_main_#t~mem9#1| 100)) (= (select .cse13 .cse12) |c_ULTIMATE.start_main_~head~0#1.base|) (exists ((v_arrayElimCell_72 Int)) (let ((.cse27 (select (select |c_#memory_int| v_arrayElimCell_72) 0))) (and (<= .cse27 1) (<= 101 (+ (select .cse19 0) .cse27))))))))))
(assert (not (let ((.cse2 (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~list~0#1.base|)) (.cse3 (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~list~0#1.base|))) (and (exists ((v_DerPreprocessor_5 (Array Int Int)) (v_DerPreprocessor_4 (Array Int Int))) (let ((.cse0 (select v_DerPreprocessor_5 0)) (.cse1 (select |c_#memory_int| |c_ULTIMATE.start_main_~list~0#1.base|))) (and (<= .cse0 1) (= (select v_DerPreprocessor_5 12) (select .cse1 12)) (= (select .cse1 4) (select v_DerPreprocessor_5 4)) (= (select |c_#memory_int| |c_ULTIMATE.start_main_~m~0#1.base|) (select (store (store (store (store |c_#memory_int| |c_ULTIMATE.start_main_~m~0#1.base| v_DerPreprocessor_4) |c_ULTIMATE.start_main_~list~0#1.base| v_DerPreprocessor_5) |c_ULTIMATE.start_main_~m~0#1.base| v_DerPreprocessor_4) |c_ULTIMATE.start_main_~list~0#1.base| v_DerPreprocessor_5) |c_ULTIMATE.start_main_~m~0#1.base|)) (= .cse0 (select .cse1 0))))) (= (select .cse2 4) 0) (= |c_ULTIMATE.start_main_~list~0#1.offset| 0) (= |c_ULTIMATE.start_main_~list~0#1.base| (select .cse3 12)) (= (select .cse2 12) 0) (= |c_ULTIMATE.start_main_~m~0#1.base| (select .cse3 4)) (not (= |c_ULTIMATE.start_main_~m~0#1.base| |c_ULTIMATE.start_main_~list~0#1.base|)) (= |c_ULTIMATE.start_main_~m~0#1.offset| 0)))))
(check-sat)
(exit)
