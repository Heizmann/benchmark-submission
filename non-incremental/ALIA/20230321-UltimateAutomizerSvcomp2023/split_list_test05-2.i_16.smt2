(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |c_append_#in~head.base| () Int)
(declare-fun |c_append_#in~head.offset| () Int)
(declare-fun c_append_~head.base () Int)
(declare-fun c_append_~head.offset () Int)
(declare-fun c_append_~node~0.base () Int)
(declare-fun c_append_~node~0.offset () Int)
(assert (or (let ((.cse1 (select |c_#memory_$Pointer$.offset| c_append_~head.base)) (.cse0 (+ c_append_~head.offset 8))) (and (forall ((v_ArrVal_4952 Int) (v_ArrVal_4958 (Array Int Int))) (= (select (select (store (store |c_#memory_$Pointer$.base| c_append_~head.base (store (select |c_#memory_$Pointer$.base| c_append_~head.base) .cse0 v_ArrVal_4952)) c_append_~node~0.base v_ArrVal_4958) |c_append_#in~head.base|) |c_append_#in~head.offset|) c_append_~node~0.base)) (forall ((v_ArrVal_4953 Int) (v_ArrVal_4959 (Array Int Int))) (<= 0 (+ 9 (select (select (store (store |c_#memory_$Pointer$.offset| c_append_~head.base (store .cse1 .cse0 v_ArrVal_4953)) c_append_~node~0.base v_ArrVal_4959) |c_append_#in~head.base|) |c_append_#in~head.offset|)))) (forall ((v_ArrVal_4953 Int) (v_prenex_6 (Array Int Int))) (< (select (select (store (store |c_#memory_$Pointer$.offset| c_append_~head.base (store .cse1 .cse0 v_ArrVal_4953)) c_append_~node~0.base v_prenex_6) |c_append_#in~head.base|) |c_append_#in~head.offset|) (+ c_append_~node~0.offset 1))))) (and (= (select |c_old(#valid)| |c_append_#in~head.base|) 0) (<= 0 |c_append_#in~head.offset|))))
(assert (not (or (and (= (select |c_old(#valid)| |c_append_#in~head.base|) 0) (<= 0 |c_append_#in~head.offset|)) (let ((.cse0 (select (select |c_#memory_$Pointer$.offset| |c_append_#in~head.base|) |c_append_#in~head.offset|))) (and (<= (+ .cse0 17) (select |c_#length| (select (select |c_#memory_$Pointer$.base| |c_append_#in~head.base|) |c_append_#in~head.offset|))) (<= 0 (+ .cse0 9)))))))
(check-sat)
(exit)
