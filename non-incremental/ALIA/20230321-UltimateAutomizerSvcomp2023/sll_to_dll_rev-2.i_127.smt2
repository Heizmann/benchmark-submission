(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#memory_int)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_$Pointer$.base)| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_$Pointer$.offset)| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_chain_node_#in~ppnode#1.base| () Int)
(declare-fun |c_chain_node_#in~ppnode#1.offset| () Int)
(declare-fun |c_chain_node_~ppnode#1.base| () Int)
(declare-fun |c_chain_node_~ppnode#1.offset| () Int)
(declare-fun |c_chain_node_alloc_node_#res#1.base| () Int)
(declare-fun |c_chain_node_alloc_node_~ptr~0#1.base| () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(declare-fun |c_#memory_$Pointer$.base_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_$Pointer$.offset_Hier| () (Array Int (Array Int Int)))
(assert (and (= |c_old(#memory_$Pointer$.base)| |c_#memory_$Pointer$.base_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_#valid_Hier| |c_old(#valid)|) (= |c_old(#memory_int)| |c_#memory_int_Hier|) (= |c_#memory_$Pointer$.offset_Hier| |c_old(#memory_$Pointer$.offset)|)))
(declare-fun |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| () Int)
(declare-fun |c_ULTIMATE.start_create_sll_~#list~0#1.offset_Hier| () Int)
(assert (and (= |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| |c_chain_node_#in~ppnode#1.base|) (= |c_chain_node_#in~ppnode#1.offset| |c_ULTIMATE.start_create_sll_~#list~0#1.offset_Hier|)))
(assert (and (exists ((v_ArrVal_967 (Array Int Int)) (|chain_node_alloc_node_#res#1.base| Int)) (and (= (let ((.cse0 (store |c_old(#memory_$Pointer$.base)| |chain_node_alloc_node_#res#1.base| (store v_ArrVal_967 0 (select (select (store |c_old(#memory_$Pointer$.base)| |chain_node_alloc_node_#res#1.base| v_ArrVal_967) |c_chain_node_#in~ppnode#1.base|) |c_chain_node_#in~ppnode#1.offset|))))) (store .cse0 |c_chain_node_#in~ppnode#1.base| (store (select .cse0 |c_chain_node_#in~ppnode#1.base|) |c_chain_node_#in~ppnode#1.offset| |chain_node_alloc_node_#res#1.base|))) |c_#memory_$Pointer$.base|) (< |chain_node_alloc_node_#res#1.base| |c_#StackHeapBarrier|) (not (= |chain_node_alloc_node_#res#1.base| 0)) (= (select |c_#valid| |chain_node_alloc_node_#res#1.base|) 1))) (let ((.cse1 (select (select |c_#memory_$Pointer$.base| |c_chain_node_#in~ppnode#1.base|) |c_chain_node_#in~ppnode#1.offset|))) (or (exists ((v_DerPreprocessor_9 (Array Int Int)) (v_DerPreprocessor_8 (Array Int Int))) (and (= (select v_DerPreprocessor_9 |c_chain_node_#in~ppnode#1.offset|) .cse1) (= (select (store (store (store (store |c_#memory_$Pointer$.base| .cse1 v_DerPreprocessor_8) |c_chain_node_#in~ppnode#1.base| v_DerPreprocessor_9) .cse1 v_DerPreprocessor_8) |c_chain_node_#in~ppnode#1.base| v_DerPreprocessor_9) .cse1) (select |c_#memory_$Pointer$.base| .cse1)))) (= .cse1 |c_chain_node_#in~ppnode#1.base|))) (exists ((v_ArrVal_986 (Array Int Int)) (|chain_node_~node~0#1.base| Int) (v_ArrVal_982 (Array Int Int)) (v_ArrVal_983 (Array Int Int))) (and (= |c_#memory_$Pointer$.offset| (let ((.cse2 (store |c_old(#memory_$Pointer$.offset)| |chain_node_~node~0#1.base| (store v_ArrVal_982 0 (select (select (store |c_old(#memory_$Pointer$.offset)| |chain_node_~node~0#1.base| v_ArrVal_982) |c_chain_node_#in~ppnode#1.base|) |c_chain_node_#in~ppnode#1.offset|))))) (store .cse2 |c_chain_node_#in~ppnode#1.base| (store (select .cse2 |c_chain_node_#in~ppnode#1.base|) |c_chain_node_#in~ppnode#1.offset| 0)))) (= |c_#memory_$Pointer$.base| (store (store |c_old(#memory_$Pointer$.base)| |chain_node_~node~0#1.base| (store v_ArrVal_983 0 (select (select (store |c_old(#memory_$Pointer$.base)| |chain_node_~node~0#1.base| v_ArrVal_983) |c_chain_node_#in~ppnode#1.base|) |c_chain_node_#in~ppnode#1.offset|))) |c_chain_node_#in~ppnode#1.base| v_ArrVal_986)) (< |chain_node_~node~0#1.base| |c_#StackHeapBarrier|) (= (select |c_old(#valid)| |chain_node_~node~0#1.base|) 0))) (not (= 0 |c_chain_node_alloc_node_#res#1.base|)) (= |c_chain_node_~ppnode#1.base| |c_chain_node_#in~ppnode#1.base|) (= |c_chain_node_#in~ppnode#1.offset| |c_chain_node_~ppnode#1.offset|) (not (= |c_chain_node_alloc_node_~ptr~0#1.base| 0))))
(declare-fun |c_ULTIMATE.start_main_~#p1~0#1.offset_Hier| () Int)
(declare-fun |c_ULTIMATE.start_create_sll_~pp1#1.base_Hier| () Int)
(declare-fun |c_ULTIMATE.start_create_sll_~pp2#1.base_Hier| () Int)
(declare-fun |c_ULTIMATE.start_main_~#p1~0#1.base_Hier| () Int)
(declare-fun |c_ULTIMATE.start_create_sll_~pp1#1.offset_Hier| () Int)
(declare-fun |c_ULTIMATE.start_main_~#p2~0#1.base_Hier| () Int)
(assert (let ((.cse0 (select (select |c_#memory_$Pointer$.base_Hier| |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier|) 0))) (and (= (select (select |c_#memory_$Pointer$.offset_Hier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|) |c_ULTIMATE.start_main_~#p1~0#1.offset_Hier|) 0) (= (select |c_#valid_Hier| .cse0) 1) (= |c_ULTIMATE.start_create_sll_~#list~0#1.offset_Hier| 0) (not (= |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|)) (not (= (select (select |c_#memory_$Pointer$.base_Hier| (select (select |c_#memory_$Pointer$.base_Hier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|) |c_ULTIMATE.start_main_~#p1~0#1.offset_Hier|)) 0) 0)) (= |c_ULTIMATE.start_main_~#p1~0#1.offset_Hier| |c_ULTIMATE.start_create_sll_~pp1#1.offset_Hier|) (not (= (select (select |c_#memory_$Pointer$.base_Hier| .cse0) 0) 0)) (not (= .cse0 0)) (< |c_#StackHeapBarrier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|) (= |c_ULTIMATE.start_create_sll_~pp1#1.base_Hier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|) (= |c_ULTIMATE.start_main_~#p2~0#1.base_Hier| |c_ULTIMATE.start_create_sll_~pp2#1.base_Hier|) (not (= |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| |c_ULTIMATE.start_main_~#p2~0#1.base_Hier|)) (< |c_#StackHeapBarrier| |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier|) (< .cse0 |c_#StackHeapBarrier|) (= (select (select |c_#memory_$Pointer$.offset_Hier| |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier|) 0) 0) (= |c_ULTIMATE.start_create_sll_~pp1#1.offset_Hier| 0))))
(assert (not (and (let ((.cse0 (select (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier|) 0))) (or (and (exists ((v_DerPreprocessor_9 (Array Int Int)) (v_DerPreprocessor_8 (Array Int Int))) (and (= .cse0 (select v_DerPreprocessor_9 0)) (= (select (store (store (store (store |c_#memory_$Pointer$.base| .cse0 v_DerPreprocessor_8) |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| v_DerPreprocessor_9) .cse0 v_DerPreprocessor_8) |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| v_DerPreprocessor_9) .cse0) (select |c_#memory_$Pointer$.base| .cse0)))) (not (= .cse0 0))) (and (= |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| .cse0) (not (= |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| 0))))) (= |c_ULTIMATE.start_main_~#p1~0#1.offset_Hier| 0) (not (= |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| |c_ULTIMATE.start_create_sll_~pp2#1.base_Hier|)) (= |c_ULTIMATE.start_create_sll_~#list~0#1.offset_Hier| 0) (not (= |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|)) (< |c_#StackHeapBarrier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|) (= |c_ULTIMATE.start_create_sll_~pp1#1.base_Hier| |c_ULTIMATE.start_main_~#p1~0#1.base_Hier|) (< |c_#StackHeapBarrier| |c_ULTIMATE.start_create_sll_~#list~0#1.base_Hier|) (= |c_ULTIMATE.start_create_sll_~pp1#1.offset_Hier| 0))))
(check-sat)
(exit)
