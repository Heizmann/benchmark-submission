(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_ULTIMATE.start_main_~i~1#1| () Int)
(declare-fun |c_ULTIMATE.start_main_~#x~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_main_~#x~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_main_~temp~0#1| () Int)
(assert (let ((.cse0 (select |c_#memory_int| |c_ULTIMATE.start_main_~#x~0#1.base|)) (.cse5 (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 8))) (and (<= (+ (select .cse0 4) 1) (select .cse0 0)) (forall ((v_ArrVal_124 Int) (v_ArrVal_130 Int) (v_ArrVal_129 Int) (v_ArrVal_127 Int)) (let ((.cse6 (* |c_ULTIMATE.start_main_~i~1#1| 4))) (let ((.cse2 (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 8 .cse6))) (let ((.cse4 (store (store (store (store .cse0 (+ |c_ULTIMATE.start_main_~#x~0#1.offset| .cse6) v_ArrVal_124) (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 4 .cse6) v_ArrVal_127) .cse2 v_ArrVal_129) (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 12 .cse6) v_ArrVal_130))) (let ((.cse1 (select .cse4 (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 12))) (.cse3 (select .cse4 .cse5))) (or (< |c_ULTIMATE.start_main_~temp~0#1| (+ .cse1 1)) (< v_ArrVal_127 (select .cse0 .cse2)) (< .cse1 (+ .cse3 1)) (< .cse3 (+ (select .cse4 (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 4)) 1)))))))) (< (select .cse0 |c_ULTIMATE.start_main_~#x~0#1.offset|) (+ (select .cse0 .cse5) 3)) (= |c_ULTIMATE.start_main_~#x~0#1.offset| 0))))
(assert (not (and (forall ((v_ArrVal_130 Int) (v_ArrVal_129 Int) (v_ArrVal_127 Int)) (let ((.cse5 (* |c_ULTIMATE.start_main_~i~1#1| 4))) (let ((.cse2 (select |c_#memory_int| |c_ULTIMATE.start_main_~#x~0#1.base|)) (.cse3 (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 8 .cse5))) (let ((.cse4 (store (store (store .cse2 (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 4 .cse5) v_ArrVal_127) .cse3 v_ArrVal_129) (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 12 .cse5) v_ArrVal_130))) (let ((.cse0 (select .cse4 (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 12))) (.cse1 (select .cse4 (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 8)))) (or (< .cse0 (+ 1 .cse1)) (< v_ArrVal_127 (select .cse2 .cse3)) (< |c_ULTIMATE.start_main_~temp~0#1| (+ .cse0 1)) (< .cse1 (+ (select .cse4 (+ |c_ULTIMATE.start_main_~#x~0#1.offset| 4)) 1)))))))) (= |c_ULTIMATE.start_main_~#x~0#1.offset| 0))))
(check-sat)
(exit)
