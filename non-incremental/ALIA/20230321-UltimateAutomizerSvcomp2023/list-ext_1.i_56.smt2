(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.base_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.offset_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int_primed| () (Array Int (Array Int Int)))
(declare-fun |c_ULTIMATE.start_main_~a~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_main_~a~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_main_~t~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_main_~t~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_main_~p~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_main_~p~0#1.base_primed| () Int)
(declare-fun |c_ULTIMATE.start_main_~p~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_main_~p~0#1.offset_primed| () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(assert (let ((.cse0 (+ |c_ULTIMATE.start_main_~p~0#1.offset| 4))) (and (= |c_#memory_$Pointer$.offset_primed| (store |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~p~0#1.base| (store (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~p~0#1.base|) .cse0 |c_ULTIMATE.start_main_~t~0#1.offset|))) (= (select (select |c_#memory_$Pointer$.base_primed| |c_ULTIMATE.start_main_~p~0#1.base|) .cse0) |c_ULTIMATE.start_main_~p~0#1.base_primed|) (= |c_#memory_$Pointer$.base_primed| (store |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~p~0#1.base| (store (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~p~0#1.base|) .cse0 |c_ULTIMATE.start_main_~t~0#1.base|))) (= (select (select |c_#memory_$Pointer$.offset_primed| |c_ULTIMATE.start_main_~p~0#1.base|) .cse0) |c_ULTIMATE.start_main_~p~0#1.offset_primed|) (= |c_#memory_int_primed| (store |c_#memory_int| |c_ULTIMATE.start_main_~p~0#1.base| (store (select |c_#memory_int| |c_ULTIMATE.start_main_~p~0#1.base|) .cse0 (select (select |c_#memory_int_primed| |c_ULTIMATE.start_main_~p~0#1.base|) .cse0)))))))
(assert (let ((.cse0 (select |c_#memory_int| |c_ULTIMATE.start_main_~p~0#1.base|)) (.cse3 (select (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~a~0#1.base|) 4))) (and (forall ((v_ArrVal_533 Int) (v_ArrVal_535 (Array Int Int)) (v_ArrVal_537 (Array Int Int)) (v_ArrVal_538 (Array Int Int)) (v_ArrVal_530 (Array Int Int))) (= (let ((.cse2 (+ |c_ULTIMATE.start_main_~a~0#1.offset| 4))) (select (let ((.cse1 (+ |c_ULTIMATE.start_main_~p~0#1.offset| 4))) (select (store (store |c_#memory_int| |c_ULTIMATE.start_main_~p~0#1.base| (store .cse0 .cse1 v_ArrVal_533)) |c_ULTIMATE.start_main_~t~0#1.base| v_ArrVal_538) (select (select (store (store |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~p~0#1.base| (store (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~p~0#1.base|) .cse1 |c_ULTIMATE.start_main_~t~0#1.base|)) |c_ULTIMATE.start_main_~t~0#1.base| v_ArrVal_537) |c_ULTIMATE.start_main_~a~0#1.base|) .cse2))) (select (select (store (store |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~p~0#1.base| v_ArrVal_530) |c_ULTIMATE.start_main_~t~0#1.base| v_ArrVal_535) |c_ULTIMATE.start_main_~a~0#1.base|) .cse2))) 2)) (= (select |c_#valid| |c_ULTIMATE.start_main_~a~0#1.base|) 1) (not (= .cse3 |c_ULTIMATE.start_main_~a~0#1.base|)) (= (select (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~a~0#1.base|) 4) 0) (= .cse3 |c_ULTIMATE.start_main_~p~0#1.base|) (= 2 (select .cse0 0)) (= |c_ULTIMATE.start_main_~a~0#1.offset| 0) (= |c_ULTIMATE.start_main_~p~0#1.offset| 0) (= (select |c_#valid| .cse3) 1))))
(assert (not (let ((.cse2 (+ |c_ULTIMATE.start_main_~p~0#1.offset_primed| 4)) (.cse1 (+ |c_ULTIMATE.start_main_~a~0#1.offset| 4))) (and (forall ((v_arrayElimArr_10 (Array Int Int))) (let ((.cse0 (select v_arrayElimArr_10 .cse2))) (or (forall ((v_ArrVal_537 (Array Int Int))) (= (select (select (store (store |c_#memory_$Pointer$.base_primed| |c_ULTIMATE.start_main_~p~0#1.base_primed| v_arrayElimArr_10) .cse0 v_ArrVal_537) |c_ULTIMATE.start_main_~a~0#1.base|) .cse1) |c_ULTIMATE.start_main_~p~0#1.base_primed|)) (not (= (select |c_#valid| .cse0) 0))))) (forall ((v_arrayElimArr_10 (Array Int Int))) (let ((.cse3 (select v_arrayElimArr_10 .cse2))) (or (forall ((v_ArrVal_537 (Array Int Int))) (not (= (select (select (store (store |c_#memory_$Pointer$.base_primed| |c_ULTIMATE.start_main_~p~0#1.base_primed| v_arrayElimArr_10) .cse3 v_ArrVal_537) |c_ULTIMATE.start_main_~a~0#1.base|) .cse1) .cse3))) (not (= (select |c_#valid| .cse3) 0))))) (forall ((v_arrayElimCell_72 Int) (v_ArrVal_535 (Array Int Int)) (v_ArrVal_530 (Array Int Int))) (or (not (= (select |c_#valid| v_arrayElimCell_72) 0)) (= (select (select (store (store |c_#memory_$Pointer$.offset_primed| |c_ULTIMATE.start_main_~p~0#1.base_primed| v_ArrVal_530) v_arrayElimCell_72 v_ArrVal_535) |c_ULTIMATE.start_main_~a~0#1.base|) .cse1) |c_ULTIMATE.start_main_~p~0#1.offset_primed|)))))))
(check-sat)
(exit)
