(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_ULTIMATE.start_main_~data~0#1| () Int)
(declare-fun |c_ULTIMATE.start_main_~#s~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_main_~#s~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_main_~ptr~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_main_~ptr~0#1.offset| () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(assert (let ((.cse1 (select (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|)) (.cse2 (+ (select (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|) 4))) (let ((.cse0 (select (select |c_#memory_$Pointer$.base| .cse1) .cse2))) (and (not (= .cse0 .cse1)) (= (select |c_#valid| |c_ULTIMATE.start_main_~#s~0#1.base|) 1) (< |c_#StackHeapBarrier| |c_ULTIMATE.start_main_~#s~0#1.base|) (= (select (select |c_#memory_$Pointer$.offset| .cse1) .cse2) 0) (= (select (select |c_#memory_$Pointer$.base| .cse0) 4) 0) (not (= .cse0 0)) (= (select |c_#valid| .cse0) 1) (not (= .cse1 |c_ULTIMATE.start_main_~#s~0#1.base|)) (= |c_ULTIMATE.start_main_~data~0#1| 1) (= (select (select |c_#memory_int| .cse0) 0) 1) (= (select |c_#valid| .cse1) 1) (= (select (select |c_#memory_$Pointer$.offset| .cse0) 4) 0) (not (= 0 .cse1)) (< .cse0 |c_#StackHeapBarrier|)))))
(assert (not (and (or (exists ((|ULTIMATE.start_main_~#s~0#1.offset| Int) (|ULTIMATE.start_main_~#s~0#1.base| Int)) (let ((.cse4 (select (select |c_#memory_$Pointer$.offset| |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset|))) (let ((.cse1 (select (select |c_#memory_$Pointer$.base| |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset|)) (.cse2 (+ .cse4 4))) (let ((.cse3 (select (select |c_#memory_$Pointer$.base| .cse1) .cse2))) (let ((.cse0 (select (select |c_#memory_$Pointer$.base| .cse3) 4))) (and (not (= .cse0 0)) (= (select (select |c_#memory_$Pointer$.offset| .cse1) .cse2) 0) (<= (+ 2 .cse0) |ULTIMATE.start_main_~#s~0#1.base|) (not (= .cse1 .cse3)) (not (= .cse1 |ULTIMATE.start_main_~#s~0#1.base|)) (not (= .cse3 .cse0)) (= .cse4 |c_ULTIMATE.start_main_~ptr~0#1.offset|) (not (= .cse1 .cse0)) (= (select (select |c_#memory_int| .cse3) 0) 1) (= .cse1 |c_ULTIMATE.start_main_~ptr~0#1.base|) (not (= .cse3 0)) (<= (+ 2 .cse3) |ULTIMATE.start_main_~#s~0#1.base|) (not (= .cse1 0)))))))) (exists ((|ULTIMATE.start_main_~#s~0#1.offset| Int) (|ULTIMATE.start_main_~#s~0#1.base| Int)) (let ((.cse8 (select (select |c_#memory_$Pointer$.offset| |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset|))) (let ((.cse6 (select (select |c_#memory_$Pointer$.base| |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset|)) (.cse7 (+ .cse8 4))) (let ((.cse5 (select (select |c_#memory_$Pointer$.base| .cse6) .cse7))) (and (= (select (select |c_#memory_$Pointer$.base| .cse5) 4) 0) (= (select (select |c_#memory_$Pointer$.offset| .cse6) .cse7) 0) (not (= .cse6 .cse5)) (not (= .cse6 |ULTIMATE.start_main_~#s~0#1.base|)) (= .cse8 |c_ULTIMATE.start_main_~ptr~0#1.offset|) (= (select (select |c_#memory_int| .cse5) 0) 1) (= .cse6 |c_ULTIMATE.start_main_~ptr~0#1.base|) (not (= .cse5 0)) (exists ((|ULTIMATE.start_sll_append_~last~0#1.base| Int) (v_arrayElimCell_114 Int)) (let ((.cse9 (select (select |c_#memory_$Pointer$.base| |ULTIMATE.start_sll_append_~last~0#1.base|) (+ v_arrayElimCell_114 4)))) (and (not (= .cse9 0)) (<= (+ .cse9 2) |ULTIMATE.start_main_~#s~0#1.base|) (not (= .cse9 .cse5)) (not (= .cse6 .cse9))))) (<= (+ 2 .cse5) |ULTIMATE.start_main_~#s~0#1.base|) (not (= .cse6 0)) (= 0 (select (select |c_#memory_$Pointer$.offset| .cse5) 4))))))) (exists ((|ULTIMATE.start_main_~#s~0#1.offset| Int) (|ULTIMATE.start_main_~#s~0#1.base| Int)) (let ((.cse15 (select (select |c_#memory_$Pointer$.offset| |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset|))) (let ((.cse11 (select (select |c_#memory_$Pointer$.base| |ULTIMATE.start_main_~#s~0#1.base|) |ULTIMATE.start_main_~#s~0#1.offset|)) (.cse12 (+ .cse15 4))) (let ((.cse13 (select (select |c_#memory_$Pointer$.base| .cse11) .cse12))) (let ((.cse10 (select |c_#memory_$Pointer$.base| .cse13))) (let ((.cse14 (select .cse10 0))) (and (= (select .cse10 4) 0) (= (select (select |c_#memory_$Pointer$.offset| .cse11) .cse12) 0) (not (= .cse11 .cse13)) (not (= .cse11 |ULTIMATE.start_main_~#s~0#1.base|)) (not (= .cse13 .cse14)) (= .cse15 |c_ULTIMATE.start_main_~ptr~0#1.offset|) (not (= .cse11 .cse14)) (<= (+ 2 .cse14) |ULTIMATE.start_main_~#s~0#1.base|) (not (= .cse14 0)) (= .cse11 |c_ULTIMATE.start_main_~ptr~0#1.base|) (not (= .cse13 0)) (<= (+ 2 .cse13) |ULTIMATE.start_main_~#s~0#1.base|) (not (= .cse11 0)) (= 0 (select (select |c_#memory_$Pointer$.offset| .cse13) 4)))))))))) (= |c_ULTIMATE.start_main_~data~0#1| 1))))
(check-sat)
(exit)
