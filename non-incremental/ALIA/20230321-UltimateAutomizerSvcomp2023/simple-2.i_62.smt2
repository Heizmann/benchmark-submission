(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(declare-fun |ULTIMATE.start_main_~a~0#1.offset| () Int)
(declare-fun |ULTIMATE.start_main_~a~0#1.base| () Int)
(declare-fun |ULTIMATE.start_main_~p~0#1.base| () Int)
(declare-fun |#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |ULTIMATE.start_main_~p~0#1.offset| () Int)
(declare-fun |#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |#valid| () (Array Int Int))
(assert (forall ((v_arrayElimArr_13 (Array Int Int))) (let ((.cse2 (+ |ULTIMATE.start_main_~p~0#1.offset| 4))) (let ((.cse0 (select v_arrayElimArr_13 .cse2)) (.cse1 (+ |ULTIMATE.start_main_~a~0#1.offset| 4))) (or (not (= (select |#valid| .cse0) 0)) (forall ((v_prenex_3 (Array Int Int))) (or (not (= (select (select (store (store |#memory_$Pointer$.base| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_13) .cse0 v_prenex_3) |ULTIMATE.start_main_~a~0#1.base|) .cse1) .cse0)) (not (= (select v_prenex_3 4) 0)))) (forall ((v_arrayElimArr_16 (Array Int Int)) (v_prenex_5 (Array Int Int))) (or (= (select (select (store (store |#memory_$Pointer$.offset| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_16) .cse0 v_prenex_5) |ULTIMATE.start_main_~a~0#1.base|) .cse1) 0) (not (= (select v_prenex_5 4) 0)) (not (= (select v_arrayElimArr_16 .cse2) 0)))))))))
(assert (forall ((v_arrayElimArr_13 (Array Int Int))) (let ((.cse1 (+ |ULTIMATE.start_main_~p~0#1.offset| 4))) (let ((.cse2 (select v_arrayElimArr_13 .cse1)) (.cse3 (+ |ULTIMATE.start_main_~a~0#1.offset| 4))) (or (forall ((v_arrayElimArr_16 (Array Int Int)) (v_prenex_5 (Array Int Int))) (let ((.cse0 (select (select (store (store |#memory_$Pointer$.offset| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_16) .cse2 v_prenex_5) |ULTIMATE.start_main_~a~0#1.base|) .cse3))) (or (= .cse0 0) (= .cse0 |ULTIMATE.start_main_~p~0#1.offset|) (not (= (select v_prenex_5 4) 0)) (not (= (select v_arrayElimArr_16 .cse1) 0))))) (not (= (select |#valid| .cse2) 0)) (forall ((v_prenex_3 (Array Int Int))) (or (not (= (select (select (store (store |#memory_$Pointer$.base| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_13) .cse2 v_prenex_3) |ULTIMATE.start_main_~a~0#1.base|) .cse3) |ULTIMATE.start_main_~p~0#1.base|)) (not (= (select v_prenex_3 4) 0)))))))))
(assert (forall ((v_arrayElimArr_13 (Array Int Int))) (let ((.cse0 (select v_arrayElimArr_13 (+ |ULTIMATE.start_main_~p~0#1.offset| 4)))) (or (not (= (select |#valid| .cse0) 0)) (forall ((v_arrayElimArr_11 (Array Int Int))) (let ((.cse1 (select (select (store (store |#memory_$Pointer$.base| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_13) .cse0 v_arrayElimArr_11) |ULTIMATE.start_main_~a~0#1.base|) (+ |ULTIMATE.start_main_~a~0#1.offset| 4)))) (or (= .cse1 0) (not (= .cse1 .cse0)) (not (= 0 (select v_arrayElimArr_11 4))))))))))
(assert (forall ((v_arrayElimArr_11 (Array Int Int)) (v_arrayElimArr_13 (Array Int Int))) (let ((.cse3 (+ |ULTIMATE.start_main_~p~0#1.offset| 4))) (let ((.cse1 (store |#memory_$Pointer$.base| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_13)) (.cse0 (select v_arrayElimArr_13 .cse3)) (.cse2 (+ |ULTIMATE.start_main_~a~0#1.offset| 4))) (or (not (= (select |#valid| .cse0) 0)) (forall ((v_prenex_3 (Array Int Int))) (or (= (select (select (store .cse1 .cse0 v_prenex_3) |ULTIMATE.start_main_~a~0#1.base|) .cse2) |ULTIMATE.start_main_~p~0#1.base|) (not (= (select v_prenex_3 4) 0)))) (= (select (select (store .cse1 .cse0 v_arrayElimArr_11) |ULTIMATE.start_main_~a~0#1.base|) .cse2) |ULTIMATE.start_main_~p~0#1.base|) (forall ((v_arrayElimArr_16 (Array Int Int)) (v_prenex_5 (Array Int Int))) (or (= (select (select (store (store |#memory_$Pointer$.offset| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_16) .cse0 v_prenex_5) |ULTIMATE.start_main_~a~0#1.base|) .cse2) 0) (not (= (select v_prenex_5 4) 0)) (not (= (select v_arrayElimArr_16 .cse3) 0)))))))))
(assert (forall ((v_arrayElimArr_13 (Array Int Int))) (let ((.cse3 (+ |ULTIMATE.start_main_~p~0#1.offset| 4))) (let ((.cse0 (select v_arrayElimArr_13 .cse3)) (.cse1 (+ |ULTIMATE.start_main_~a~0#1.offset| 4))) (or (not (= (select |#valid| .cse0) 0)) (forall ((v_arrayElimArr_11 (Array Int Int))) (or (= (select (select (store (store |#memory_$Pointer$.base| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_13) .cse0 v_arrayElimArr_11) |ULTIMATE.start_main_~a~0#1.base|) .cse1) 0) (not (= 0 (select v_arrayElimArr_11 4))))) (forall ((v_arrayElimArr_12 (Array Int Int)) (v_arrayElimArr_16 (Array Int Int)) (v_prenex_5 (Array Int Int))) (let ((.cse2 (store |#memory_$Pointer$.offset| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_16))) (or (= (select (select (store .cse2 .cse0 v_prenex_5) |ULTIMATE.start_main_~a~0#1.base|) .cse1) |ULTIMATE.start_main_~p~0#1.offset|) (= |ULTIMATE.start_main_~p~0#1.offset| (select (select (store .cse2 .cse0 v_arrayElimArr_12) |ULTIMATE.start_main_~a~0#1.base|) .cse1)) (not (= (select v_arrayElimArr_16 .cse3) 0)) (not (= (select v_arrayElimArr_12 4) 0))))))))))
(assert (forall ((v_arrayElimArr_11 (Array Int Int))) (or (forall ((v_arrayElimArr_13 (Array Int Int))) (let ((.cse1 (store |#memory_$Pointer$.base| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_13)) (.cse2 (select v_arrayElimArr_13 (+ |ULTIMATE.start_main_~p~0#1.offset| 4))) (.cse3 (+ |ULTIMATE.start_main_~a~0#1.offset| 4))) (let ((.cse0 (select (select (store .cse1 .cse2 v_arrayElimArr_11) |ULTIMATE.start_main_~a~0#1.base|) .cse3))) (or (= .cse0 0) (forall ((v_prenex_3 (Array Int Int))) (= (select (select (store .cse1 .cse2 v_prenex_3) |ULTIMATE.start_main_~a~0#1.base|) .cse3) |ULTIMATE.start_main_~p~0#1.base|)) (not (= (select |#valid| .cse2) 0)) (= .cse0 |ULTIMATE.start_main_~p~0#1.base|))))) (not (= 0 (select v_arrayElimArr_11 4))))))
(assert (not (forall ((v_arrayElimArr_11 (Array Int Int)) (v_arrayElimArr_13 (Array Int Int))) (let ((.cse3 (+ |ULTIMATE.start_main_~p~0#1.offset| 4))) (let ((.cse0 (select v_arrayElimArr_13 .cse3)) (.cse1 (+ |ULTIMATE.start_main_~a~0#1.offset| 4))) (or (not (= (select |#valid| .cse0) 0)) (= (select (select (store (store |#memory_$Pointer$.base| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_13) .cse0 v_arrayElimArr_11) |ULTIMATE.start_main_~a~0#1.base|) .cse1) |ULTIMATE.start_main_~p~0#1.base|) (forall ((v_arrayElimArr_16 (Array Int Int))) (or (forall ((v_prenex_5 (Array Int Int))) (let ((.cse2 (select (select (store (store |#memory_$Pointer$.offset| |ULTIMATE.start_main_~p~0#1.base| v_arrayElimArr_16) .cse0 v_prenex_5) |ULTIMATE.start_main_~a~0#1.base|) .cse1))) (or (= .cse2 0) (= .cse2 |ULTIMATE.start_main_~p~0#1.offset|) (not (= (select v_prenex_5 4) 0))))) (not (= (select v_arrayElimArr_16 .cse3) 0))))))))))
(check-sat)
(exit)
