(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(declare-fun ~__codecvt_result~0~__codecvt_ok () Int)
(declare-fun ~__codecvt_result~0~__codecvt_partial () Int)
(declare-fun ~__codecvt_result~0~__codecvt_error () Int)
(declare-fun ~__codecvt_result~0~__codecvt_noconv () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(assert (= ~__codecvt_result~0~__codecvt_ok 0))
(assert (= ~__codecvt_result~0~__codecvt_partial 1))
(assert (= 2 ~__codecvt_result~0~__codecvt_error))
(assert (= ~__codecvt_result~0~__codecvt_noconv 3))
(declare-fun |#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |list_add_#in~new#1.base| () Int)
(declare-fun |list_add_#in~head#1.offset| () Int)
(declare-fun |~#gl_list~0.offset| () Int)
(declare-fun |#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_$Pointer$.base)| () (Array Int (Array Int Int)))
(declare-fun |list_add_#in~head#1.base| () Int)
(declare-fun |~#gl_list~0.base| () Int)
(assert (= |~#gl_list~0.base| 3))
(assert (exists ((v_ArrVal_993 Int) (v_ArrVal_998 (Array Int Int)) (v_ArrVal_1004 (Array Int Int)) (|list_add___list_add_~next#1.offset| Int)) (= |#memory_$Pointer$.base| (let ((.cse0 (let ((.cse1 (select (select |old(#memory_$Pointer$.base)| |list_add_#in~head#1.base|) |list_add_#in~head#1.offset|))) (store |old(#memory_$Pointer$.base)| .cse1 (store (select |old(#memory_$Pointer$.base)| .cse1) (+ |list_add___list_add_~next#1.offset| 8) |list_add_#in~new#1.base|))))) (store (store .cse0 |list_add_#in~new#1.base| v_ArrVal_1004) |list_add_#in~head#1.base| (store (select (store .cse0 |list_add_#in~new#1.base| v_ArrVal_998) |list_add_#in~head#1.base|) |list_add_#in~head#1.offset| v_ArrVal_993))))))
(assert (= |~#gl_list~0.offset| 0))
(assert (not (= |list_add_#in~head#1.base| |list_add_#in~new#1.base|)))
(assert (= (select (select |old(#memory_$Pointer$.base)| |list_add_#in~head#1.base|) |list_add_#in~head#1.offset|) |list_add_#in~head#1.base|))
(assert (not (exists ((v_DerPreprocessor_1 (Array Int Int)) (v_DerPreprocessor_3 (Array Int Int)) (v_DerPreprocessor_2 (Array Int Int)) (v_DerPreprocessor_7 (Array Int Int)) (v_DerPreprocessor_9 (Array Int Int)) (v_DerPreprocessor_8 (Array Int Int))) (let ((.cse2 (select (select |old(#memory_$Pointer$.base)| |list_add_#in~head#1.base|) |list_add_#in~head#1.offset|))) (let ((.cse4 (store (store (store (store (store (store |#memory_$Pointer$.offset| .cse2 v_DerPreprocessor_7) |list_add_#in~new#1.base| v_DerPreprocessor_8) |list_add_#in~head#1.base| v_DerPreprocessor_9) .cse2 v_DerPreprocessor_7) |list_add_#in~new#1.base| v_DerPreprocessor_8) |list_add_#in~head#1.base| v_DerPreprocessor_9))) (let ((.cse1 (store (store (store (store (store (store |#memory_$Pointer$.offset| .cse2 v_DerPreprocessor_1) |list_add_#in~new#1.base| v_DerPreprocessor_2) |list_add_#in~head#1.base| v_DerPreprocessor_3) .cse2 v_DerPreprocessor_1) |list_add_#in~new#1.base| v_DerPreprocessor_2) |list_add_#in~head#1.base| v_DerPreprocessor_3)) (.cse0 (select (select |#memory_$Pointer$.offset| |list_add_#in~head#1.base|) |list_add_#in~head#1.offset|)) (.cse3 (select .cse4 |list_add_#in~new#1.base|))) (and (= .cse0 (select v_DerPreprocessor_9 |list_add_#in~head#1.offset|)) (= (select .cse1 .cse2) v_DerPreprocessor_1) (= (select .cse1 |list_add_#in~new#1.base|) .cse3) (= .cse0 (select v_DerPreprocessor_3 |list_add_#in~head#1.offset|)) (= (select .cse4 .cse2) v_DerPreprocessor_7) (= (select |#memory_$Pointer$.offset| |list_add_#in~new#1.base|) .cse3))))))))
(check-sat)
(exit)
