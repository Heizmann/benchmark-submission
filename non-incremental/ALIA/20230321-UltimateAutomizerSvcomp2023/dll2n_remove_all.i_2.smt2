(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(declare-fun |c_#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |c_ULTIMATE.start_main_~#s~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_main_~#s~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~new_head~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~new_head~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~head~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~head~0#1.offset| () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(assert (let ((.cse10 (+ |c_ULTIMATE.start_dll_create_~head~0#1.offset| 12))) (let ((.cse2 (store |c_#memory_$Pointer$.base| |c_ULTIMATE.start_dll_create_~head~0#1.base| (store (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_dll_create_~head~0#1.base|) .cse10 |c_ULTIMATE.start_dll_create_~new_head~0#1.base|)))) (let ((.cse7 (select (select .cse2 |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|))) (or (let ((.cse4 (select .cse2 .cse7)) (.cse9 (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_dll_create_~head~0#1.base|))) (and (forall ((v_ArrVal_414 Int)) (let ((.cse6 (store |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_dll_create_~head~0#1.base| (store .cse9 .cse10 v_ArrVal_414)))) (let ((.cse8 (select (select .cse6 |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|))) (or (forall ((v_ArrVal_418 Int)) (= (let ((.cse5 (+ .cse8 4))) (let ((.cse3 (select (select .cse6 .cse7) .cse5))) (select (let ((.cse1 (select .cse4 .cse5))) (select (let ((.cse0 (store .cse2 .cse1 (store (select .cse2 .cse1) (+ 12 .cse3) v_ArrVal_418)))) (store .cse0 |c_ULTIMATE.start_main_~#s~0#1.base| (store (select .cse0 |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset| .cse1))) .cse1)) (+ 4 .cse3)))) 0)) (not (= .cse8 |c_ULTIMATE.start_dll_create_~new_head~0#1.offset|)))))) (forall ((v_ArrVal_414 Int)) (let ((.cse13 (store |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_dll_create_~head~0#1.base| (store .cse9 .cse10 v_ArrVal_414)))) (let ((.cse16 (select (select .cse13 |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|))) (or (forall ((v_ArrVal_419 Int)) (= (let ((.cse15 (+ .cse16 4))) (let ((.cse12 (select (select .cse13 .cse7) .cse15))) (select (let ((.cse14 (select .cse4 .cse15))) (select (let ((.cse11 (store .cse13 .cse14 (store (select .cse13 .cse14) (+ 12 .cse12) v_ArrVal_419)))) (store .cse11 |c_ULTIMATE.start_main_~#s~0#1.base| (store (select .cse11 |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset| .cse12))) .cse14)) (+ 4 .cse12)))) 0)) (not (= .cse16 |c_ULTIMATE.start_dll_create_~new_head~0#1.offset|)))))))) (not (= |c_ULTIMATE.start_dll_create_~new_head~0#1.base| .cse7)))))))
(assert (not (let ((.cse6 (select (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|)) (.cse8 (select (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|))) (or (let ((.cse7 (+ .cse8 4))) (let ((.cse5 (select (select |c_#memory_$Pointer$.offset| .cse6) .cse7))) (let ((.cse2 (+ 12 .cse5)) (.cse1 (select (select |c_#memory_$Pointer$.base| .cse6) .cse7)) (.cse3 (+ 4 .cse5))) (and (forall ((v_ArrVal_418 Int)) (= (select (select (let ((.cse0 (store |c_#memory_$Pointer$.base| .cse1 (store (select |c_#memory_$Pointer$.base| .cse1) .cse2 v_ArrVal_418)))) (store .cse0 |c_ULTIMATE.start_main_~#s~0#1.base| (store (select .cse0 |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset| .cse1))) .cse1) .cse3) 0)) (forall ((v_ArrVal_419 Int)) (= (select (select (let ((.cse4 (store |c_#memory_$Pointer$.offset| .cse1 (store (select |c_#memory_$Pointer$.offset| .cse1) .cse2 v_ArrVal_419)))) (store .cse4 |c_ULTIMATE.start_main_~#s~0#1.base| (store (select .cse4 |c_ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset| .cse5))) .cse1) .cse3) 0)))))) (not (= |c_ULTIMATE.start_dll_create_~new_head~0#1.base| .cse6)) (not (= |c_ULTIMATE.start_dll_create_~new_head~0#1.offset| .cse8))))))
(check-sat)
(exit)
