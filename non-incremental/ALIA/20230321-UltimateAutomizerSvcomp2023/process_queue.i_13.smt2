(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(declare-fun |#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier| () Int)
(declare-fun |#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |ULTIMATE.start_main_~#queue~0#1.base| () Int)
(declare-fun |ULTIMATE.start_main_~#queue~0#1.offset| () Int)
(declare-fun |#valid| () (Array Int Int))
(assert (forall ((v_ArrVal_664 Int)) (or (not (= (select |#valid| v_ArrVal_664) 0)) (forall ((v_ArrVal_694 Int) (v_ArrVal_680 (Array Int Int)) (v_ArrVal_675 (Array Int Int))) (or (<= |#StackHeapBarrier| v_ArrVal_694) (not (= (select (store |#valid| v_ArrVal_664 1) v_ArrVal_694) 0)) (forall ((v_ArrVal_689 (Array Int Int)) (v_ArrVal_682 (Array Int Int)) (v_ArrVal_687 (Array Int Int))) (= 0 (select (let ((.cse0 (let ((.cse1 (let ((.cse2 (store |#memory_$Pointer$.base| v_ArrVal_664 (store v_ArrVal_680 8 (select (select (store |#memory_$Pointer$.base| v_ArrVal_664 v_ArrVal_680) |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|))))) (store .cse2 |ULTIMATE.start_main_~#queue~0#1.base| (store (select .cse2 |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset| v_ArrVal_664))))) (store (store .cse1 v_ArrVal_694 (store v_ArrVal_687 8 (select (select (store .cse1 v_ArrVal_694 v_ArrVal_687) |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|))) |ULTIMATE.start_main_~#queue~0#1.base| (store (select (store .cse1 v_ArrVal_694 v_ArrVal_682) |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset| v_ArrVal_694))))) (select .cse0 (select (select .cse0 v_ArrVal_694) 8))) (+ (select (select (let ((.cse3 (let ((.cse4 (let ((.cse5 (store |#memory_$Pointer$.offset| v_ArrVal_664 (store v_ArrVal_675 8 (select (select (store |#memory_$Pointer$.offset| v_ArrVal_664 v_ArrVal_675) |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|))))) (store .cse5 |ULTIMATE.start_main_~#queue~0#1.base| (store (select .cse5 |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset| 0))))) (store .cse4 v_ArrVal_694 (store v_ArrVal_689 8 (select (select (store .cse4 v_ArrVal_694 v_ArrVal_689) |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|)))))) (store .cse3 |ULTIMATE.start_main_~#queue~0#1.base| (store (select .cse3 |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset| 0))) v_ArrVal_694) 8) 8)))))))))
(assert (not (forall ((v_ArrVal_664 Int)) (or (not (= (select |#valid| v_ArrVal_664) 0)) (forall ((v_ArrVal_694 Int) (v_ArrVal_680 (Array Int Int)) (v_ArrVal_675 (Array Int Int))) (or (<= |#StackHeapBarrier| v_ArrVal_694) (forall ((v_ArrVal_689 (Array Int Int)) (v_ArrVal_682 (Array Int Int)) (v_ArrVal_687 (Array Int Int))) (= (let ((.cse0 (let ((.cse3 (let ((.cse4 (let ((.cse5 (store |#memory_$Pointer$.offset| v_ArrVal_664 (store v_ArrVal_675 8 (select (select (store |#memory_$Pointer$.offset| v_ArrVal_664 v_ArrVal_675) |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|))))) (store .cse5 |ULTIMATE.start_main_~#queue~0#1.base| (store (select .cse5 |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset| 0))))) (store .cse4 v_ArrVal_694 (store v_ArrVal_689 8 (select (select (store .cse4 v_ArrVal_694 v_ArrVal_689) |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|)))))) (store .cse3 |ULTIMATE.start_main_~#queue~0#1.base| (store (select .cse3 |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset| 0))))) (select (select .cse0 (select (select (let ((.cse1 (let ((.cse2 (store |#memory_$Pointer$.base| v_ArrVal_664 (store v_ArrVal_680 8 (select (select (store |#memory_$Pointer$.base| v_ArrVal_664 v_ArrVal_680) |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|))))) (store .cse2 |ULTIMATE.start_main_~#queue~0#1.base| (store (select .cse2 |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset| v_ArrVal_664))))) (store (store .cse1 v_ArrVal_694 (store v_ArrVal_687 8 (select (select (store .cse1 v_ArrVal_694 v_ArrVal_687) |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset|))) |ULTIMATE.start_main_~#queue~0#1.base| (store (select (store .cse1 v_ArrVal_694 v_ArrVal_682) |ULTIMATE.start_main_~#queue~0#1.base|) |ULTIMATE.start_main_~#queue~0#1.offset| v_ArrVal_694))) v_ArrVal_694) 8)) (+ (select (select .cse0 v_ArrVal_694) 8) 8))) 0)) (not (= (select (store |#valid| v_ArrVal_664 1) v_ArrVal_694) 0))))))))
(check-sat)
(exit)
