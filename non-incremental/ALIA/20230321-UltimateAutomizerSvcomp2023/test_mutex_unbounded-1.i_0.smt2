(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(declare-fun |c_~#drvlist~0.base| () Int)
(declare-fun |c_~#drvlist~0.offset| () Int)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |c___ldv_list_add_#in~new.base| () Int)
(declare-fun |c___ldv_list_add_#in~prev.base| () Int)
(declare-fun |c___ldv_list_add_#in~prev.offset| () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(assert (and (= |c_#valid| |c_old(#valid)|) (= |c_old(#length)| |c_#length|)))
(assert (not (and (= |c_~#drvlist~0.offset| 0) (let ((.cse0 (= (select (select |c_#memory_$Pointer$.base| |c___ldv_list_add_#in~prev.base|) |c___ldv_list_add_#in~prev.offset|) |c___ldv_list_add_#in~new.base|))) (or (and .cse0 (not (= |c___ldv_list_add_#in~prev.base| |c___ldv_list_add_#in~new.base|))) (and .cse0 (or (exists ((v_DerPreprocessor_5 (Array Int Int)) (__ldv_list_add_~next.base Int) (v_DerPreprocessor_4 (Array Int Int)) (v_DerPreprocessor_7 (Array Int Int)) (v_DerPreprocessor_6 (Array Int Int)) (v_DerPreprocessor_9 (Array Int Int)) (v_DerPreprocessor_8 (Array Int Int))) (let ((.cse5 (store (store (store (store (store (store |c_#memory_$Pointer$.base| __ldv_list_add_~next.base v_DerPreprocessor_7) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_8) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_9) __ldv_list_add_~next.base v_DerPreprocessor_7) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_8) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_9))) (let ((.cse4 (store (store (store (store (store (store .cse5 __ldv_list_add_~next.base v_DerPreprocessor_4) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_5) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_6) __ldv_list_add_~next.base v_DerPreprocessor_4) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_5) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_6))) (let ((.cse1 (select .cse5 __ldv_list_add_~next.base)) (.cse2 (select |c_#memory_$Pointer$.base| __ldv_list_add_~next.base)) (.cse3 (select .cse4 __ldv_list_add_~next.base))) (and (= .cse1 .cse2) (= .cse1 v_DerPreprocessor_7) (= (select v_DerPreprocessor_9 |c___ldv_list_add_#in~prev.offset|) |c___ldv_list_add_#in~new.base|) (= .cse2 .cse3) (= v_DerPreprocessor_4 .cse3) (= (select .cse4 |c___ldv_list_add_#in~new.base|) v_DerPreprocessor_5) (= (select .cse5 |c___ldv_list_add_#in~new.base|) v_DerPreprocessor_8) (= (select v_DerPreprocessor_6 |c___ldv_list_add_#in~prev.offset|) |c___ldv_list_add_#in~new.base|)))))) (exists ((v_DerPreprocessor_10 (Array Int Int)) (v_DerPreprocessor_5 (Array Int Int)) (v_DerPreprocessor_6 (Array Int Int)) (v_DerPreprocessor_11 (Array Int Int))) (let ((.cse6 (store (store (store (store |c_#memory_$Pointer$.base| |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_10) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_11) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_10) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_11))) (and (= (select v_DerPreprocessor_10 |c___ldv_list_add_#in~prev.offset|) |c___ldv_list_add_#in~new.base|) (= (select v_DerPreprocessor_6 |c___ldv_list_add_#in~prev.offset|) |c___ldv_list_add_#in~new.base|) (= v_DerPreprocessor_5 (select (store (store (store (store (store .cse6 |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_6) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_5) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_6) |c___ldv_list_add_#in~new.base| v_DerPreprocessor_5) |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_6) |c___ldv_list_add_#in~new.base|)) (= v_DerPreprocessor_11 (select (store .cse6 |c___ldv_list_add_#in~prev.base| v_DerPreprocessor_10) |c___ldv_list_add_#in~new.base|))))))))) (= |c_~#drvlist~0.base| 4))))
(check-sat)
(exit)
