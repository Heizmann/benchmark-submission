(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(declare-fun ~__codecvt_result~0~__codecvt_ok () Int)
(declare-fun ~__codecvt_result~0~__codecvt_partial () Int)
(declare-fun ~__codecvt_result~0~__codecvt_error () Int)
(declare-fun ~__codecvt_result~0~__codecvt_noconv () Int)
(declare-fun |c_~#gl_list~0.base| () Int)
(declare-fun |c_~#gl_list~0.offset| () Int)
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_old(#memory_$Pointer$.base)| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_$Pointer$.offset)| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int)| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_inspect_#in~head.base| () Int)
(declare-fun |c_inspect_#in~head.offset| () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(assert (= ~__codecvt_result~0~__codecvt_ok 0))
(assert (= ~__codecvt_result~0~__codecvt_partial 1))
(assert (= 2 ~__codecvt_result~0~__codecvt_error))
(assert (= ~__codecvt_result~0~__codecvt_noconv 3))
(assert (and (= |c_inspect_#in~head.base| |c_~#gl_list~0.base|) (= |c_inspect_#in~head.offset| |c_~#gl_list~0.offset|)))
(assert (let ((.cse0 (select |c_#memory_$Pointer$.base| 3))) (and (= |c_#memory_$Pointer$.base| |c_old(#memory_$Pointer$.base)|) (= (select |c_#valid| 3) 1) (= 3 |c_inspect_#in~head.base|) (not (= (select .cse0 0) 3)) (= |c_~#gl_list~0.offset| 0) (= 3 |c_~#gl_list~0.base|) (= |c_old(#memory_int)| |c_#memory_int|) (not (= (select .cse0 8) 0)) (= |c_#memory_$Pointer$.offset| |c_old(#memory_$Pointer$.offset)|) (= 0 |c_inspect_#in~head.offset|) (not (= (select (select |c_#memory_$Pointer$.offset| |c_inspect_#in~head.base|) (+ 8 |c_inspect_#in~head.offset|)) 0)))))
(assert (and (= |c_old(#memory_$Pointer$.offset)| |c_#memory_$Pointer$.offset|) (= |c_old(#memory_int)| |c_#memory_int|) (= |c_old(#memory_$Pointer$.base)| |c_#memory_$Pointer$.base|)))
(declare-fun |c_ULTIMATE.start_gl_insert_~node~1#1.base_Hier| () Int)
(assert (let ((.cse0 (select |c_#memory_$Pointer$.base| 3))) (and (not (= |c_ULTIMATE.start_gl_insert_~node~1#1.base_Hier| 3)) (= |c_~#gl_list~0.base| 3) (not (= (select .cse0 0) 3)) (= (select |c_#valid| 3) 1) (not (= (select (select |c_#memory_$Pointer$.offset| 3) 8) 0)) (let ((.cse1 (select .cse0 8))) (let ((.cse2 (not (= .cse1 0))) (.cse3 (= .cse1 3))) (or (and (= |c_ULTIMATE.start_gl_insert_~node~1#1.base_Hier| .cse1) .cse2) (and (exists ((|list_add___list_add_~next#1.offset| Int)) (= |c_ULTIMATE.start_gl_insert_~node~1#1.base_Hier| (select (select |c_#memory_$Pointer$.base| .cse1) (+ |list_add___list_add_~next#1.offset| 8)))) (not .cse3) .cse2) (and .cse3 (exists ((v_arrayElimCell_46 Int) (|list_add___list_add_~next#1.offset| Int)) (and (not (= 3 v_arrayElimCell_46)) (= |c_ULTIMATE.start_gl_insert_~node~1#1.base_Hier| (select (select |c_#memory_$Pointer$.base| v_arrayElimCell_46) (+ |list_add___list_add_~next#1.offset| 8))) (not (= v_arrayElimCell_46 0))))) (and .cse3 (not (= |c_ULTIMATE.start_gl_insert_~node~1#1.base_Hier| 0)))))) (= |c_~#gl_list~0.offset| 0))))
(declare-fun |c_list_add_#in~new#1.base_Hier| () Int)
(declare-fun |c_old(#memory_$Pointer$.base)_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_list_add_#in~head#1.offset_Hier| () Int)
(declare-fun |c_list_add_#in~head#1.base_Hier| () Int)
(assert (not (and (= |c_~#gl_list~0.base| 3) (exists ((v_ArrVal_1471 Int) (v_ArrVal_1476 (Array Int Int)) (|list_add___list_add_~next#1.offset| Int) (v_ArrVal_1470 (Array Int Int))) (= (let ((.cse0 (let ((.cse1 (select (select |c_old(#memory_$Pointer$.base)_Hier| |c_list_add_#in~head#1.base_Hier|) |c_list_add_#in~head#1.offset_Hier|))) (store |c_old(#memory_$Pointer$.base)_Hier| .cse1 (store (select |c_old(#memory_$Pointer$.base)_Hier| .cse1) (+ |list_add___list_add_~next#1.offset| 8) |c_list_add_#in~new#1.base_Hier|))))) (store (store .cse0 |c_list_add_#in~new#1.base_Hier| v_ArrVal_1470) |c_list_add_#in~head#1.base_Hier| (store (select (store .cse0 |c_list_add_#in~new#1.base_Hier| v_ArrVal_1476) |c_list_add_#in~head#1.base_Hier|) |c_list_add_#in~head#1.offset_Hier| v_ArrVal_1471))) |c_#memory_$Pointer$.base|)) (= |c_~#gl_list~0.offset| 0))))
(check-sat)
(exit)
