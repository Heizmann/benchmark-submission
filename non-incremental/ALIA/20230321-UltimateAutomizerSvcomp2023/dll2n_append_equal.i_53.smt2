(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#memory_int)| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_$Pointer$.base)| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_$Pointer$.offset)| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_ULTIMATE.start_dll_append_#t~ret7#1.base_primed| () Int)
(declare-fun |c_ULTIMATE.start_dll_append_#t~ret7#1.offset_primed| () Int)
(declare-fun |c_node_create_#in~data#1| () Int)
(declare-fun |c_node_create_#res#1.base| () Int)
(declare-fun |c_node_create_#res#1.offset| () Int)
(declare-fun |c_node_create_~temp~0#1.base| () Int)
(declare-fun |c_node_create_~temp~0#1.offset| () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(assert (and (= |c_node_create_#res#1.offset| |c_ULTIMATE.start_dll_append_#t~ret7#1.offset_primed|) (= |c_ULTIMATE.start_dll_append_#t~ret7#1.base_primed| |c_node_create_#res#1.base|)))
(declare-fun |c_#memory_$Pointer$.base_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_$Pointer$.offset_Hier| () (Array Int (Array Int Int)))
(assert (and (= |c_old(#memory_$Pointer$.base)| |c_#memory_$Pointer$.base_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_#valid_Hier| |c_old(#valid)|) (= |c_old(#memory_int)| |c_#memory_int_Hier|) (= |c_#memory_$Pointer$.offset_Hier| |c_old(#memory_$Pointer$.offset)|)))
(declare-fun |c_ULTIMATE.start_dll_append_~data#1_Hier| () Int)
(assert (= |c_node_create_#in~data#1| |c_ULTIMATE.start_dll_append_~data#1_Hier|))
(assert (and (exists ((v_ArrVal_1399 (Array Int Int))) (= (store |c_old(#memory_$Pointer$.offset)| |c_node_create_#res#1.base| v_ArrVal_1399) |c_#memory_$Pointer$.offset|)) (= |c_#valid| (store |c_old(#valid)| |c_node_create_#res#1.base| 1)) (exists ((v_ArrVal_1395 (Array Int Int))) (= |c_#memory_int| (store |c_old(#memory_int)| |c_node_create_#res#1.base| v_ArrVal_1395))) (= |c_node_create_#res#1.offset| 0) (exists ((v_ArrVal_1398 (Array Int Int))) (= |c_#memory_$Pointer$.base| (store |c_old(#memory_$Pointer$.base)| |c_node_create_#res#1.base| v_ArrVal_1398))) (not (= |c_node_create_~temp~0#1.base| 0)) (= |c_#valid| (store |c_old(#valid)| |c_node_create_~temp~0#1.base| 1)) (= |c_node_create_~temp~0#1.offset| 0) (<= (+ |c_node_create_#res#1.base| 1) |c_#StackHeapBarrier|) (= (select |c_old(#valid)| |c_node_create_~temp~0#1.base|) 0)))
(declare-fun |c_ULTIMATE.start_main_~#s~0#1.base_Hier| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~head~0#1.offset_Hier| () Int)
(declare-fun |c_ULTIMATE.start_main_~data~0#1_Hier| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~new_head~0#1.base_Hier| () Int)
(declare-fun |c_ULTIMATE.start_dll_append_~head#1.offset_Hier| () Int)
(declare-fun |c_ULTIMATE.start_dll_append_~head#1.base_Hier| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~new_head~0#1.offset_Hier| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~data#1_Hier| () Int)
(declare-fun |c_ULTIMATE.start_main_~#s~0#1.offset_Hier| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_#res#1.base_Hier| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~head~0#1.base_Hier| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_#res#1.offset_Hier| () Int)
(assert (let ((.cse0 (select (select |c_#memory_$Pointer$.base_Hier| |c_ULTIMATE.start_main_~#s~0#1.base_Hier|) 0))) (let ((.cse2 (select (select |c_#memory_$Pointer$.base_Hier| |c_ULTIMATE.start_dll_create_~head~0#1.base_Hier|) 4)) (.cse1 (select (select |c_#memory_$Pointer$.base_Hier| .cse0) 4)) (.cse3 (select (select |c_#memory_$Pointer$.base_Hier| |c_ULTIMATE.start_dll_create_~new_head~0#1.base_Hier|) 4)) (.cse4 (select (select |c_#memory_$Pointer$.base_Hier| |c_ULTIMATE.start_dll_create_#res#1.base_Hier|) 4))) (and (= (select (select |c_#memory_int_Hier| |c_ULTIMATE.start_dll_create_~new_head~0#1.base_Hier|) 0) 1) (= |c_ULTIMATE.start_dll_create_~new_head~0#1.offset_Hier| 0) (< |c_#StackHeapBarrier| |c_ULTIMATE.start_main_~#s~0#1.base_Hier|) (not (= .cse0 .cse1)) (= (select (select |c_#memory_int_Hier| .cse0) 0) 1) (= (select |c_#valid_Hier| |c_ULTIMATE.start_dll_create_#res#1.base_Hier|) 1) (not (= |c_ULTIMATE.start_dll_create_~head~0#1.base_Hier| 0)) (not (= |c_ULTIMATE.start_dll_create_~head~0#1.base_Hier| .cse2)) (= (select |c_#valid_Hier| |c_ULTIMATE.start_dll_create_~head~0#1.base_Hier|) 1) (not (= |c_ULTIMATE.start_dll_create_#res#1.base_Hier| 0)) (= (select |c_#valid_Hier| |c_ULTIMATE.start_dll_create_~new_head~0#1.base_Hier|) 1) (= (select |c_#valid_Hier| .cse0) 1) (< |c_ULTIMATE.start_dll_create_~new_head~0#1.base_Hier| |c_#StackHeapBarrier|) (not (= .cse3 |c_ULTIMATE.start_dll_create_~new_head~0#1.base_Hier|)) (= |c_ULTIMATE.start_dll_append_~head#1.base_Hier| |c_ULTIMATE.start_main_~#s~0#1.base_Hier|) (= (select (select |c_#memory_int_Hier| |c_ULTIMATE.start_dll_create_~head~0#1.base_Hier|) 0) 1) (= (select |c_#valid_Hier| .cse2) 1) (not (= .cse0 0)) (not (= |c_ULTIMATE.start_dll_create_#res#1.base_Hier| .cse4)) (< |c_ULTIMATE.start_dll_create_~head~0#1.base_Hier| |c_#StackHeapBarrier|) (= |c_ULTIMATE.start_dll_append_~head#1.offset_Hier| 0) (= |c_ULTIMATE.start_main_~data~0#1_Hier| 1) (= (select (select |c_#memory_int_Hier| |c_ULTIMATE.start_dll_create_#res#1.base_Hier|) 0) 1) (< |c_ULTIMATE.start_dll_create_#res#1.base_Hier| |c_#StackHeapBarrier|) (= (select (select |c_#memory_$Pointer$.offset_Hier| |c_ULTIMATE.start_main_~#s~0#1.base_Hier|) 0) 0) (= |c_ULTIMATE.start_main_~#s~0#1.offset_Hier| 0) (= (select |c_#valid_Hier| .cse1) 1) (not (= |c_ULTIMATE.start_dll_create_~new_head~0#1.base_Hier| 0)) (= |c_ULTIMATE.start_dll_create_#res#1.offset_Hier| 0) (= |c_ULTIMATE.start_dll_create_~head~0#1.offset_Hier| 0) (= (select |c_#valid_Hier| .cse3) 1) (< .cse0 |c_#StackHeapBarrier|) (= (select |c_#valid_Hier| .cse4) 1) (= |c_ULTIMATE.start_dll_create_~data#1_Hier| 1)))))
(assert (not (let ((.cse0 (select (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_main_~#s~0#1.base_Hier|) 0))) (let ((.cse1 (select (select |c_#memory_$Pointer$.base| .cse0) 4))) (and (not (= .cse0 .cse1)) (= (select (select |c_#memory_int| .cse0) 0) 1) (not (= .cse0 0)) (= |c_ULTIMATE.start_main_~data~0#1_Hier| 1) (<= (+ .cse0 2) |c_ULTIMATE.start_main_~#s~0#1.base_Hier|) (= (select (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_main_~#s~0#1.base_Hier|) 0) 0) (= |c_ULTIMATE.start_main_~#s~0#1.offset_Hier| 0) (exists ((|ULTIMATE.start_dll_append_~last~0#1.offset| Int)) (let ((.cse2 (select (select |c_#memory_$Pointer$.base| .cse1) (+ |ULTIMATE.start_dll_append_~last~0#1.offset| 4)))) (and (not (= .cse2 .cse1)) (not (= .cse0 .cse2)) (<= (+ 2 .cse2) |c_ULTIMATE.start_main_~#s~0#1.base_Hier|)))))))))
(check-sat)
(exit)
