(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(declare-fun |ULTIMATE.start_main_~list~0#1.offset| () Int)
(declare-fun |#memory_int| () (Array Int (Array Int Int)))
(declare-fun |ULTIMATE.start_main_~m~0#1.base| () Int)
(declare-fun |#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |ULTIMATE.start_main_~m~0#1.offset| () Int)
(declare-fun |ULTIMATE.start_main_~head~0#1.offset| () Int)
(declare-fun |ULTIMATE.start_main_#t~mem9#1| () Int)
(declare-fun |#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |ULTIMATE.start_main_~head~0#1.base| () Int)
(declare-fun |ULTIMATE.start_main_~list~0#1.base| () Int)
(declare-fun |#valid| () (Array Int Int))
(assert (let ((.cse0 (select (select |#memory_int| |ULTIMATE.start_main_~m~0#1.base|) 0))) (or (<= .cse0 2) (exists ((|ULTIMATE.start_main_~list~0#1.base| Int)) (let ((.cse1 (select (select |#memory_int| |ULTIMATE.start_main_~list~0#1.base|) 0))) (and (<= .cse0 (+ .cse1 100)) (<= .cse1 1)))))))
(assert (= |ULTIMATE.start_main_~list~0#1.base| |ULTIMATE.start_main_~head~0#1.base|))
(assert (= (select |#valid| |ULTIMATE.start_main_~head~0#1.base|) 1))
(assert (= |ULTIMATE.start_main_~list~0#1.offset| 0))
(assert (= |ULTIMATE.start_main_~m~0#1.offset| 0))
(assert (or (< 100 |ULTIMATE.start_main_#t~mem9#1|) (forall ((v_ArrVal_258 Int)) (let ((.cse3 (+ |ULTIMATE.start_main_~list~0#1.offset| 4))) (let ((.cse2 (select (select |#memory_$Pointer$.base| |ULTIMATE.start_main_~list~0#1.base|) .cse3))) (let ((.cse0 (select |#memory_int| .cse2)) (.cse1 (select (select |#memory_$Pointer$.offset| |ULTIMATE.start_main_~list~0#1.base|) .cse3))) (or (< (+ (select (select |#memory_int| |ULTIMATE.start_main_~list~0#1.base|) |ULTIMATE.start_main_~list~0#1.offset|) (select .cse0 .cse1)) v_ArrVal_258) (<= (select (select (store |#memory_int| .cse2 (store .cse0 .cse1 v_ArrVal_258)) |ULTIMATE.start_main_~m~0#1.base|) |ULTIMATE.start_main_~m~0#1.offset|) 109))))))))
(assert (= |ULTIMATE.start_main_~m~0#1.base| (select (select |#memory_$Pointer$.base| |ULTIMATE.start_main_~head~0#1.base|) 4)))
(assert (= (select (select |#memory_$Pointer$.offset| |ULTIMATE.start_main_~head~0#1.base|) 4) 0))
(assert (= |ULTIMATE.start_main_~head~0#1.offset| 0))
(assert (<= (select (select |#memory_int| |ULTIMATE.start_main_~m~0#1.base|) |ULTIMATE.start_main_~m~0#1.offset|) 100))
(assert (or (<= (select (select |#memory_int| |ULTIMATE.start_main_~m~0#1.base|) |ULTIMATE.start_main_~m~0#1.offset|) 100) (= |ULTIMATE.start_main_~m~0#1.base| (select (select |#memory_$Pointer$.base| |ULTIMATE.start_main_~list~0#1.base|) (+ |ULTIMATE.start_main_~list~0#1.offset| 4)))))
(assert (= (select |#valid| |ULTIMATE.start_main_~m~0#1.base|) 1))
(assert (= (select (select |#memory_int| |ULTIMATE.start_main_~head~0#1.base|) |ULTIMATE.start_main_~head~0#1.offset|) 1))
(assert (let ((.cse0 (+ |ULTIMATE.start_main_~list~0#1.offset| 4))) (or (not (= |ULTIMATE.start_main_~m~0#1.base| (select (select |#memory_$Pointer$.base| |ULTIMATE.start_main_~list~0#1.base|) .cse0))) (and (= (select (select |#memory_int| |ULTIMATE.start_main_~list~0#1.base|) |ULTIMATE.start_main_~list~0#1.offset|) 1) (or (= (select (select |#memory_$Pointer$.offset| |ULTIMATE.start_main_~list~0#1.base|) .cse0) |ULTIMATE.start_main_~m~0#1.offset|) (<= (select (select |#memory_int| |ULTIMATE.start_main_~m~0#1.base|) |ULTIMATE.start_main_~m~0#1.offset|) 100))))))
(assert (not (= |ULTIMATE.start_main_~m~0#1.base| |ULTIMATE.start_main_~list~0#1.base|)))
(assert (not (let ((.cse0 (select |#memory_int| |ULTIMATE.start_main_~head~0#1.base|))) (let ((.cse1 (select .cse0 0))) (and (exists ((v_DerPreprocessor_1 (Array Int Int)) (v_DerPreprocessor_2 (Array Int Int))) (and (= (select |#memory_int| |ULTIMATE.start_main_~m~0#1.base|) (select (store (store (store (store |#memory_int| |ULTIMATE.start_main_~m~0#1.base| v_DerPreprocessor_1) |ULTIMATE.start_main_~head~0#1.base| v_DerPreprocessor_2) |ULTIMATE.start_main_~m~0#1.base| v_DerPreprocessor_1) |ULTIMATE.start_main_~head~0#1.base| v_DerPreprocessor_2) |ULTIMATE.start_main_~m~0#1.base|)) (= (select v_DerPreprocessor_2 12) (select .cse0 12)) (= .cse1 (select v_DerPreprocessor_2 0)) (= (select v_DerPreprocessor_2 4) (select .cse0 4)))) (<= .cse1 1))))))
(assert (not (and (= |ULTIMATE.start_main_~m~0#1.base| |ULTIMATE.start_main_~head~0#1.base|) (<= (select (select |#memory_int| |ULTIMATE.start_main_~head~0#1.base|) 0) 1))))
(check-sat)
(exit)
