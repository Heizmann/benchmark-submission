(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~unnamed0~0~P_ALL () Int)
(declare-fun ~unnamed0~0~P_PID () Int)
(declare-fun ~unnamed0~0~P_PGID () Int)
(declare-fun |c_#memory_$Pointer$.base| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_$Pointer$.offset| () (Array Int (Array Int Int)))
(declare-fun |c_ULTIMATE.start_main_~#s~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~new_head~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~new_head~0#1.offset| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~head~0#1.base| () Int)
(declare-fun |c_ULTIMATE.start_dll_create_~head~0#1.offset| () Int)
(assert (= ~unnamed0~0~P_ALL 0))
(assert (= ~unnamed0~0~P_PID 1))
(assert (= 2 ~unnamed0~0~P_PGID))
(assert (let ((.cse6 (+ |c_ULTIMATE.start_dll_create_~head~0#1.offset| 12))) (let ((.cse2 (store |c_#memory_$Pointer$.base| |c_ULTIMATE.start_dll_create_~head~0#1.base| (store (select |c_#memory_$Pointer$.base| |c_ULTIMATE.start_dll_create_~head~0#1.base|) .cse6 |c_ULTIMATE.start_dll_create_~new_head~0#1.base|))) (.cse5 (select |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_dll_create_~head~0#1.base|))) (and (forall ((v_ArrVal_663 Int) (|ULTIMATE.start_main_~#s~0#1.base| Int)) (let ((.cse1 (store |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_dll_create_~head~0#1.base| (store .cse5 .cse6 v_ArrVal_663)))) (let ((.cse0 (select (select .cse2 |ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|)) (.cse4 (select (select .cse1 |ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|))) (or (not (= |c_ULTIMATE.start_dll_create_~new_head~0#1.base| .cse0)) (= 0 (let ((.cse3 (+ .cse4 4))) (select (select .cse1 (select (select .cse2 .cse0) .cse3)) (+ (select (select .cse1 .cse0) .cse3) 4)))) (not (= .cse4 |c_ULTIMATE.start_dll_create_~new_head~0#1.offset|)))))) (forall ((v_ArrVal_663 Int) (|ULTIMATE.start_main_~#s~0#1.base| Int)) (let ((.cse9 (store |c_#memory_$Pointer$.offset| |c_ULTIMATE.start_dll_create_~head~0#1.base| (store .cse5 .cse6 v_ArrVal_663)))) (let ((.cse7 (select (select .cse2 |ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|)) (.cse10 (select (select .cse9 |ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|))) (or (not (= |c_ULTIMATE.start_dll_create_~new_head~0#1.base| .cse7)) (= (let ((.cse8 (+ .cse10 4))) (select (select .cse2 (select (select .cse2 .cse7) .cse8)) (+ (select (select .cse9 .cse7) .cse8) 4))) 0) (not (= .cse10 |c_ULTIMATE.start_dll_create_~new_head~0#1.offset|))))))))))
(assert (not (and (forall ((|ULTIMATE.start_main_~#s~0#1.base| Int)) (let ((.cse0 (select (select |c_#memory_$Pointer$.base| |ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|)) (.cse2 (select (select |c_#memory_$Pointer$.offset| |ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|))) (or (not (= |c_ULTIMATE.start_dll_create_~new_head~0#1.base| .cse0)) (= (let ((.cse1 (+ .cse2 4))) (select (select |c_#memory_$Pointer$.offset| (select (select |c_#memory_$Pointer$.base| .cse0) .cse1)) (+ (select (select |c_#memory_$Pointer$.offset| .cse0) .cse1) 4))) 0) (not (= .cse2 |c_ULTIMATE.start_dll_create_~new_head~0#1.offset|))))) (forall ((|ULTIMATE.start_main_~#s~0#1.base| Int)) (let ((.cse3 (select (select |c_#memory_$Pointer$.base| |ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|)) (.cse5 (select (select |c_#memory_$Pointer$.offset| |ULTIMATE.start_main_~#s~0#1.base|) |c_ULTIMATE.start_main_~#s~0#1.offset|))) (or (= (let ((.cse4 (+ .cse5 4))) (select (select |c_#memory_$Pointer$.base| (select (select |c_#memory_$Pointer$.base| .cse3) .cse4)) (+ (select (select |c_#memory_$Pointer$.offset| .cse3) .cse4) 4))) 0) (not (= |c_ULTIMATE.start_dll_create_~new_head~0#1.base| .cse3)) (not (= .cse5 |c_ULTIMATE.start_dll_create_~new_head~0#1.offset|))))))))
(check-sat)
(exit)
