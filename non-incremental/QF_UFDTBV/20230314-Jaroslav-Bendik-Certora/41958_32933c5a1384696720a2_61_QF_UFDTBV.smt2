(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x137 0)) (((x573 (x492 x137) (x569 x137) (x272 (_ BitVec 256))) (x402 (x381 (_ BitVec 256))) (x477 (x197 x137) (x129 (_ BitVec 256))))))
(declare-fun x131 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x481 () Bool)
(declare-fun x29 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x444 () (_ BitVec 256))
(declare-fun x326 () Bool)
(declare-fun x445 () (_ BitVec 256))
(declare-fun x303 () Bool)
(declare-fun x340 () Bool)
(declare-fun x551 () Bool)
(declare-fun x101 () Bool)
(declare-fun x347 () (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x544 () Bool)
(declare-fun x499 () Bool)
(declare-fun x411 () Bool)
(declare-fun x514 () Bool)
(declare-fun x564 () (_ BitVec 256))
(declare-fun x363 () (_ BitVec 256))
(declare-fun x593 () Bool)
(declare-fun x288 () Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x242 () Bool)
(declare-fun x42 () Bool)
(declare-fun x286 () (_ BitVec 256))
(declare-fun x317 () Bool)
(declare-fun x432 () Bool)
(declare-fun x581 () (_ BitVec 256))
(declare-fun x450 () Bool)
(declare-fun x313 () (_ BitVec 256))
(declare-fun x43 ((_ BitVec 256)) x137)
(declare-fun x361 () Bool)
(declare-fun x237 () Bool)
(declare-fun x574 () Bool)
(declare-fun x546 () (_ BitVec 256))
(declare-fun x365 () (_ BitVec 256))
(declare-fun x404 () Bool)
(declare-fun x260 () (_ BitVec 256))
(declare-fun x323 () Bool)
(declare-fun x451 () (_ BitVec 256))
(declare-fun x565 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x314 () Bool)
(declare-fun x539 () Bool)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x498 () Bool)
(declare-fun x328 () Bool)
(declare-fun x107 () Bool)
(declare-fun x497 () Bool)
(declare-fun x356 () (_ BitVec 256))
(declare-fun x416 () Bool)
(declare-fun x48 () Bool)
(declare-fun x98 () Bool)
(declare-fun x321 () Bool)
(declare-fun x553 () (_ BitVec 256))
(declare-fun x388 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x190 () Bool)
(declare-fun x185 () Bool)
(declare-fun x433 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x195 () Bool)
(declare-fun x383 () (_ BitVec 256))
(declare-fun x208 () Bool)
(declare-fun x269 () Bool)
(declare-fun x24 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x214 () Bool)
(declare-fun x439 () Bool)
(declare-fun x263 () Bool)
(declare-fun x80 () Bool)
(declare-fun x408 () Bool)
(declare-fun x370 () Bool)
(declare-fun x501 () Bool)
(declare-fun x233 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x519 () Bool)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x590 () Bool)
(declare-fun x232 () Bool)
(declare-fun x251 () Bool)
(declare-fun x47 () Bool)
(declare-fun x280 () Bool)
(declare-fun x249 () (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x315 () Bool)
(declare-fun x371 () (_ BitVec 256))
(declare-fun x457 () Bool)
(declare-fun x407 () Bool)
(declare-fun x41 () Bool)
(declare-fun x133 () Bool)
(declare-fun x309 () Bool)
(declare-fun x290 () Bool)
(declare-fun x320 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x559 () Bool)
(declare-fun x555 () Bool)
(declare-fun x560 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x104 () Bool)
(declare-fun x96 () Bool)
(declare-fun x284 () Bool)
(declare-fun x292 () (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x387 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x505 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x353 () Bool)
(declare-fun x51 () Bool)
(declare-fun x467 () (_ BitVec 256))
(declare-fun x124 () Bool)
(declare-fun x71 () Bool)
(declare-fun x151 () Bool)
(declare-fun x526 () Bool)
(declare-fun x473 () Bool)
(declare-fun x511 () Bool)
(declare-fun x162 () Bool)
(declare-fun x506 () (_ BitVec 256))
(declare-fun x480 () (_ BitVec 256))
(declare-fun x540 () Bool)
(declare-fun x163 () (_ BitVec 256))
(declare-fun x336 () Bool)
(declare-fun x375 () Bool)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x524 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x530 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x166 () (_ BitVec 256))
(declare-fun x355 () (_ BitVec 256))
(declare-fun x177 () Bool)
(declare-fun x412 () Bool)
(declare-fun x282 () Bool)
(declare-fun x434 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x367 () Bool)
(declare-fun x348 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x429 () Bool)
(declare-fun x230 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x380 () Bool)
(declare-fun x277 () Bool)
(declare-fun x181 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x389 () (_ BitVec 256))
(declare-fun x476 () Bool)
(declare-fun x460 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x285 () Bool)
(declare-fun x274 () (_ BitVec 256))
(declare-fun x297 () Bool)
(declare-fun x135 () Bool)
(declare-fun x73 () Bool)
(declare-fun x532 () Bool)
(declare-fun x594 () (_ BitVec 256))
(declare-fun x84 () Bool)
(declare-fun x97 () Bool)
(declare-fun x550 () Bool)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x516 () (_ BitVec 256))
(declare-fun x21 () Bool)
(declare-fun x591 () Bool)
(declare-fun x88 () Bool)
(declare-fun x186 () (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x77 () Bool)
(declare-fun x349 () (_ BitVec 256))
(declare-fun x307 () Bool)
(declare-fun x493 () Bool)
(declare-fun x153 () Bool)
(declare-fun x528 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x293 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x470 () Bool)
(declare-fun x575 () Bool)
(declare-fun x253 () Bool)
(declare-fun x552 () Bool)
(declare-fun x578 () Bool)
(declare-fun x35 () Bool)
(declare-fun x418 () (_ BitVec 256))
(declare-fun x264 () Bool)
(declare-fun x425 () Bool)
(declare-fun x494 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x266 () Bool)
(declare-fun x188 () Bool)
(declare-fun x12 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x108 () Bool)
(declare-fun x592 () (_ BitVec 256))
(declare-fun x536 () Bool)
(declare-fun x199 () Bool)
(declare-fun x576 () Bool)
(declare-fun x523 () Bool)
(declare-fun x228 () (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x52 () Bool)
(declare-fun x527 () Bool)
(declare-fun x374 () (_ BitVec 256))
(declare-fun x244 () Bool)
(declare-fun x567 () Bool)
(declare-fun x424 () Bool)
(declare-fun x583 () (_ BitVec 256))
(declare-fun x465 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x435 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x113 () Bool)
(declare-fun x372 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x398 () Bool)
(declare-fun x341 () Bool)
(declare-fun x390 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x454 () Bool)
(declare-fun x403 () Bool)
(declare-fun x478 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x483 () Bool)
(declare-fun x397 () Bool)
(declare-fun x83 () Bool)
(declare-fun x491 () Bool)
(declare-fun x278 () (_ BitVec 256))
(declare-fun x562 () Bool)
(declare-fun x169 () Bool)
(declare-fun x534 () (_ BitVec 256))
(declare-fun x563 () Bool)
(declare-fun x158 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x357 () Bool)
(declare-fun x459 () Bool)
(declare-fun x236 () Bool)
(declare-fun x115 () Bool)
(declare-fun x70 () Bool)
(declare-fun x587 () Bool)
(declare-fun x22 () Bool)
(declare-fun x461 () Bool)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x405 () (_ BitVec 256))
(declare-fun x482 () Bool)
(declare-fun x500 () Bool)
(declare-fun x547 () Bool)
(declare-fun x502 () (_ BitVec 256))
(declare-fun x507 () (_ BitVec 256))
(declare-fun x508 () Bool)
(declare-fun x582 () Bool)
(declare-fun x206 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x306 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x396 () Bool)
(declare-fun x32 () Bool)
(declare-fun x333 () Bool)
(declare-fun x453 () (_ BitVec 256))
(declare-fun x250 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x515 () Bool)
(declare-fun x442 () Bool)
(declare-fun x386 () (_ BitVec 256))
(declare-fun x533 () Bool)
(declare-fun x410 () (_ BitVec 256))
(declare-fun x538 () Bool)
(declare-fun x342 () Bool)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x420 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x557 () Bool)
(declare-fun x167 () Bool)
(declare-fun x86 () (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x332 () Bool)
(declare-fun x132 () Bool)
(declare-fun x554 () Bool)
(declare-fun x298 () (_ BitVec 256))
(declare-fun x393 () Bool)
(declare-fun x535 () Bool)
(declare-fun x415 () Bool)
(declare-fun x584 () Bool)
(declare-fun x338 () Bool)
(declare-fun x468 () Bool)
(declare-fun x247 () (_ BitVec 256))
(declare-fun x545 () Bool)
(declare-fun x201 () Bool)
(declare-fun x1 () Bool)
(declare-fun x87 () Bool)
(declare-fun x351 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x291 () Bool)
(declare-fun x438 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x428 () Bool)
(declare-fun x150 () Bool)
(declare-fun x7 () Bool)
(declare-fun x30 (x137) (_ BitVec 256))
(declare-fun x537 () Bool)
(declare-fun x579 () Bool)
(declare-fun x23 () Bool)
(declare-fun x487 () (_ BitVec 256))
(declare-fun x455 () (_ BitVec 256))
(declare-fun x504 () Bool)
(declare-fun x256 () (_ BitVec 256))
(declare-fun x325 () (_ BitVec 256))
(declare-fun x366 () Bool)
(declare-fun x319 () Bool)
(declare-fun x589 () (_ BitVec 256))
(declare-fun x458 () Bool)
(declare-fun x18 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x352 () Bool)
(declare-fun x3 () Bool)
(declare-fun x74 () Bool)
(declare-fun x117 () Bool)
(declare-fun x452 () Bool)
(declare-fun x134 () Bool)
(declare-fun x472 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x512 () Bool)
(declare-fun x329 () (_ BitVec 256))
(declare-fun x248 () Bool)
(declare-fun x339 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x296 () Bool)
(declare-fun x406 () Bool)
(declare-fun x456 () Bool)
(declare-fun x159 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x471 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x509 () Bool)
(declare-fun x145 () Bool)
(declare-fun x331 () Bool)
(declare-fun x369 () Bool)
(declare-fun x570 () Bool)
(declare-fun x239 () Bool)
(declare-fun x395 () Bool)
(declare-fun x182 () Bool)
(declare-fun x103 () Bool)
(declare-fun x216 () Bool)
(declare-fun x252 () Bool)
(declare-fun x392 () Bool)
(declare-fun x59 () Bool)
(declare-fun x549 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x66 () Bool)
(declare-fun x174 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x558 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x436 () Bool)
(declare-fun x127 () Bool)
(declare-fun x556 () (_ BitVec 256))
(declare-fun x39 () Bool)
(declare-fun x222 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x580 () Bool)
(declare-fun x437 () Bool)
(declare-fun x40 () Bool)
(declare-fun x376 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x294 () Bool)
(declare-fun x394 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x510 () (_ BitVec 256))
(declare-fun x304 () Bool)
(declare-fun x362 () Bool)
(declare-fun x196 () Bool)
(declare-fun x446 () Bool)
(declare-fun x194 () Bool)
(declare-fun x38 () (_ BitVec 256))
(declare-fun x173 () Bool)
(declare-fun x382 () Bool)
(declare-fun x486 () Bool)
(declare-fun x268 () Bool)
(declare-fun x85 () Bool)
(declare-fun x422 () (_ BitVec 256))
(declare-fun x301 () Bool)
(declare-fun x489 () Bool)
(declare-fun x488 () Bool)
(declare-fun x312 () Bool)
(declare-fun x421 () (_ BitVec 256))
(declare-fun x302 () Bool)
(declare-fun x283 () Bool)
(declare-fun x571 () Bool)
(declare-fun x464 () Bool)
(declare-fun x139 () Bool)
(declare-fun x318 () Bool)
(declare-fun x431 () Bool)
(declare-fun x572 () Bool)
(declare-fun x462 () Bool)
(declare-fun x485 () Bool)
(declare-fun x189 () Bool)
(declare-fun x447 () Bool)
(declare-fun x427 () Bool)
(declare-fun x503 () (_ BitVec 256))
(declare-fun x207 () Bool)
(declare-fun x346 () Bool)
(declare-fun x287 () Bool)
(declare-fun x44 () Bool)
(declare-fun x400 () Bool)
(declare-fun x258 () (_ BitVec 256))
(declare-fun x33 () Bool)
(declare-fun x273 () (_ BitVec 256))
(declare-fun x136 () Bool)
(declare-fun x561 () (_ BitVec 256))
(declare-fun x217 () Bool)
(declare-fun x311 () Bool)
(declare-fun x385 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x262 () (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x517 () Bool)
(declare-fun x224 () Bool)
(declare-fun x276 () Bool)
(declare-fun x522 () Bool)
(declare-fun x335 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x542 () Bool)
(declare-fun x20 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x164 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x525 () Bool)
(declare-fun x218 () Bool)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x414 () (_ BitVec 256))
(declare-fun x246 () Bool)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x449 () Bool)
(declare-fun x126 () Bool)
(declare-fun x378 () Bool)
(declare-fun x310 () Bool)
(declare-fun x364 () (_ BitVec 256))
(declare-fun x479 () (_ BitVec 256))
(declare-fun x475 () (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x334 () Bool)
(declare-fun x448 () Bool)
(declare-fun x279 () Bool)
(declare-fun x67 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x443 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x419 () (_ BitVec 256))
(declare-fun x337 () Bool)
(declare-fun x295 () Bool)
(declare-fun x440 () (_ BitVec 256))
(declare-fun x585 () Bool)
(declare-fun x566 () Bool)
(declare-fun x146 (x137) (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x463 () Bool)
(declare-fun x219 () Bool)
(declare-fun x413 () (_ BitVec 256))
(declare-fun x469 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x401 () Bool)
(declare-fun x330 () (_ BitVec 256))
(declare-fun x391 () (_ BitVec 256))
(declare-fun x179 () Bool)
(declare-fun x128 () Bool)
(declare-fun x243 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x577 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x529 () Bool)
(declare-fun x359 () Bool)
(declare-fun x200 () Bool)
(declare-fun x324 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x343 () Bool)
(declare-fun x254 () Bool)
(declare-fun x368 () (_ BitVec 256))
(declare-fun x490 () Bool)
(declare-fun x466 () Bool)
(declare-fun x441 () Bool)
(declare-fun x417 () Bool)
(declare-fun x95 () Bool)
(declare-fun x496 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x521 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x265 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x270 () Bool)
(declare-fun x520 () Bool)
(declare-fun x322 () Bool)
(declare-fun x6 () Bool)
(declare-fun x257 () Bool)
(declare-fun x354 () Bool)
(declare-fun x426 () (_ BitVec 256))
(declare-fun x531 () Bool)
(declare-fun x93 () Bool)
(declare-fun x289 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x144 () Bool)
(declare-fun x50 () Bool)
(declare-fun x513 () Bool)
(declare-fun x316 () (_ BitVec 256))
(declare-fun x484 () Bool)
(declare-fun x588 () Bool)
(declare-fun x192 () Bool)
(declare-fun x161 () Bool)
(declare-fun x379 () (_ BitVec 256))
(declare-fun x360 () (_ BitVec 256))
(declare-fun x299 () Bool)
(declare-fun x203 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x384 () Bool)
(declare-fun x156 () Bool)
(declare-fun x215 (x137) (_ BitVec 256))
(declare-fun x423 () Bool)
(declare-fun x358 () (_ BitVec 256))
(declare-fun x495 () Bool)
(declare-fun x65 () Bool)
(declare-fun x430 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x541 () Bool)
(declare-fun x474 () (_ BitVec 256))
(declare-fun x345 () (_ BitVec 256))
(declare-fun x568 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x543 () Bool)
(declare-fun x586 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x548 () Bool)
(declare-fun x327 () Bool)
(declare-fun x518 () (_ BitVec 256))
(declare-fun x112 () Bool)
(declare-fun x110 () Bool)
(declare-fun x409 () (_ BitVec 256))
(declare-fun x399 () Bool)
(declare-fun x58 () Bool)
(define-fun x221 ((x137 x137) (x373 (_ BitVec 256))) x137 (ite ((_ is x573) x137) (x573 (x492 x137) (x569 x137) (bvadd x373 (x272 x137))) (ite ((_ is x477) x137) (x477 (x197 x137) (bvadd (x129 x137) x373)) (x402 (bvadd x373 (x381 x137))))))
(define-fun x308 ((x350 (_ BitVec 256)) (x377 (_ BitVec 256))) Bool (= (bvudiv (bvmul x350 x377) x377) x350))
(define-fun x120 ((x350 (_ BitVec 256)) (x377 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x350 x377) x377) x350))
(define-fun x300 ((x350 (_ BitVec 256)) (x377 (_ BitVec 256))) Bool (= x350 (bvsdiv (bvmul x350 x377) x377)))
(define-fun x344 ((x202 (_ BitVec 256))) Bool (=> (and (not (= x202 (_ bv2685885107 256))) (bvugt x202 (_ bv10000 256)) (not (= x202 (_ bv1245370514 256))) (not (= (_ bv1461501637330902918203684832716283019655932542975 256) x202)) (not (= x202 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (not (= (_ bv149895259 256) x202))) (not ((_ is x402) (x43 x202)))))
(assert (= (and (not x136) x485) x287))
(assert (= x454 (and x489 x301)))
(assert (= x289 (and x98 x23)))
(assert (= x112 (and x287 x582)))
(assert (= (and x126 (not x323)) x593))
(assert (= (and x514 x94) x590))
(assert (= x322 (and x367 x177)))
(assert (= (=> (and (and (= x442 x131) (= x255 x355) (= x355 (bvudiv x444 (_ bv500 256)))) (and x14 (= (_ bv500 256) x220) (= x446 false))) x279) x488))
(assert (= x68 (and x190 x119)))
(assert (= (and (not x393) x481) x101))
(assert (= x466 (and x74 x62)))
(assert (= (and x346 x437) x523))
(assert (= (and x434 x552) x527))
(assert (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (x146 (x402 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))))
(assert (= (and (not x24) x218) x110))
(assert (= x82 (and x501 (not x396))))
(assert (= (_ bv1245370514 256) (x146 (x402 (_ bv1245370514 256)))))
(assert (= (and x428 x252) x539))
(assert (= (and x264 (not x121)) x151))
(assert (= (=> (and (and x461 (= x399 false) (= (_ bv2 256) x516)) (and (= x160 x536) (= x148 x368) (= x368 (bvudiv x349 (_ bv2 256))))) x548) x139))
(assert (= x296 (and (not x472) x499)))
(assert (= x431 (and x541 (not x551))))
(assert (= (and x192 (not x32)) x429))
(assert (= (=> (and (and (= (_ bv3 256) x385) x35 (= x470 false)) (and (= x442 x131) (= x255 x258) (= (bvudiv x444 (_ bv3 256)) x258))) x279) x257))
(assert (= (and x460 x593) x154))
(assert (= x302 (=> (and (and (= x348 (_ bv2 256)) x407 (= x482 false)) (and (= x81 (bvudiv x260 (_ bv2 256))) (= x81 x255) (= x442 x131))) x279)))
(assert (= (and x508 x270) x135))
(assert (= x314 (=> (and (and x398 (= false x77) (= (_ bv400 256) x278)) (and (= x228 (bvudiv x349 (_ bv400 256))) (= x148 x228) (= x536 x160))) x548)))
(assert (= (and x248 x554) x185))
(assert (= (=> (and (and (= (_ bv3 256) x247) x45 (= false x237)) (and (= x455 (bvudiv x260 (_ bv3 256))) (= x442 x131) (= x255 x455))) x279) x473))
(assert (= (=> (and (and (= x183 x180) (= x254 x132) (= x180 (bvudiv x356 (_ bv3 256)))) (and (= (_ bv3 256) x589) x294 (= x324 false))) x458) x587))
(assert (= x531 (and x192 x32)))
(assert (= (and x263 x95) x189))
(assert (= (and x45 x295) x318))
(assert (= x51 (=> (and (and (= x191 (_ bv10 256)) (= x512 false) x1) (and (= (bvudiv x444 (_ bv10 256)) x546) (= x546 x255) (= x442 x131))) x279)))
(assert (= (and x522 (not x577)) x295))
(assert (= (and (not x67) x580) x557))
(assert (= (and x332 x461) x540))
(assert (= x575 (and (not x585) x296)))
(assert (= (and x593 (not x460)) x541))
(assert (= x104 (and x218 x24)))
(assert (= x168 (and x428 (not x252))))
(assert (= x11 (=> (and (and (= x339 x148) (= x536 x160) (= x339 (bvudiv x349 (_ bv500 256)))) (and (= (_ bv500 256) x29) (= false x66) x17)) x548)))
(assert (= (and (not x407) x559) x192))
(assert (= (and (not x150) x101) x285))
(assert (= (and x570 (not x343)) x401))
(assert (= x351 (and x468 x40)))
(assert (= x576 (and x390 x110)))
(assert (= x184 (=> (and (and (= x387 x183) (= (bvudiv x271 (_ bv3 256)) x387) (= x132 x254)) (and x333 (= x52 false) (= (_ bv3 256) x86))) x458)))
(assert (= (=> (and (and x132 (= x183 x165)) (and (= x586 x471) (= x27 x503) (= x459 (= x503 x265)) (= x211 x159) (= x265 (bvadd x211 x586)) (= x27 x165))) x459) x458))
(assert (= (and (not x591) x447) x428))
(assert (= x508 true))
(assert (= x504 (=> (and (and (= x163 x183) (= (bvudiv x271 (_ bv500 256)) x163) (= x254 x132)) (and (= false x417) (= x281 (_ bv500 256)) x346)) x458)))
(assert (= (and (not x239) x497) x332))
(assert (= (and x3 x37) x198))
(assert (= x74 (and (not x382) x64)))
(assert (= x48 (and x566 x115)))
(assert (= (and x517 (not x182)) x97))
(assert (= x491 (and x370 (not x542))))
(assert (= (and x264 x121) x156))
(assert (= (and x119 (not x190)) x535))
(assert (= x411 (and x429 x276)))
(assert (= (=> (and (and (= x536 x160) (= (bvudiv x349 (_ bv10 256)) x421) (= x148 x421)) (and (= x55 (_ bv10 256)) x393 (= false x293))) x548) x297))
(assert (= (and x431 (not x400)) x570))
(assert (= x321 (=> (and (and (= x230 (bvudiv x349 (_ bv3 256))) (= x160 x536) (= x148 x230)) (and x555 (= x306 false) (= (_ bv3 256) x158))) x548)))
(assert (= x501 (and x69 (not x1))))
(assert (= (and x513 (not x359)) x301))
(assert (= (and (not x304) x80) x497))
(assert (= x126 (and x168 (not x144))))
(assert (= (and x115 (not x566)) x49))
(assert (= (and x133 x294) x450))
(assert (= (and x545 x378) x153))
(assert (= (and x285 x181) x338))
(assert (= x437 (and x151 (not x395))))
(assert (= (x43 (_ bv149895259 256)) (x402 (_ bv149895259 256))))
(assert (= x571 (and x378 (not x545))))
(assert (= x427 (or x576 x59 x351 x208 x372 x198 x44 x312 x50 x484 x454 x338 x579 x352 x500 x112 x416 x253 x213 x104 x326 x70 x540 x361)))
(assert (= x246 (and x82 x179)))
(assert (= (and (not x582) x287) x3))
(assert (= x39 (=> (and (and (= (bvudiv x260 (_ bv400 256)) x379) (= x442 x131) (= x379 x255)) (and x62 (= x200 false) (= x479 (_ bv400 256)))) x279)))
(assert (= x282 (and x551 x541)))
(assert (= (and x173 x571) x207))
(assert (= x13 (=> (and (and (= false x408) (= (_ bv2 256) x102) x460) (and (= x183 x386) (= (bvudiv x271 (_ bv2 256)) x386) (= x132 x254))) x458)))
(assert (= (and (not x489) x301) x80))
(assert (= x309 (=> (and (and (= false x299) (= (_ bv400 256) x345) x182) (and (= x183 x383) (= x132 x254) (= (bvudiv x356 (_ bv400 256)) x383))) x458)))
(assert (= x538 (and x396 x501)))
(assert (= (and x136 x485) x59))
(assert (= (and x463 x284) x342))
(assert (= (or x20 x189 x457 x75 x108 x188 x282 x154 x476 x207 x85 x523 x539 x590 x76 x185 x153 x251 x48 x334 x97 x87 x156 x450) x280))
(assert (= x457 (and x144 x168)))
(assert (= (=> (and (= x435 x394) (= x270 (or x462 x319)) (= x507 x581) (= x116 x435) (= x232 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x273)) (= x532 (bvugt (x215 (x43 x5)) (_ bv0 256))) (= x394 x174) (= x212 x507) (= (bvadd x469 x174) x496) (= (bvule x262 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x196) (= x363 (x30 (x43 x5))) (not (= x28 (_ bv149895259 256))) (bvule x5 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x394 x260) (= x438 (x215 (x43 x5))) (= x444 x178) (= x462 (= (_ bv0 256) x444)) (= x28 (_ bv2685885107 256)) (bvule (_ bv0 256) x363) (not (= x28 (_ bv1245370514 256))) x196 (= x262 (bvadd x116 x212)) (= x131 (and x328 x232)) x532 (= (not (= (_ bv0 256) x360)) x328) (= (= (_ bv0 256) x260) x319) (bvugt x438 (_ bv0 256)) (= x581 x469) (= x419 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x57 x360) (bvult (_ bv0 256) x5) (= x273 (bvmul x260 x444))) (and (=> (and (and (= x131 x442) (= (_ bv0 256) x25) (= x255 x25) x270) x270) x279) (=> (and (not x270) (and x219 (= x190 (= x360 x444)) (= x219 (not x270)))) (and (=> (and (and (= x442 x131) (= x255 x260) x190) x190) x279) (=> (and (not x190) (and (= (not x190) x277) (= (= x360 x260) x88) x277)) (and (=> (and x88 (and (= x131 x442) x88 (= x255 x444))) x279) (=> (and (not x88) (and (= x550 (= x409 x444)) x384 (= x409 (bvmul x360 (_ bv2 256))) (= (not x88) x384))) (and (=> (and (and (= (not x550) x58) (= x231 (bvmul x360 (_ bv2 256))) (= (= x260 x231) x552) x58) (not x550)) (and (=> (and (and (= x407 (= x360 x274)) (= x274 (bvmul x444 (_ bv2 256))) (= (not x552) x244) x244) (not x552)) (and (=> (and (and (= (= x360 x176) x32) (= (bvmul (_ bv2 256) x260) x176) x73 (= x73 (not x407))) (not x407)) (and (=> x32 x425) (=> (and (not x32) (and x16 (= x388 (bvmul x360 (_ bv3 256))) (= x276 (= x388 x444)) (= x16 (not x32)))) (and (=> (and x276 (and (= x478 x255) (= x442 x131) (= (bvmul x260 (_ bv3 256)) x478) x276)) x279) (=> (and (not x276) (and x71 (= x71 (not x276)) (= (= x260 x78) x577) (= x78 (bvmul (_ bv3 256) x360)))) (and (=> (and (and (= x131 x442) (= x255 x53) x577 (= (bvmul x444 (_ bv3 256)) x53)) x577) x279) (=> (and (not x577) (and (= (= x360 x243) x45) x525 (= (not x577) x525) (= (bvmul x444 (_ bv3 256)) x243))) (and (=> x45 x473) (=> (and (not x45) (and x336 (= (= x360 x142) x35) (= x336 (not x45)) (= x142 (bvmul (_ bv3 256) x260)))) (and (=> x35 x257) (=> (and (and x96 (= x96 (not x35)) (= x284 (= x494 x444)) (= (bvmul x360 (_ bv10 256)) x494)) (not x35)) (and (=> (and (not x284) (and (= (not x284) x578) (= (= x260 x426) x23) (= x426 (bvmul (_ bv10 256) x360)) x578)) (and (=> (and (not x23) (and (= (= x360 x143) x162) (= x143 (bvmul x444 (_ bv10 256))) x149 (= (not x23) x149))) (and (=> (and (not x162) (and (= (bvmul x260 (_ bv10 256)) x138) x127 (= x127 (not x162)) (= x1 (= x360 x138)))) (and (=> (and (and (= x396 (= x453 x444)) (= (not x1) x380) x380 (= (bvmul (_ bv500 256) x360) x453)) (not x1)) (and (=> (and (and x201 (= (not x396) x201) (= (bvmul (_ bv500 256) x360) x413) (= x179 (= x260 x413))) (not x396)) (and (=> (and (and (= x2 (bvmul x444 (_ bv500 256))) x179 (= x131 x442) (= x2 x255)) x179) x279) (=> (and (not x179) (and (= x563 (= x518 x360)) (= (not x179) x441) (= x518 (bvmul x444 (_ bv500 256))) x441)) (and (=> x563 x21) (=> (and (not x563) (and x19 (= (= x360 x467) x14) (= (not x563) x19) (= x467 (bvmul x260 (_ bv500 256))))) (and (=> x14 x488) (=> (and (not x14) (and (= x177 (= x292 x444)) (= (bvmul (_ bv400 256) x360) x292) (= x423 (not x14)) x423)) (and (=> (and x177 (and (= x451 x255) x177 (= x442 x131) (= (bvmul (_ bv400 256) x260) x451))) x279) (=> (and (not x177) (and (= x475 (bvmul (_ bv400 256) x360)) (= x291 (not x177)) x291 (= x382 (= x260 x475)))) (and (=> (and (and (= x22 (not x382)) (= x62 (= x422 x360)) (= x422 (bvmul x444 (_ bv400 256))) x22) (not x382)) (and (=> (and (and (= (bvmul (_ bv400 256) x260) x152) (= x490 (not x62)) x490 (= (= x152 x360) x140)) (not x62)) (and (=> x140 x199) (=> (and (and (= x442 x529) (= false x529) (= x72 (not x140)) x72 (= x255 x298) (= (_ bv0 256) x298)) (not x140)) x279))) (=> x62 x39))) (=> (and x382 (and x382 (= x255 x259) (= x131 x442) (= (bvmul x444 (_ bv400 256)) x259))) x279))))))))))) (=> (and (and (= x36 x255) (= x131 x442) x396 (= (bvmul x260 (_ bv500 256)) x36)) x396) x279))) (=> x1 x51))) (=> x162 x307))) (=> (and x23 (and (= (bvmul (_ bv10 256) x444) x330) (= x442 x131) (= x330 x255) x23)) x279))) (=> (and (and x284 (= x389 x255) (= (bvmul (_ bv10 256) x260) x389) (= x442 x131)) x284) x279))))))))))))) (=> x407 x302))) (=> (and x552 (and (= (bvmul (_ bv2 256) x444) x204) (= x255 x204) (= x442 x131) x552)) x279))) (=> (and x550 (and (= x465 (bvmul (_ bv2 256) x260)) (= x131 x442) x550 (= x465 x255))) x279))))))))) x547))
(assert (not x547))
(assert (= x326 (and x575 x42)))
(assert (= (and x448 x14) x41))
(assert (= (x43 (_ bv2685885107 256)) (x402 (_ bv2685885107 256))))
(assert (= (and x559 x407) x93))
(assert (= (and x343 x570) x87))
(assert (= x303 (=> (and (and (= x536 x160) (= x443 (bvudiv x391 (_ bv400 256))) (= x148 x443)) (and x468 (= x250 false) (= x325 (_ bv400 256)))) x548)))
(assert (= (and x427 x403) x334))
(assert (x344 x5))
(assert (= x369 (=> (and (and (= (_ bv500 256) x172) (= x118 false) x566) (and (= (bvudiv x356 (_ bv500 256)) x100) (= x132 x254) (= x183 x100))) x458)))
(assert (= x199 (=> (and (and (= x442 x131) (= (bvudiv x444 (_ bv400 256)) x147) (= x147 x255)) (and (= x63 false) (= x186 (_ bv400 256)) x140)) x279)))
(assert (= (x146 (x43 x5)) x5))
(assert (= x434 (and x145 (not x550))))
(assert (= x331 (and x114 x140)))
(assert (= (and (not x177) x367) x64))
(assert (= (and x359 x513) x44))
(assert (= x226 (and x283 x35)))
(assert (= (=> (and (and (= x131 x442) (= x524 (bvudiv x444 (_ bv2 256))) (= x524 x255)) (and (= (_ bv2 256) x206) x32 (= false x6))) x279) x425))
(assert (= (and (not x42) x575) x452))
(assert (= x50 (and x296 x585)))
(assert (= (x43 (_ bv1461501637330902918203684832716283019655932542975 256)) (x402 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= x517 (and x263 (not x95))))
(assert (= (and x522 x577) x33))
(assert (= x83 (=> (and (and (= (_ bv10 256) x594) (= false x266) x173) (and (= x183 x99) (= x132 x254) (= (bvudiv x271 (_ bv10 256)) x99))) x458)))
(assert (= (and (not x181) x285) x580))
(assert (=> (bvule x5 (_ bv10000 256)) (= (x402 x5) (x43 x5))))
(assert (= x522 (and (not x276) x429)))
(assert (= (=> (and (and (= x506 x148) (= (bvudiv x391 (_ bv2 256)) x506) (= x536 x160)) (and (= (_ bv2 256) x583) (= false x236) x24)) x548) x412))
(assert (= x307 (=> (and (and x162 (= x224 false) (= (_ bv10 256) x549)) (and (= x442 x131) (= x255 x90) (= x90 (bvudiv x260 (_ bv10 256))))) x279)))
(assert (= (and x239 x497) x361))
(assert (= (and x40 (not x468)) x253))
(assert (= (and x101 x150) x312))
(assert (= x251 (and x49 x61)))
(assert (= x188 (and x400 x431)))
(assert (= (x146 (x402 (_ bv1461501637330902918203684832716283019655932542975 256))) (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (and x1 x69) x216))
(assert (= (and (not x173) x571) x514))
(assert (= (and x110 (not x390)) x370))
(assert (= x439 (and x382 x64)))
(assert (= x213 (and x304 x80)))
(assert (= x40 (and (not x398) x452)))
(assert (= x108 (and x395 x151)))
(assert (= (_ bv2685885107 256) (x146 (x402 (_ bv2685885107 256)))))
(assert (= x279 (=> (and (and x442 (= x255 x38)) (and (not (= (_ bv149895259 256) x347)) (= x57 x106) (= x18 (not (= (_ bv0 256) x106))) (not (= x347 (_ bv1245370514 256))) (= x178 x391) (= x534 (bvmul x391 x349)) (= (bvule x534 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x392) (= (= x391 (_ bv0 256)) x483) (= (_ bv2685885107 256) x347) (= x358 (x215 (x43 x5))) (bvult (_ bv0 256) x358) (= x155 (or x483 x340)) (= x349 x581) (= (= x349 (_ bv0 256)) x340) (= x536 (and x18 x392)) (= x38 x471))) (and (=> (and (and x7 (= x359 (= x391 x106)) (= x7 (not x155))) (not x155)) (and (=> (and (and x449 (= x449 (not x359)) (= x489 (= x106 x349))) (not x359)) (and (=> (and (and x107 (= (bvmul (_ bv2 256) x106) x46) (= x107 (not x489)) (= (= x46 x391) x304)) (not x489)) (and (=> (and (and (= x537 (not x304)) (= (= x374 x349) x239) (= x374 (bvmul x106 (_ bv2 256))) x537) (not x304)) (and (=> (and (and (= x565 (bvmul x391 (_ bv2 256))) (= (not x239) x362) x362 (= (= x565 x106) x461)) (not x239)) (and (=> (and (and (= x564 (bvmul (_ bv2 256) x349)) x397 (= (= x564 x106) x24) (= x397 (not x461))) (not x461)) (and (=> x24 x412) (=> (and (and (= (= x391 x249) x390) (= (bvmul (_ bv3 256) x106) x249) x117 (= x117 (not x24))) (not x24)) (and (=> (and (and (= x160 x536) x390 (= x371 (bvmul x349 (_ bv3 256))) (= x371 x148)) x390) x548) (=> (and (not x390) (and (= (bvmul (_ bv3 256) x106) x592) x424 (= x424 (not x390)) (= x542 (= x592 x349)))) (and (=> (and x542 (and (= x536 x160) (= x148 x111) x542 (= (bvmul (_ bv3 256) x391) x111))) x548) (=> (and (not x542) (and (= x555 (= x106 x320)) (= x320 (bvmul (_ bv3 256) x391)) (= (not x542) x486) x486)) (and (=> (and (and (= x136 (= x106 x313)) (= x464 (not x555)) (= x313 (bvmul x349 (_ bv3 256))) x464) (not x555)) (and (=> (and (and (= x561 (bvmul (_ bv10 256) x106)) x124 (= (not x136) x124) (= (= x391 x561) x582)) (not x136)) (and (=> (and x582 (and (= (bvmul (_ bv10 256) x349) x553) (= x536 x160) x582 (= x553 x148))) x548) (=> (and (and (= (= x349 x556) x37) (= x556 (bvmul x106 (_ bv10 256))) x498 (= x498 (not x582))) (not x582)) (and (=> (and x37 (and (= (bvmul x391 (_ bv10 256)) x560) x37 (= x536 x160) (= x148 x560))) x548) (=> (and (and (= x4 (bvmul x391 (_ bv10 256))) (= x495 (not x37)) x495 (= (= x106 x4) x393)) (not x37)) (and (=> x393 x297) (=> (and (not x393) (and x588 (= x588 (not x393)) (= (= x106 x240) x150) (= x240 (bvmul x349 (_ bv10 256))))) (and (=> x150 x317) (=> (and (and (= x181 (= x376 x391)) (= (not x150) x290) x290 (= x376 (bvmul x106 (_ bv500 256)))) (not x150)) (and (=> (and (not x181) (and x161 (= (= x157 x349) x67) (= (bvmul (_ bv500 256) x106) x157) (= x161 (not x181)))) (and (=> (and (and (= x341 (not x67)) x341 (= x530 (bvmul x391 (_ bv500 256))) (= x17 (= x106 x530))) (not x67)) (and (=> (and (and x242 (= (= x92 x106) x472) (= (not x17) x242) (= x92 (bvmul x349 (_ bv500 256)))) (not x17)) (and (=> x472 x214) (=> (and (not x472) (and (= x585 (= x241 x391)) (= (bvmul x106 (_ bv400 256)) x241) (= x432 (not x472)) x432)) (and (=> (and (and (= x505 (bvmul x106 (_ bv400 256))) (= (not x585) x354) x354 (= (= x505 x349) x42)) (not x585)) (and (=> (and (and (= (bvmul (_ bv400 256) x391) x187) (= (not x42) x366) x366 (= (= x106 x187) x398)) (not x42)) (and (=> x398 x314) (=> (and (and (= x418 (bvmul x349 (_ bv400 256))) (= (= x106 x418) x468) (= (not x398) x415) x415) (not x398)) (and (=> (and (and (= x305 x148) (= (not x468) x430) (= false x47) (= x47 x160) x430 (= (_ bv0 256) x305)) (not x468)) x548) (=> x468 x303))))) (=> (and x42 (and x42 (= (bvmul (_ bv400 256) x391) x420) (= x420 x148) (= x536 x160))) x548))) (=> (and (and x585 (= x316 (bvmul (_ bv400 256) x349)) (= x148 x316) (= x536 x160)) x585) x548))))) (=> x17 x11))) (=> (and (and (= x445 (bvmul x391 (_ bv500 256))) x67 (= x445 x148) (= x160 x536)) x67) x548))) (=> (and x181 (and (= x15 (bvmul (_ bv500 256) x349)) (= x160 x536) (= x148 x15) x181)) x548))))))))))) (=> x136 x574))) (=> x555 x321))))))))) (=> x461 x139))) (=> (and x239 (and (= x148 x225) (= (bvmul x391 (_ bv2 256)) x225) x239 (= x536 x160))) x548))) (=> (and x304 (and (= x365 x148) (= x160 x536) x304 (= (bvmul x349 (_ bv2 256)) x365))) x548))) (=> (and x489 (and (= x536 x160) (= x148 x391) x489)) x548))) (=> (and x359 (and (= x536 x160) x359 (= x148 x349))) x548))) (=> (and (and (= (_ bv0 256) x166) (= x148 x166) (= x536 x160) x155) x155) x548)))))
(assert (= (and x88 x535) x526))
(assert (= (and (not x155) x337) x513))
(assert (= (and x456 x357) x476))
(assert (= x481 (and (not x37) x3)))
(assert (= (and x491 x555) x208))
(assert (= (=> (and (and (= x275 (bvudiv x271 (_ bv400 256))) (= x254 x132) (= x275 x183)) (and (= false x167) (= x364 (_ bv400 256)) x95)) x458) x315))
(assert (= x114 (and x74 (not x62))))
(assert (= x70 (and x452 x398)))
(assert (= x548 (=> (and (and x160 (= x148 x528)) (and (= x356 x178) (= x519 (not (= x245 (_ bv0 256)))) (= x528 x159) (= (bvmul x356 x271) x10) (= (= x271 (_ bv0 256)) x128) (= (x215 (x43 x5)) x89) (= x403 (or x12 x128)) (= x245 x57) (= x254 (and x65 x519)) (= x496 x271) (bvult (_ bv0 256) x89) (= (_ bv2685885107 256) x558) (= x12 (= (_ bv0 256) x356)) (= x65 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x10)) (not (= x558 (_ bv1245370514 256))) (not (= (_ bv149895259 256) x558)))) (and (=> (and (and (= x132 x254) x403 (= x521 x183) (= x521 (_ bv0 256))) x403) x458) (=> (and (not x403) (and x195 (= (not x403) x195) (= (= x356 x245) x591))) (and (=> (and (and x591 (= x183 x271) (= x132 x254)) x591) x458) (=> (and (not x591) (and (= x252 (= x245 x271)) (= x217 (not x591)) x217)) (and (=> (and (not x252) (and (= x502 (bvmul x245 (_ bv2 256))) (= x144 (= x356 x502)) (= x543 (not x252)) x543)) (and (=> (and x144 (and (= x254 x132) x144 (= x335 x183) (= x335 (bvmul (_ bv2 256) x271)))) x458) (=> (and (not x144) (and x130 (= (bvmul (_ bv2 256) x245) x26) (= (= x271 x26) x323) (= (not x144) x130))) (and (=> (and x323 (and (= x183 x414) x323 (= x254 x132) (= x414 (bvmul x356 (_ bv2 256))))) x458) (=> (and (and (= x134 (not x323)) (= (= x245 x474) x460) x134 (= (bvmul (_ bv2 256) x356) x474)) (not x323)) (and (=> (and (and (= (bvmul (_ bv2 256) x271) x91) x404 (= x404 (not x460)) (= x551 (= x91 x245))) (not x460)) (and (=> x551 x515) (=> (and (and (= x440 (bvmul (_ bv3 256) x245)) (= x400 (= x440 x356)) x288 (= x288 (not x551))) (not x551)) (and (=> (and (and (= x183 x170) (= x132 x254) (= (bvmul x271 (_ bv3 256)) x170) x400) x400) x458) (=> (and (and (= (not x400) x511) (= x343 (= x271 x210)) (= x210 (bvmul x245 (_ bv3 256))) x511) (not x400)) (and (=> (and (not x343) (and (= (= x205 x245) x333) x509 (= x509 (not x343)) (= x205 (bvmul x356 (_ bv3 256))))) (and (=> x333 x184) (=> (and (not x333) (and (= x294 (= x245 x34)) x113 (= (not x333) x113) (= x34 (bvmul (_ bv3 256) x271)))) (and (=> (and (and (= x357 (= x329 x356)) (= x572 (not x294)) (= (bvmul (_ bv10 256) x245) x329) x572) (not x294)) (and (=> (and x357 (and (= x132 x254) (= (bvmul x271 (_ bv10 256)) x405) (= x405 x183) x357)) x458) (=> (and (not x357) (and x194 (= x227 (bvmul x245 (_ bv10 256))) (= (not x357) x194) (= x545 (= x227 x271)))) (and (=> (and (not x545) (and x268 (= x8 (bvmul x356 (_ bv10 256))) (= (= x245 x8) x173) (= x268 (not x545)))) (and (=> (and (not x173) (and (= (bvmul x271 (_ bv10 256)) x568) x375 (= (not x173) x375) (= x94 (= x568 x245)))) (and (=> (and (and (= (= x356 x209) x121) x353 (= x209 (bvmul x245 (_ bv500 256))) (= x353 (not x94))) (not x94)) (and (=> (and x121 (and (= (bvmul (_ bv500 256) x271) x203) (= x183 x203) x121 (= x254 x132))) x458) (=> (and (not x121) (and (= (not x121) x310) x310 (= (bvmul (_ bv500 256) x245) x229) (= (= x271 x229) x395))) (and (=> (and (and (= (= x267 x245) x346) x562 (= x267 (bvmul x356 (_ bv500 256))) (= (not x395) x562)) (not x395)) (and (=> (and (not x346) (and (= (bvmul (_ bv500 256) x271) x223) (= x406 (not x346)) x406 (= x566 (= x245 x223)))) (and (=> (and (not x566) (and (= x480 (bvmul x245 (_ bv400 256))) (= x61 (= x480 x356)) (= x311 (not x566)) x311)) (and (=> (and (and x61 (= x122 x183) (= x254 x132) (= x122 (bvmul (_ bv400 256) x271))) x61) x458) (=> (and (and (= x269 (not x61)) x269 (= x248 (= x56 x271)) (= (bvmul (_ bv400 256) x245) x56)) (not x61)) (and (=> (and (not x248) (and (= (= x487 x245) x95) (= x493 (not x248)) x493 (= (bvmul (_ bv400 256) x356) x487))) (and (=> (and (not x95) (and (= x235 (bvmul x271 (_ bv400 256))) (= (not x95) x103) (= (= x235 x245) x182) x103)) (and (=> (and (and x169 (= false x105) (= x183 x31) (= x169 (not x182)) (= x31 (_ bv0 256)) (= x105 x132)) (not x182)) x458) (=> x182 x309))) (=> x95 x315))) (=> (and x248 (and (= x254 x132) (= (bvmul x356 (_ bv400 256)) x175) (= x183 x175) x248)) x458))))) (=> x566 x369))) (=> x346 x504))) (=> (and x395 (and (= x193 (bvmul x356 (_ bv500 256))) x395 (= x193 x183) (= x132 x254))) x458))))) (=> x94 x60))) (=> x173 x83))) (=> (and (and (= x183 x510) (= (bvmul x356 (_ bv10 256)) x510) (= x254 x132) x545) x545) x458))))) (=> x294 x587))))) (=> (and x343 (and x343 (= (bvmul (_ bv3 256) x356) x164) (= x183 x164) (= x132 x254))) x458))))))) (=> x460 x13))))))) (=> (and (and (= x254 x132) x252 (= x183 x356)) x252) x458)))))))))
(assert (= (and x533 (not x162)) x69))
(assert (= (and (not x140) x114) x584))
(assert (= (and x554 (not x248)) x263))
(assert (= x456 (and (not x294) x133)))
(assert (= x115 (and (not x346) x437)))
(assert (= (_ bv149895259 256) (x146 (x402 (_ bv149895259 256)))))
(assert (= x559 (and (not x552) x434)))
(assert (= (and x162 x533) x84))
(assert (= (=> (and (and (= x536 x160) (= x148 x286) (= (bvudiv x391 (_ bv3 256)) x286)) (and (= (_ bv3 256) x79) (= false x234) x136)) x548) x574))
(assert (= x21 (=> (and (and (= x125 x255) (= x125 (bvudiv x260 (_ bv500 256))) (= x442 x131)) (and x563 (= x520 false) (= x54 (_ bv500 256)))) x279)))
(assert (= (and x456 (not x357)) x378))
(assert (= x264 (and x514 (not x94))))
(assert (= x554 (and x49 (not x61))))
(assert (= (and x591 x447) x76))
(assert (= x463 (and x283 (not x35))))
(assert (= (and x182 x517) x85))
(assert (= (and x323 x126) x20))
(assert (= x75 (and x401 x333)))
(assert (= (and x98 (not x23)) x533))
(assert (= (=> (and (and (= x123 (_ bv2 256)) (= x327 false) x551) (and (= x132 x254) (= x261 x183) (= (bvudiv x356 (_ bv2 256)) x261))) x458) x515))
(assert (= x145 (and x535 (not x88))))
(assert (= x352 (and x580 x67)))
(assert (= (=> (and (and (= x433 (bvudiv x391 (_ bv500 256))) (= x433 x148) (= x160 x536)) (and (= x9 (_ bv500 256)) (= x222 false) x472)) x548) x214))
(assert (= x416 (and x370 x542)))
(assert (= x133 (and (not x333) x401)))
(assert (= x567 (and (not x179) x82)))
(assert (= (and (not x14) x448) x367))
(assert (= (and x472 x499) x372))
(assert (= x484 (and x393 x481)))
(assert (= (=> (and (and (= false x436) x94 (= (_ bv10 256) x410)) (and (= x256 x183) (= x254 x132) (= (bvudiv x356 (_ bv10 256)) x256))) x458) x60))
(assert (= (and (not x284) x463) x98))
(assert (= x485 (and (not x555) x491)))
(assert (= x579 (and x337 x155)))
(assert (= x500 (and x557 x17)))
(assert (= x448 (and (not x563) x567)))
(assert (= (and (not x17) x557) x499))
(assert (= (and (not x270) x508) x119))
(assert (= (x402 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x43 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= x337 (or x93 x216 x322 x466 x226 x531 x439 x68 x342 x84 x246 x318 x411 x538 x289 x33 x171 x544 x41 x135 x331 x527 x526 x584)))
(assert (= (x402 (_ bv1245370514 256)) (x43 (_ bv1245370514 256))))
(assert (= (and x427 (not x403)) x447))
(assert (= x283 (and (not x45) x295)))
(assert (= (=> (and (and (= (_ bv10 256) x238) x150 (= x141 false)) (and (= (bvudiv x391 (_ bv10 256)) x109) (= x109 x148) (= x536 x160))) x548) x317))
(assert (= (and x550 x145) x171))
(assert (= x544 (and x567 x563)))
(assert (= (and x332 (not x461)) x218))
(check-sat)
(exit)