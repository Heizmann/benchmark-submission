(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x263 0)) (((x300 (x97 x263) (x336 x263) (x56 x263) (x332 x263) (x103 x263) (x165 (_ BitVec 256))) (x68 (x222 (_ BitVec 256))) (x247 (x157 x263) (x171 (_ BitVec 256))) (x209 (x35 x263) (x81 x263) (x174 (_ BitVec 256))))))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x234 () x263)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x284 () x263)
(declare-fun x282 (x263) (_ BitVec 256))
(declare-fun x326 () (_ BitVec 256))
(declare-fun x224 (x263) (_ BitVec 256))
(declare-fun x262 () Bool)
(declare-fun x279 () x263)
(declare-fun x292 () x263)
(declare-fun x106 () Bool)
(declare-fun x28 () x263)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x85 () Bool)
(declare-fun x79 () x263)
(declare-fun x362 () x263)
(declare-fun x22 () x263)
(declare-fun x244 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x358 () Bool)
(declare-fun x8 () Bool)
(declare-fun x137 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x156 () x263)
(declare-fun x367 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x64 () x263)
(declare-fun x37 () Bool)
(declare-fun x313 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x261 () Bool)
(declare-fun x353 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x359 () (_ BitVec 256))
(declare-fun x52 (x263) (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x311 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x15 () x263)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x364 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x163 () Bool)
(declare-fun x93 () x263)
(declare-fun x41 () Bool)
(declare-fun x101 () Bool)
(declare-fun x329 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x134 () x263)
(declare-fun x315 () x263)
(declare-fun x158 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x314 () (_ BitVec 256))
(declare-fun x310 () Bool)
(declare-fun x316 () x263)
(declare-fun x355 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x115 () Bool)
(declare-fun x337 () x263)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x307 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x280 (x263) (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x193 () x263)
(declare-fun x180 () Bool)
(declare-fun x109 () x263)
(declare-fun x323 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x48 () Bool)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x352 () (_ BitVec 256))
(declare-fun x120 () Bool)
(declare-fun x88 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x354 () Bool)
(declare-fun x277 () (_ BitVec 256))
(declare-fun x309 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x112 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x36 () x263)
(declare-fun x167 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x86 () Bool)
(declare-fun x287 () x263)
(declare-fun x102 () x263)
(declare-fun x348 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x17 () x263)
(declare-fun x170 () Bool)
(declare-fun x40 () Bool)
(declare-fun x153 () x263)
(declare-fun x248 () Bool)
(declare-fun x214 () x263)
(declare-fun x249 () (_ BitVec 256))
(declare-fun x94 (x263) (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x202 () Bool)
(declare-fun x343 () Bool)
(declare-fun x233 () Bool)
(declare-fun x239 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x344 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x306 () Bool)
(declare-fun x312 () (_ BitVec 256))
(declare-fun x365 () Bool)
(declare-fun x339 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x189 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x44 () Bool)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x3 () x263)
(declare-fun x66 () x263)
(declare-fun x110 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x186 () (_ BitVec 256))
(declare-fun x235 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x304 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x335 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x218 () x263)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x259 () Bool)
(declare-fun x283 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x144 () Bool)
(declare-fun x80 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x327 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x10 () x263)
(declare-fun x295 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x361 () Bool)
(declare-fun x285 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x322 () x263)
(declare-fun x305 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x43 () x263)
(declare-fun x113 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x237 () (_ BitVec 256))
(declare-fun x216 () x263)
(declare-fun x333 () x263)
(declare-fun x299 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x308 ((_ BitVec 256)) x263)
(declare-fun x199 () (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x347 () x263)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x319 () (_ BitVec 256))
(declare-fun x187 () Bool)
(declare-fun x330 () Bool)
(declare-fun x149 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x366 () (_ BitVec 256))
(declare-fun x363 () (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x201 () x263)
(declare-fun x58 () Bool)
(declare-fun x260 (x263) (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x129 () Bool)
(declare-fun x325 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x118 () x263)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x340 () (_ BitVec 256))
(declare-fun x276 () Bool)
(declare-fun x117 () Bool)
(declare-fun x320 () Bool)
(declare-fun x162 () (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x20 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x191 (x263) (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x360 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x148 (x263) (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x350 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x357 () Bool)
(declare-fun x122 () x263)
(declare-fun x331 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x317 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x346 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x328 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x96 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x303 () x263)
(declare-fun x321 () (_ BitVec 256))
(declare-fun x39 () x263)
(declare-fun x293 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x297 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x50 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x324 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x21 () x263)
(declare-fun x182 () x263)
(declare-fun x266 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x242 () Bool)
(declare-fun x121 () Bool)
(declare-fun x245 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x188 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x334 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x351 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x221 () Bool)
(declare-fun x338 () Bool)
(declare-fun x356 () (_ BitVec 256))
(declare-fun x42 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x240 () Bool)
(declare-fun x345 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x160 () (_ BitVec 256))
(declare-fun x140 () x263)
(declare-fun x62 () x263)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x67 () Bool)
(declare-fun x267 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(define-fun x252 ((x263 x263) (x349 (_ BitVec 256))) x263 (ite ((_ is x247) x263) (x247 (x157 x263) (bvadd (x171 x263) x349)) (ite ((_ is x300) x263) (x300 (x97 x263) (x336 x263) (x56 x263) (x332 x263) (x103 x263) (bvadd (x165 x263) x349)) (ite ((_ is x209) x263) (x209 (x35 x263) (x81 x263) (bvadd x349 (x174 x263))) (x68 (bvadd (x222 x263) x349))))))
(define-fun x130 ((x18 (_ BitVec 256)) (x203 (_ BitVec 256))) Bool (= x18 (bvudiv (bvmul x203 x18) x203)))
(define-fun x5 ((x18 (_ BitVec 256)) (x203 (_ BitVec 256))) Bool (= x18 (bvsdiv (bvmul x203 x18) x203)))
(define-fun x302 ((x18 (_ BitVec 256)) (x203 (_ BitVec 256))) Bool (= x18 (bvsdiv (bvmul x203 x18) x203)))
(define-fun x152 ((x198 (_ BitVec 256))) (_ BitVec 256) (x189 x198))
(define-fun x206 ((x198 (_ BitVec 256))) (_ BitVec 256) (ite (= x198 (_ bv160 256)) x119 (x235 x198)))
(define-fun x38 ((x198 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv192 256) x198) x137 (x206 x198)))
(define-fun x51 ((x198 (_ BitVec 256))) (_ BitVec 256) (ite (= x198 (_ bv212 256)) x360 (x38 x198)))
(define-fun x215 ((x198 (_ BitVec 256))) (_ BitVec 256) (ite (= x198 (_ bv128 256)) (_ bv84 256) (x51 x198)))
(define-fun x268 ((x198 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv244 256) x198) x87 (x215 x198)))
(define-fun x342 ((x198 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvugt (bvadd x272 (_ bv276 256)) x198) (bvule (_ bv276 256) x198)) (x189 (bvadd (bvadd x198 (bvneg (_ bv276 256))) x353)) (x268 x198)))
(define-fun x73 ((x198 (_ BitVec 256))) (_ BitVec 256) (ite (= x253 x198) (_ bv0 256) (x342 x198)))
(define-fun x289 ((x198 (_ BitVec 256))) (_ BitVec 256) (ite (= x9 x198) (_ bv31029940780905195875731109435447583271917780249877154904291146747782681853952 256) (x73 x198)))
(define-fun x194 ((x198 (_ BitVec 256))) (_ BitVec 256) (ite (= x198 x340) x46 (x289 x198)))
(define-fun x77 ((x198 (_ BitVec 256))) (_ BitVec 256) (ite (= x324 x198) x75 (x194 x198)))
(define-fun x142 ((x198 x263)) (_ BitVec 256) (ite (= x198 x21) x178 (x191 x198)))
(define-fun x341 ((x145 (_ BitVec 256))) Bool (=> (and (not (= (_ bv1245659826 256) x145)) (not (= (_ bv31029940780905195875731109435447583271917780249877154904291146747782681853952 256) x145)) (not (= x145 (_ bv2544733239 256))) (bvult (_ bv10000 256) x145) (not (= (_ bv1451294997 256) x145)) (not (= x145 (_ bv292666793 256))) (not (= (_ bv961581905 256) x145)) (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x145)) (not (= (_ bv1150964472 256) x145)) (not (= (_ bv475336206 256) x145)) (not (= x145 (_ bv464684736 256))) (not (= (_ bv752823349 256) x145)) (not (= (_ bv18446744073709551615 256) x145)) (not (= x145 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (= (_ bv832554005 256) x145)) (not (= x145 (_ bv941162192 256))) (not (= (_ bv1315048582 256) x145)) (not (= x145 (_ bv2494227977 256))) (not (= (_ bv2510660263 256) x145)) (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256) x145)) (not (= (_ bv910484757 256) x145))) (not ((_ is x68) (x308 x145)))))
(assert (= (x308 (_ bv2510660263 256)) (x68 (_ bv2510660263 256))))
(assert (=> (bvule x164 (_ bv10000 256)) (= (x68 x164) (x308 x164))))
(assert (= (x280 (x308 x258)) x258))
(assert (=> (bvuge (_ bv10000 256) x285) (= (x308 x285) (x68 x285))))
(assert (= (x280 (x308 x159)) x159))
(assert (=> (bvule x131 (_ bv10000 256)) (= (x68 x131) (x308 x131))))
(assert (=> (bvuge (_ bv10000 256) x34) (= (x68 x34) (x308 x34))))
(assert (= x110 (and x297 x262)))
(assert (=> (bvule x319 (_ bv10000 256)) (= (x308 x319) (x68 x319))))
(assert (= (x308 (_ bv2494227977 256)) (x68 (_ bv2494227977 256))))
(assert (= (x280 (x252 x201 (_ bv1 256))) (bvadd (_ bv1 256) (x280 x201))))
(assert (= (=> (and (and x144 (and (not (= x82 (_ bv941162192 256))) (= x149 x219) (= x96 x84) (not (= (_ bv961581905 256) x82)) (not (bvult x82 (_ bv832554005 256))) (not (bvult x219 (_ bv4 256))) (= (bvadd x219 (bvneg (_ bv4 256))) x179) (= x313 (bvslt x179 (_ bv64 256))) (bvugt (_ bv1245659826 256) x82) (not (= (_ bv832554005 256) x82)) (not (bvult x82 (_ bv475336206 256))) (= x82 (_ bv1150964472 256)) (= (x148 (x308 x113)) x111) (not (= x82 (_ bv910484757 256))) (= x70 x230) (= (_ bv31029940780905195875731109435447583271917780249877154904291146747782681853952 256) x355) (= (_ bv68 256) x219) (bvult (_ bv0 256) x111))) (and (= (x209 (x308 x265) x109 (_ bv0 256)) x62) (= (x308 x132) x79) (= (bvadd x340 (_ bv32 256)) x324) (bvule (_ bv0 256) x16) (= (bvadd x328 (bvneg x9)) x149) (= (bvor x16 x33) x228) (= (bvand (_ bv255 256) x34) x65) (not (= (_ bv0 256) x344)) (= x328 (bvadd (_ bv64 256) x340)) (= (bvshl (_ bv1 256) x65) x33) (bvule x16 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x144 (= x113 x250)) (= x340 (bvadd x9 (_ bv4 256))) (= x344 (x148 (x308 x250))) (= x16 (x260 x62)) (= x265 (bvlshr x34 (_ bv8 256))) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x32) x250))) (and (=> (and (not x313) (and (= (bvand x96 (_ bv1461501637330902918203684832716283019655932542975 256)) x74) (= x84 x100) (= (= x74 x96) x147))) (and (=> (not x147) x242) (=> (and x147 (and (= (= (_ bv2 256) x229) x304) (bvuge x229 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x229) (= x230 x363))) (and (=> x304 x242) (=> (and (and (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x84) x269) (= (= (_ bv0 256) x269) x361)) (not x304)) (and (=> x361 x242) (=> (and (and (= x168 (_ bv0 256)) (= x121 (bvugt x230 (_ bv0 256)))) (not x361)) (and (=> (not x121) x242) (=> (and x121 (= (bvult (_ bv0 256) x195) x187)) (and (=> (not x187) x242) (=> (and x187 (and (= x180 (bvult x270 x325)) (= x270 (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg x230))) (bvule x325 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x325))) (and (=> x180 x242) (=> (and (and (and (= (not (= (_ bv0 256) x126)) x262) (= (bvadd x325 x230) x257) (= x359 (x191 x21)) (= x346 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x84)) (bvuge x359 (_ bv0 256)) (= x126 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x84)) (= x178 (bvadd x230 x359)) (= x334 (_ bv0 256)) (= (x209 (x308 x346) (x68 (_ bv155 256)) (_ bv0 256)) x21) (bvule x359 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (or (and x262 (and (= x318 (x142 x134)) (= x134 (x209 (x308 x212) (x68 (_ bv155 256)) (_ bv0 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x318) (= (bvand x84 (_ bv1461501637330902918203684832716283019655932542975 256)) x212) (bvule (_ bv0 256) x318) (= (= x363 x318) x120))) (and (= x120 x262) (not x262)))) (not x180)) x295))))))))))))) (=> x313 x242))) x320))
(assert (= (x280 (x68 (_ bv2510660263 256))) (_ bv2510660263 256)))
(assert (= (and x115 (not x299)) x310))
(assert (x341 x312))
(assert (=> (bvule x69 (_ bv10000 256)) (= (x68 x69) (x308 x69))))
(assert (x341 (bvlshr x137 (_ bv96 256))))
(assert (= (x280 (x68 (_ bv832554005 256))) (_ bv832554005 256)))
(assert (=> (bvule x159 (_ bv10000 256)) (= (x308 x159) (x68 x159))))
(assert (not x202))
(assert (x341 x211))
(assert (= (x308 (_ bv961581905 256)) (x68 (_ bv961581905 256))))
(assert (= (x68 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x308 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= x116 (or x310 x8)))
(assert (= (x280 (x308 x288)) x288))
(assert (= (x280 (x68 (_ bv1451294997 256))) (_ bv1451294997 256)))
(assert (= (x280 (x308 x312)) x312))
(assert (= x243 (and x44 (not x361))))
(assert (=> (bvule x2 (_ bv10000 256)) (= (x68 x2) (x308 x2))))
(assert (=> (bvuge (_ bv10000 256) x75) (= (x68 x75) (x308 x75))))
(assert (x341 x250))
(assert (= x44 (and x166 (not x304))))
(assert (= (and x147 x236) x166))
(assert (= true x306))
(assert (= x226 (x280 (x308 x226))))
(assert (= (bvlshr x137 (_ bv96 256)) (x280 (x308 (bvlshr x137 (_ bv96 256))))))
(assert (=> (bvule x161 (_ bv10000 256)) (= (x308 x161) (x68 x161))))
(assert (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256) (x280 (x68 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256)))))
(assert (x341 x2))
(assert (= (x68 (_ bv752823349 256)) (x308 (_ bv752823349 256))))
(assert (= x365 (and x180 x221)))
(assert (= (x280 (x252 x287 (_ bv1 256))) (bvadd (_ bv1 256) (x280 x287))))
(assert (= (x280 (x308 x296)) x296))
(assert (x341 x319))
(assert (= x61 (x280 (x308 x61))))
(assert (x341 x265))
(assert (= (x68 (_ bv464684736 256)) (x308 (_ bv464684736 256))))
(assert (= (bvadd (_ bv1 256) (x280 x284)) (x280 (x252 x284 (_ bv1 256)))))
(assert (=> (bvuge (_ bv10000 256) x136) (= (x308 x136) (x68 x136))))
(assert (= x358 (and x243 x121)))
(assert (= (x280 (x308 x69)) x69))
(assert (= (bvadd (_ bv1 256) (x280 x362)) (x280 (x252 x362 (_ bv1 256)))))
(assert (x341 x14))
(assert (x341 x136))
(assert (= (x308 (_ bv475336206 256)) (x68 (_ bv475336206 256))))
(assert (= x105 (and x166 x304)))
(assert (=> (bvuge (_ bv10000 256) x173) (= (x308 x173) (x68 x173))))
(assert (= x233 (=> (= (_ bv1 256) x367) x20)))
(assert (= (x280 (x68 (_ bv18446744073709551615 256))) (_ bv18446744073709551615 256)))
(assert (= (_ bv1315048582 256) (x280 (x68 (_ bv1315048582 256)))))
(assert (= (x280 (x308 x314)) x314))
(assert (= x60 (and (not x144) x338)))
(assert (x341 x345))
(assert (= x115 (and x48 x306)))
(assert (= (x308 (_ bv1451294997 256)) (x68 (_ bv1451294997 256))))
(assert (= (or x42 (and x261 (not x120))) x40))
(assert (= (x280 (x68 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (=> (bvule x211 (_ bv10000 256)) (= (x308 x211) (x68 x211))))
(assert (= (x280 (x308 x83)) x83))
(assert (= (=> (and (and x6 (bvule (_ bv0 256) x199) (not (= x113 x136)) (bvule x150 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x160 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x273 x183) x276 (not (= x83 x113)) (not (= x136 x305)) (bvule (_ bv0 256) x184) (= x321 (_ bv5 256)) (bvult (_ bv0 256) x305) (bvuge (_ bv255 256) x237) (bvule x184 (_ bv255 256)) (bvuge x160 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x136) (bvule (_ bv0 256) x274) (bvule (_ bv0 256) x71) (= x36 (x209 (x308 x226) (x68 (_ bv1 256)) (_ bv0 256))) (= x53 (x52 (x308 x113))) (= (x52 (x308 x136)) x335) (bvule x273 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x209 (x308 x2) x36 (_ bv0 256)) x333) (= x275 (x148 (x308 x83))) (bvule (_ bv0 256) x175) (bvule (_ bv0 256) x143) (bvuge x281 (_ bv0 256)) (bvuge x273 (_ bv0 256)) (= x234 (x252 x333 (_ bv1 256))) (bvuge x150 (_ bv0 256)) x37 (= x150 x46) (= x63 (x94 x234)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x113) (bvuge (_ bv255 256) x139) (= x160 x226) (bvule x143 (_ bv1461501637330902918203684832716283019655932542975 256)) (= false x45) (bvule x1 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x309) (not (= x185 (_ bv2510660263 256))) (not (= x113 x305)) (= (x52 (x308 x305)) x71) (not (= x136 x83)) (= false x240) (bvule (_ bv0 256) x53) (not (= x185 (_ bv2494227977 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x63) (bvugt x275 (_ bv0 256)) (= x225 (x52 (x308 x83))) (bvule x305 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvult (_ bv0 256) x83) (= x239 x63) (bvule x83 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x281) (bvule (_ bv0 256) x237) (bvule x199 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv255 256) x274) (bvule (_ bv0 256) x139) (bvule (_ bv0 256) x366) x290 (= x129 false) (= false x106) (= x177 (_ bv1451294997 256)) (bvule (_ bv0 256) x225) (bvule (_ bv0 256) x1) (bvule x175 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv255 256) x366) (bvult (_ bv0 256) x113) (= (bvult (_ bv0 256) (x148 (x308 x113))) x276) (bvule (_ bv0 256) x335) (not (bvugt (_ bv2494227977 256) x185)) (not (= x305 x83)) (bvuge (_ bv255 256) x251) (bvugt x136 (_ bv0 256)) (= x6 (bvult (_ bv0 256) (x148 (x308 x136)))) (bvule (_ bv0 256) x309) (= x2 x254) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x226) (= (bvugt (x148 (x308 x305)) (_ bv0 256)) x290) (bvuge x251 (_ bv0 256)) (= x37 (bvugt (x148 (x308 x83)) (_ bv0 256))) (= (_ bv2544733239 256) x185) (bvule (_ bv0 256) x63)) (and (and (and (and (and (= x32 x123) (= (x209 (x308 x32) (x68 (_ bv1 256)) (_ bv0 256)) x28) (= (_ bv0 256) x238) (bvult (_ bv0 256) x99) (= x88 x162) (bvule x98 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x119 x34) (= x327 (_ bv1451294997 256)) (= x253 (bvadd x272 (_ bv276 256))) (bvule (_ bv0 256) x124) (not (bvugt (_ bv4 256) x146)) (= x46 x96) (= x223 x32) (= x101 (and x169 x112)) x213 (= (x224 x201) x244) (not (bvult x146 x356)) (bvuge x181 (_ bv0 256)) (= x176 (bvadd x249 (_ bv31 256))) (not (= (_ bv752823349 256) x327)) (= x288 x241) (bvugt x244 (_ bv0 256)) (= (bvugt x271 (_ bv0 256)) x48) (= x9 (bvadd x47 (_ bv244 256))) (not (= (_ bv292666793 256) x327)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x124) (not (bvugt x87 (_ bv18446744073709551615 256))) (= (x282 x315) x98) (= x271 (x73 (_ bv244 256))) (bvule (_ bv0 256) x245) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x181) (not (bvugt x19 x98)) (= (x94 x287) x245) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x132) (= (x224 x201) x132) (bvslt (_ bv163 256) x146) (= x181 (x260 x292)) (= x360 x75) (= x323 x91) (bvule x351 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x288 x291) (= x315 (x252 x287 (_ bv1 256))) (= x353 (bvadd (_ bv32 256) x249)) (= x287 (x252 x201 (_ bv1 256))) (not (= (_ bv464684736 256) x327)) (= (x209 (x308 x288) x28 (_ bv0 256)) x201) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x96) (= x54 (bvmul x87 (_ bv32 256))) (not x210) (not (= (_ bv1315048582 256) x327)) (= x135 x19) (= x156 (x300 (x68 (_ bv84 256)) (x68 (_ bv8244 256)) (x308 x34) (x308 (bvlshr x137 (_ bv96 256))) (x308 x75) (_ bv0 256))) (= x95 (bvadd x146 (bvneg (_ bv4 256)))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x200) (bvuge x244 (_ bv0 256)) (= x131 (bvlshr x34 (_ bv8 256))) (bvule (_ bv0 256) x132) (= x7 (bvshl (_ bv1 256) x317)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x244) (= (bvadd x205 (_ bv4 256)) x249) (= (bvmul x87 (_ bv32 256)) x350) (= x109 (x252 x201 (_ bv3 256))) (= (bvult x19 x245) x210) (= (_ bv0 256) x88) (bvule x245 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvmul (_ bv32 256) x87) x272) (= x259 (= (_ bv0 256) x151)) (bvule x32 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x98 (_ bv0 256)) (bvule (_ bv0 256) x200) (= x364 x31) (bvule (_ bv0 256) x351) (= x213 (or x167 x101)) x259 (= x75 x70) (bvslt x176 x146) (= x137 (bvshl x46 (_ bv96 256))) (bvugt (_ bv2494227977 256) x327) (= x356 (bvadd x350 x353)) (= (x209 (x308 x131) x109 (_ bv0 256)) x292) (= x87 (x189 x249)) (= x205 x26) (= x47 (bvadd (_ bv32 256) x54)) (= x31 x351) (= (bvand x181 x7) x151) (= x317 (bvand (_ bv255 256) x119)) (= (= (_ bv0 256) x323) x169) (= (x148 (x308 x83)) x99) (not (= x124 (_ bv2 256))) (not (bvugt x26 (_ bv18446744073709551615 256))) (bvuge x96 (_ bv0 256)) (not (bvsgt (_ bv160 256) x95))) (and (= x331 x89) (= x23 (= (_ bv0 256) x331)) (bvugt (_ bv2494227977 256) x352) (= x347 (x252 x193 (_ bv2 256))) (not (= x352 (_ bv752823349 256))) (bvule (_ bv0 256) x232) (= (and x23 x50) x112) (not (= (_ bv464684736 256) x352)) (not (= x352 (_ bv292666793 256))) (= (x282 x347) x232) (bvule x232 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x319 x160) (bvule x319 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x173 x254) (= x227 (_ bv0 256)) (bvugt x125 (_ bv0 256)) (= x279 (x209 (x308 x319) (x68 (_ bv1 256)) (_ bv0 256))) (= x352 (_ bv1315048582 256)) (= (x148 (x308 x83)) x125) (= (x209 (x308 x173) x279 (_ bv0 256)) x193) (= x91 x232))) (and (not (bvult x301 (_ bv2494227977 256))) (= (x148 (x308 x83)) x207) (= x89 x76) (= x72 x160) (= (x252 x362 (_ bv1 256)) x118) (= x50 (= x278 (_ bv0 256))) (bvult (_ bv0 256) x207) (= (_ bv0 256) x104) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x72) (= (x94 x118) x76) (= x254 x164) (= x362 (x209 (x308 x164) x140 (_ bv0 256))) (not (= x301 (_ bv2494227977 256))) (not (= x301 (_ bv2510660263 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x76) (= x278 x158) (= (_ bv2544733239 256) x301) (bvuge x76 (_ bv0 256)) (= x140 (x209 (x308 x72) (x68 (_ bv1 256)) (_ bv0 256))))) (and (= x314 x160) (= x255 (x148 (x308 x83))) (= (x224 x122) x204) (= x256 x192) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x204) (bvuge x204 (_ bv0 256)) (= (_ bv2510660263 256) x55) (= (x209 (x308 x314) (x68 (_ bv1 256)) (_ bv0 256)) x153) (= x167 (bvugt x256 x197)) (= x122 (x209 (x308 x141) x153 (_ bv0 256))) (= x204 x158) (not (= (_ bv2494227977 256) x55)) (= x254 x141) (not (bvugt (_ bv2494227977 256) x55)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x314) (bvult (_ bv0 256) x255))) (and (bvule x69 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x27) (= x59 (x148 (x308 x83))) (= (x252 x3 (_ bv2 256)) x316) (not (= (_ bv292666793 256) x29)) (= x27 (x282 x316)) (= x264 x254) (not (= x29 (_ bv464684736 256))) (bvule (_ bv0 256) x27) (= x66 (x209 (x308 x69) (x68 (_ bv1 256)) (_ bv0 256))) (= x3 (x209 (x308 x264) x66 (_ bv0 256))) (not (= x29 (_ bv752823349 256))) (bvult (_ bv0 256) x59) (= x192 x27) (bvugt (_ bv2494227977 256) x29) (= x69 x160) (= x239 x197) (= (_ bv1315048582 256) x29)))) (and (=> (and (and (and (= (x73 (_ bv244 256)) x283) (= x285 (x73 (_ bv276 256))) (= (bvugt x285 (x280 x156)) x299) (bvugt x283 (_ bv0 256))) (or (and (and (= x10 x17) (= x17 (x209 x156 (x308 x285) (_ bv0 256)))) x299) (and (not x299) (and (= x15 x10) (= x15 (x209 (x308 x285) x156 (_ bv0 256))))))) x48) x80) (=> (and (not x48) (= x156 x79)) x320))) x202))
(assert (= (x280 (x68 (_ bv1245659826 256))) (_ bv1245659826 256)))
(assert (=> (bvule x83 (_ bv10000 256)) (= (x308 x83) (x68 x83))))
(assert (x341 x173))
(assert (= (_ bv31029940780905195875731109435447583271917780249877154904291146747782681853952 256) (x280 (x68 (_ bv31029940780905195875731109435447583271917780249877154904291146747782681853952 256)))))
(assert (= (x280 (x308 x132)) x132))
(assert (= (_ bv464684736 256) (x280 (x68 (_ bv464684736 256)))))
(assert (= (x308 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256)) (x68 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256))))
(assert (x341 x258))
(assert (= x136 (x280 (x308 x136))))
(assert (=> (bvule x32 (_ bv10000 256)) (= (x68 x32) (x308 x32))))
(assert (= (_ bv2544733239 256) (x280 (x68 (_ bv2544733239 256)))))
(assert (x341 x32))
(assert (= x25 (and x114 x85)))
(assert (=> (bvule x132 (_ bv10000 256)) (= (x68 x132) (x308 x132))))
(assert (x341 x161))
(assert (= (x68 (_ bv1245659826 256)) (x308 (_ bv1245659826 256))))
(assert (x341 x83))
(assert (= x264 (x280 (x308 x264))))
(assert (=> (bvuge (_ bv10000 256) (bvlshr x137 (_ bv96 256))) (= (x308 (bvlshr x137 (_ bv96 256))) (x68 (bvlshr x137 (_ bv96 256))))))
(assert (= x138 (and x163 x170)))
(assert (=> (bvule x246 (_ bv10000 256)) (= (x68 x246) (x308 x246))))
(assert (=> (bvule x61 (_ bv10000 256)) (= (x308 x61) (x68 x61))))
(assert (= x34 (x280 (x308 x34))))
(assert (= x285 (x280 (x308 x285))))
(assert (= (x280 (x308 x212)) x212))
(assert (= (and x358 x187) x221))
(assert (=> (bvule x72 (_ bv10000 256)) (= (x308 x72) (x68 x72))))
(assert (= (x68 (_ bv292666793 256)) (x308 (_ bv292666793 256))))
(assert (= (bvadd (x280 x182) (_ bv2 256)) (x280 (x252 x182 (_ bv2 256)))))
(assert (= (x280 (x308 x14)) x14))
(assert (= x211 (x280 (x308 x211))))
(assert (= (bvadd (_ bv3 256) (x280 x201)) (x280 (x252 x201 (_ bv3 256)))))
(assert (= x295 (and (=> (not x120) x233) (=> (and (and (bvule (_ bv0 256) x348) (= (bvugt x348 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256)) x85) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x348)) x120) (and (=> (and (not x85) (= (bvadd x348 (_ bv1 256)) x220)) x233) (=> x85 x242))))))
(assert (= (x68 (_ bv832554005 256)) (x308 (_ bv832554005 256))))
(assert (= x236 (and (not x313) x41)))
(assert (= x80 (=> (and (= x357 (not (bvult (_ bv1 256) x127))) (= x127 (x73 (_ bv244 256)))) (and (=> (= x79 x10) x320) x357))))
(assert (=> (bvuge (_ bv10000 256) x113) (= (x308 x113) (x68 x113))))
(assert (=> (bvule x312 (_ bv10000 256)) (= (x68 x312) (x308 x312))))
(assert (= (_ bv292666793 256) (x280 (x68 (_ bv292666793 256)))))
(assert (= (x308 (_ bv1150964472 256)) (x68 (_ bv1150964472 256))))
(assert (= x343 (and x44 x361)))
(assert (= x319 (x280 (x308 x319))))
(assert (= (_ bv752823349 256) (x280 (x68 (_ bv752823349 256)))))
(assert (= (x280 (x308 x72)) x72))
(assert (=> (bvule x14 (_ bv10000 256)) (= (x308 x14) (x68 x14))))
(assert (=> (bvule x264 (_ bv10000 256)) (= (x68 x264) (x308 x264))))
(assert (=> (bvuge (_ bv10000 256) x288) (= (x68 x288) (x308 x288))))
(assert (= (bvadd (x280 x3) (_ bv2 256)) (x280 (x252 x3 (_ bv2 256)))))
(assert (=> (bvuge (_ bv10000 256) x346) (= (x68 x346) (x308 x346))))
(assert (= x141 (x280 (x308 x141))))
(assert (= (x280 (x252 x337 (_ bv1 256))) (bvadd (_ bv1 256) (x280 x337))))
(assert (= (x280 (x308 x161)) x161))
(assert (= (=> (= (_ bv0 256) x367) x20) x242))
(assert (=> (bvule x296 (_ bv10000 256)) (= (x308 x296) (x68 x296))))
(assert (x341 x131))
(assert (= (x308 (_ bv2544733239 256)) (x68 (_ bv2544733239 256))))
(assert (x341 x113))
(assert (x341 x226))
(assert (= (x280 (x308 x250)) x250))
(assert (= (x280 (x68 (_ bv475336206 256))) (_ bv475336206 256)))
(assert (= x32 (x280 (x308 x32))))
(assert (x341 x296))
(assert (= (x308 (_ bv31029940780905195875731109435447583271917780249877154904291146747782681853952 256)) (x68 (_ bv31029940780905195875731109435447583271917780249877154904291146747782681853952 256))))
(assert (= (and x243 (not x121)) x117))
(assert (x341 x305))
(assert (= (x68 (_ bv941162192 256)) (x308 (_ bv941162192 256))))
(assert (x341 x69))
(assert (= x154 (and (not x262) x297)))
(assert (= (x280 (x252 x39 (_ bv2 256))) (bvadd (_ bv2 256) (x280 x39))))
(assert (x341 x75))
(assert (= (x280 (x308 x164)) x164))
(assert (= (x280 (x308 x305)) x305))
(assert (= (bvadd (x280 x333) (_ bv1 256)) (x280 (x252 x333 (_ bv1 256)))))
(assert (= (x68 (_ bv1461501637330902918203684832716283019655932542975 256)) (x308 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (and (not x48) x306) x86))
(assert (x341 x61))
(assert (= (x280 (x308 x131)) x131))
(assert (=> (bvule x345 (_ bv10000 256)) (= (x308 x345) (x68 x345))))
(assert (x341 x314))
(assert (x341 x72))
(assert (= x42 (and (not x85) x114)))
(assert (= (x68 (_ bv1315048582 256)) (x308 (_ bv1315048582 256))))
(assert (= (x280 (x308 x246)) x246))
(assert (= (and (not x180) x221) x297))
(assert (= (or x343 x117 x286 (and x41 x313) x365 x105 (and (not x147) x236) x25) x172))
(assert (x341 x212))
(assert (= x128 (or x138 (and x170 (not x163)))))
(assert (= x261 (or x110 x154)))
(assert (= (_ bv961581905 256) (x280 (x68 (_ bv961581905 256)))))
(assert (= (x280 (x68 (_ bv910484757 256))) (_ bv910484757 256)))
(assert (= x354 (=> (and (and (and (not (= (_ bv752823349 256) x24)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x159) (= (x252 x39 (_ bv2 256)) x218) (bvult (_ bv0 256) x294) (= x160 x159) (= x186 x49) (= (x148 (x308 x83)) x294) (not (= (_ bv464684736 256) x24)) (= x326 (x282 x218)) (bvugt (_ bv2494227977 256) x24) (= x61 x254) (= x39 (x209 (x308 x61) x214 (_ bv0 256))) (bvule x326 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x24 (_ bv292666793 256))) (bvuge x326 (_ bv0 256)) (= x107 x326) (= x24 (_ bv1315048582 256)) (= (x209 (x308 x159) (x68 (_ bv1 256)) (_ bv0 256)) x214)) (and (and (and (= x196 (_ bv0 256)) (= (x209 (x308 x211) x303 (_ bv0 256)) x337) (not (= (_ bv2510660263 256) x311)) (= (= x12 (_ bv0 256)) x330) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x312) (= x298 x13) (= (x252 x337 (_ bv1 256)) x43) (= x254 x211) (= (x209 (x308 x312) (x68 (_ bv1 256)) (_ bv0 256)) x303) (= x312 x160) (= x4 x12) (bvult (_ bv0 256) x267) (= (_ bv2544733239 256) x311) (= x267 (x148 (x308 x83))) (bvule x13 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= (_ bv2494227977 256) x311)) (not (bvugt (_ bv2494227977 256) x311)) (bvule (_ bv0 256) x13) (= (x94 x43) x13)) (and (and (= x160 x345) (= (_ bv1315048582 256) x92) (not (= (_ bv292666793 256) x92)) (bvugt x231 (_ bv0 256)) (= (= (_ bv0 256) x78) x339) (not (= (_ bv752823349 256) x92)) (= x254 x296) (= x78 x298) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x133) (not (= x92 (_ bv464684736 256))) (= x231 (x148 (x308 x83))) (bvugt (_ bv2494227977 256) x92) (= x57 x133) (= (x209 (x308 x345) (x68 (_ bv1 256)) (_ bv0 256)) x22) (= (_ bv0 256) x329) (bvule x345 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x182 (x209 (x308 x296) x22 (_ bv0 256))) (= (x252 x182 (_ bv2 256)) x93) (= x248 (and x339 x330)) (bvuge x133 (_ bv0 256)) (= (x282 x93) x133)) (and (= x30 (and x248 x155)) (= x155 (= x266 (_ bv0 256))) (= x307 (_ bv0 256)) (= x266 x57) (= x67 (or x30 x58))))) (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x217) (= (x148 (x308 x83)) x11) (bvuge x217 (_ bv0 256)) (= (x209 (x308 x246) (x68 (_ bv1 256)) (_ bv0 256)) x64) (= x58 (bvult x49 x108)) (= (x209 (x308 x258) x64 (_ bv0 256)) x216) (= x4 x217) (= x160 x246) (not (= x90 (_ bv2494227977 256))) (= x254 x258) (not (bvult x90 (_ bv2494227977 256))) (= x217 (x224 x216)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x246) (bvult (_ bv0 256) x11) (= x107 x108) (= x90 (_ bv2510660263 256))))) (and (= (_ bv2544733239 256) x208) (= (x209 (x308 x161) x102 (_ bv0 256)) x284) (not (= (_ bv2494227977 256) x208)) (not (= x208 (_ bv2510660263 256))) (bvule x14 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x161 x254) (not (= x367 (_ bv0 256))) (bvule x277 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvult (_ bv0 256) x293) (= x160 x14) (= x293 (x148 (x308 x83))) (= (x94 x322) x277) (bvuge x277 (_ bv0 256)) (= x322 (x252 x284 (_ bv1 256))) (not (bvult x208 (_ bv2494227977 256))) (= (x209 (x308 x14) (x68 (_ bv1 256)) (_ bv0 256)) x102) (= x277 x186))) x67)))
(assert (x341 x132))
(assert (= (x235 (_ bv276 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x212) (= (x68 x212) (x308 x212))))
(assert (=> (bvule x250 (_ bv10000 256)) (= (x68 x250) (x308 x250))))
(assert (=> (bvule x305 (_ bv10000 256)) (= (x308 x305) (x68 x305))))
(assert (= (x280 (x308 x345)) x345))
(assert (=> (bvule x226 (_ bv10000 256)) (= (x68 x226) (x308 x226))))
(assert (x341 x164))
(assert (= (and x144 x338) x41))
(assert (= x8 (and x115 x299)))
(assert (x341 x159))
(assert (= x20 (=> (and (= (= x367 (_ bv0 256)) x163) (or x163 (not x163))) x354)))
(assert (= (x308 (_ bv910484757 256)) (x68 (_ bv910484757 256))))
(assert (= (x68 (_ bv18446744073709551615 256)) (x308 (_ bv18446744073709551615 256))))
(assert (=> (bvuge (_ bv10000 256) x314) (= (x68 x314) (x308 x314))))
(assert (= (x280 (x68 (_ bv1461501637330902918203684832716283019655932542975 256))) (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (x341 x246))
(assert (= (and x261 x120) x114))
(assert (= (x280 (x68 (_ bv941162192 256))) (_ bv941162192 256)))
(assert (=> (bvule x265 (_ bv10000 256)) (= (x308 x265) (x68 x265))))
(assert (= x156 (x308 (x280 x156))))
(assert (= (bvadd (_ bv2 256) (x280 x193)) (x280 (x252 x193 (_ bv2 256)))))
(assert (x341 x141))
(assert (=> (bvule x258 (_ bv10000 256)) (= (x308 x258) (x68 x258))))
(assert (= (x280 (x308 x2)) x2))
(assert (= (x280 (x308 x75)) x75))
(assert (= (or x86 x116) x338))
(assert (x341 x34))
(assert (x341 x346))
(assert (= (or x40 x172) x170))
(assert (= (x280 (x308 x173)) x173))
(assert (x341 x288))
(assert (= x286 (and x358 (not x187))))
(assert (= x346 (x280 (x308 x346))))
(assert (= (x280 (x68 (_ bv2494227977 256))) (_ bv2494227977 256)))
(assert (= x113 (x280 (x308 x113))))
(assert (=> (bvule x141 (_ bv10000 256)) (= (x308 x141) (x68 x141))))
(assert (x341 x264))
(assert (x341 x285))
(assert (= (x280 (x68 (_ bv1150964472 256))) (_ bv1150964472 256)))
(assert (= x265 (x280 (x308 x265))))
(check-sat)
(exit)