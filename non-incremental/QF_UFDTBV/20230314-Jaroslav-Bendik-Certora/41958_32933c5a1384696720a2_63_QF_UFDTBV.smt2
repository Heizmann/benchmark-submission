(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x314 0)) (((x350 (x208 x314) (x193 x314) (x365 (_ BitVec 256))) (x112 (x250 x314) (x244 (_ BitVec 256))) (x170 (x131 (_ BitVec 256))))))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x264 () Bool)
(declare-fun x14 () Bool)
(declare-fun x48 () Bool)
(declare-fun x335 () Bool)
(declare-fun x104 () Bool)
(declare-fun x172 () (_ BitVec 256))
(declare-fun x221 () Bool)
(declare-fun x371 () (_ BitVec 256))
(declare-fun x337 () Bool)
(declare-fun x160 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x339 () Bool)
(declare-fun x16 () Bool)
(declare-fun x229 () Bool)
(declare-fun x294 () (_ BitVec 256))
(declare-fun x162 () Bool)
(declare-fun x55 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x353 () Bool)
(declare-fun x64 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x306 () (_ BitVec 256))
(declare-fun x95 () Bool)
(declare-fun x5 () Bool)
(declare-fun x154 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x328 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x67 () (_ BitVec 256))
(declare-fun x368 () (_ BitVec 256))
(declare-fun x329 () Bool)
(declare-fun x93 () Bool)
(declare-fun x119 () Bool)
(declare-fun x157 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x12 () Bool)
(declare-fun x40 () Bool)
(declare-fun x280 () (_ BitVec 256))
(declare-fun x87 () Bool)
(declare-fun x207 () Bool)
(declare-fun x392 () (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x158 () Bool)
(declare-fun x54 () Bool)
(declare-fun x182 () Bool)
(declare-fun x282 () Bool)
(declare-fun x346 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x248 () Bool)
(declare-fun x301 () Bool)
(declare-fun x351 () Bool)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x105 () (_ BitVec 256))
(declare-fun x189 () Bool)
(declare-fun x46 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x242 () Bool)
(declare-fun x379 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x195 () Bool)
(declare-fun x347 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x341 () Bool)
(declare-fun x323 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x267 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x153 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x390 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x356 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x363 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x310 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x224 () Bool)
(declare-fun x359 () Bool)
(declare-fun x1 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x141 () Bool)
(declare-fun x278 () (_ BitVec 256))
(declare-fun x380 () Bool)
(declare-fun x102 () Bool)
(declare-fun x79 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x370 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x84 () Bool)
(declare-fun x155 () Bool)
(declare-fun x13 () Bool)
(declare-fun x222 () Bool)
(declare-fun x378 () Bool)
(declare-fun x188 () Bool)
(declare-fun x265 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x321 () Bool)
(declare-fun x311 () (_ BitVec 256))
(declare-fun x240 () Bool)
(declare-fun x113 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x345 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x343 () Bool)
(declare-fun x225 () (_ BitVec 256))
(declare-fun x333 () (_ BitVec 256))
(declare-fun x348 () Bool)
(declare-fun x319 () Bool)
(declare-fun x11 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x62 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x247 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x253 () Bool)
(declare-fun x331 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x313 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x31 () Bool)
(declare-fun x121 () (_ BitVec 256))
(declare-fun x360 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x52 () Bool)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x315 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x298 () (_ BitVec 256))
(declare-fun x352 () Bool)
(declare-fun x381 () Bool)
(declare-fun x316 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x388 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x312 () (_ BitVec 256))
(declare-fun x73 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x384 () (_ BitVec 256))
(declare-fun x342 () Bool)
(declare-fun x60 () Bool)
(declare-fun x146 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x200 ((_ BitVec 256)) x314)
(declare-fun x47 () Bool)
(declare-fun x136 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x357 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x391 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x8 () Bool)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x167 () Bool)
(declare-fun x203 () (_ BitVec 256))
(declare-fun x283 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x304 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x387 () Bool)
(declare-fun x89 () Bool)
(declare-fun x355 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x82 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x375 () (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x6 () Bool)
(declare-fun x325 () Bool)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x219 () Bool)
(declare-fun x139 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x320 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x211 () Bool)
(declare-fun x263 () Bool)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x354 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x238 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x180 () Bool)
(declare-fun x137 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x206 (x314) (_ BitVec 256))
(declare-fun x187 () Bool)
(declare-fun x270 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x299 () Bool)
(declare-fun x175 () Bool)
(declare-fun x186 () Bool)
(declare-fun x210 () (_ BitVec 256))
(declare-fun x308 () (_ BitVec 256))
(declare-fun x383 () (_ BitVec 256))
(declare-fun x317 () Bool)
(declare-fun x382 () (_ BitVec 256))
(declare-fun x58 () Bool)
(declare-fun x276 () (_ BitVec 256))
(declare-fun x377 () (_ BitVec 256))
(declare-fun x289 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x327 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x125 () Bool)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x144 () Bool)
(declare-fun x367 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x322 () Bool)
(declare-fun x369 () Bool)
(declare-fun x35 () Bool)
(declare-fun x297 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x358 () Bool)
(declare-fun x309 () (_ BitVec 256))
(declare-fun x300 () (_ BitVec 256))
(declare-fun x362 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x349 () Bool)
(declare-fun x4 () Bool)
(declare-fun x239 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x303 () Bool)
(declare-fun x262 () (_ BitVec 256))
(declare-fun x372 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x344 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x258 (x314) (_ BitVec 256))
(declare-fun x364 () Bool)
(declare-fun x204 (x314) (_ BitVec 256))
(declare-fun x254 () Bool)
(declare-fun x53 () Bool)
(declare-fun x249 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x218 () Bool)
(declare-fun x361 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x373 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x366 () Bool)
(declare-fun x20 () Bool)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x374 () (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x36 () Bool)
(declare-fun x185 () Bool)
(declare-fun x260 () Bool)
(declare-fun x38 () (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x307 () Bool)
(declare-fun x140 () (_ BitVec 256))
(declare-fun x291 () Bool)
(declare-fun x241 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x245 () Bool)
(declare-fun x174 () Bool)
(declare-fun x41 () Bool)
(declare-fun x318 () (_ BitVec 256))
(declare-fun x295 () Bool)
(declare-fun x228 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x149 () (_ BitVec 256))
(declare-fun x179 () Bool)
(declare-fun x256 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x274 () Bool)
(declare-fun x226 () Bool)
(declare-fun x324 () (_ BitVec 256))
(declare-fun x385 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x192 () Bool)
(declare-fun x334 () (_ BitVec 256))
(declare-fun x293 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x332 () Bool)
(declare-fun x376 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x26 () Bool)
(declare-fun x326 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x77 () Bool)
(declare-fun x135 () Bool)
(declare-fun x177 () Bool)
(declare-fun x340 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x130 () (_ BitVec 256))
(declare-fun x85 () Bool)
(declare-fun x286 () Bool)
(declare-fun x389 () Bool)
(declare-fun x386 () Bool)
(define-fun x100 ((x314 x314) (x336 (_ BitVec 256))) x314 (ite ((_ is x350) x314) (x350 (x208 x314) (x193 x314) (bvadd x336 (x365 x314))) (ite ((_ is x112) x314) (x112 (x250 x314) (bvadd x336 (x244 x314))) (x170 (bvadd (x131 x314) x336)))))
(define-fun x273 ((x330 (_ BitVec 256)) (x159 (_ BitVec 256))) Bool (= (bvudiv (bvmul x159 x330) x159) x330))
(define-fun x290 ((x330 (_ BitVec 256)) (x159 (_ BitVec 256))) Bool (= x330 (bvsdiv (bvmul x330 x159) x159)))
(define-fun x281 ((x330 (_ BitVec 256)) (x159 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x159 x330) x159) x330))
(define-fun x78 ((x338 (_ BitVec 256))) Bool (=> (and (bvult (_ bv10000 256) x338) (not (= x338 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (not (= x338 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (= (_ bv1245370514 256) x338)) (not (= x338 (_ bv2685885107 256))) (not (= x338 (_ bv149895259 256)))) (not ((_ is x170) (x200 x338)))))
(assert (= x189 (and x52 x323)))
(assert (= x344 (and x349 x359)))
(assert (= (and x45 (not x272)) x359))
(assert (= (x204 (x170 (_ bv149895259 256))) (_ bv149895259 256)))
(assert (= x158 (and x36 (not x18))))
(assert (= (=> (and (and x95 (= x229 x95) (= x19 x372) (= false x179) (= x11 (_ bv400 256))) (and (= x151 x37) (= (bvudiv x19 (_ bv400 256)) x37) (= x240 x319))) x53) x69))
(assert (= (x200 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x170 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (and x286 x381) x329))
(assert (= (_ bv1245370514 256) (x204 (x170 (_ bv1245370514 256)))))
(assert (= (and (not x343) x87) x243))
(assert (= (and x325 x134) x291))
(assert (= x77 (and x87 x343)))
(assert (= x352 (=> (and (and (= x49 (bvudiv x233 (_ bv2 256))) (= x151 x49) (= x240 x319)) (and (= false x31) x342 (= x311 (_ bv2 256)) (= x233 x25) (= x60 x342))) x53)))
(assert (= (and x359 (not x349)) x286))
(assert (= (and x58 x180) x154))
(assert (= x322 (=> (and (and x219 (= x191 x372) (= x13 false) (= x219 x162) (= x324 (_ bv3 256))) (and (= x151 x392) (= x392 (bvudiv x191 (_ bv3 256))) (= x240 x319))) x53)))
(assert (= x274 (and x73 (not x238))))
(assert (= (and (not x153) x207) x325))
(assert (=> (bvule x127 (_ bv10000 256)) (= (x170 x127) (x200 x127))))
(assert (= (and x48 (not x224)) x58))
(assert (= x54 (and x238 x73)))
(assert (= (and x304 x35) x29))
(assert (= (and x9 (not x60)) x221))
(assert (= (and (not x388) x274) x122))
(assert (= x253 (and x303 (not x177))))
(assert (= x127 (x204 (x200 x127))))
(assert (= x241 (=> (and (and (= x85 x343) (= x25 x234) x85 (= x55 (_ bv400 256)) (= false x101)) (and (= x151 x298) (= x298 (bvudiv x234 (_ bv400 256))) (= x319 x240))) x53)))
(assert (= (and x16 x5) x12))
(assert (= (and x45 x272) x297))
(assert (= (or x139 x154 x297 x344 x189 x387 x171 x329 x320 x26 x77 x291 x12 x125 x115 x54 x144 x68 x103 x248 x341 x29 x263 x104) x30))
(assert (= x23 (=> (and (and (= (bvudiv x107 (_ bv2 256)) x357) (= x151 x357) (= x240 x319)) (and (= x231 x135) (= x107 x372) (= (_ bv2 256) x246) x231 (= x187 false))) x53)))
(assert (= (and (not x323) x52) x48))
(assert (= x6 (=> (and (and (= x51 (_ bv10 256)) (= x323 x218) (= x25 x168) x218 (= false x212)) (and (= x151 x360) (= (bvudiv x168 (_ bv10 256)) x360) (= x240 x319))) x53)))
(assert (= (and x41 x158) x26))
(assert (= x144 (and x303 x177)))
(assert (= x207 (and (not x162) x367)))
(assert (= (and x162 x367) x248))
(assert (= x320 (and x207 x153)))
(assert (x78 x127))
(assert (= (and x224 x48) x103))
(assert (= (and x122 (not x373)) x9))
(assert (= (x204 (x170 (_ bv1461501637330902918203684832716283019655932542975 256))) (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (and x274 x388) x139))
(assert (= (and x221 x135) x104))
(assert (= (x170 (_ bv1245370514 256)) (x200 (_ bv1245370514 256))))
(assert (= (and x243 (not x229)) x341))
(assert (= (x200 (_ bv2685885107 256)) (x170 (_ bv2685885107 256))))
(assert (= (=> (and (and (= x349 x7) (= x121 (_ bv500 256)) (= x25 x328) (= x299 false) x7) (and (= (bvudiv x328 (_ bv500 256)) x132) (= x240 x319) (= x132 x151))) x53) x192))
(assert (= (=> (and (and (= x382 x151) (= x382 (bvudiv x327 (_ bv500 256))) (= x240 x319)) (and (= x93 false) (= (_ bv500 256) x198) (= x327 x372) x196 (= x196 x381))) x53) x292))
(assert (= x87 (and (not x119) x253)))
(assert (= (x170 (_ bv149895259 256)) (x200 (_ bv149895259 256))))
(assert (= x45 (and x58 (not x180))))
(assert (= (x200 (_ bv1461501637330902918203684832716283019655932542975 256)) (x170 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (and (not x134) x325) x52))
(assert (= (and (not x41) x158) x367))
(assert (= x182 (and (not x16) x5)))
(assert (= (and x60 x9) x171))
(assert (= x68 (and x119 x253)))
(assert (= (x204 (x170 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x36 (and x304 (not x35))))
(assert (= x263 (and x122 x373)))
(assert (= (=> (and (and (= x240 x319) (= x172 (bvudiv x306 (_ bv3 256))) (= x172 x151)) (and x364 (= false x211) (= x306 x25) (= x41 x364) (= x346 (_ bv3 256)))) x53) x315))
(assert (= (and x141 x182) x125))
(assert (= (=> (and (and (= x225 x151) (= (bvudiv x62 (_ bv10 256)) x225) (= x319 x240)) (and (= false x321) (= x62 x372) (= x224 x174) x174 (= x152 (_ bv10 256)))) x53) x335))
(assert (= x387 (and x229 x243)))
(assert (= x115 (and x36 x18)))
(assert (= x53 (=> (and (and (= x300 x96) (= (= x79 x356) x307) (= x356 (= x96 x235))) (and x319 (= x300 x316) (= x316 x151) (= x213 x316))) x307)))
(assert (= x283 (=> (and (= x372 x257) (= x190 (bvudiv x116 x361)) (= x83 x25) (= x376 (_ bv0 256)) (= x25 x265) (= x288 x309) (= x140 x120) (= x287 x267) (not (= (_ bv1245370514 256) x143)) (= x254 (bvult (_ bv0 256) (x258 (x200 x127)))) (= x309 x25) (not (= x143 (_ bv149895259 256))) (= x120 x27) (= x368 x27) (= (x206 (x200 x127)) x385) (= (_ bv2685885107 256) x143) (= x94 (= x83 (_ bv0 256))) (= x161 x267) (= x372 x114) (= x265 x237) (= x351 x380) (bvult (_ bv0 256) x127) (bvule x127 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x173 x235) (= (bvmul x345 x237) x169) (= (_ bv400 256) x17) (= x287 x361) (= x66 x165) (= x309 x165) (= (x258 (x200 x127)) x138) (= (and x282 x380) x240) (= x79 (= x190 x194)) (= x282 x186) (= (_ bv0 256) x308) (= x136 x267) (= x194 x173) (= x351 (not (= x259 (_ bv0 256)))) (= (or x94 x47) x16) (= x186 (bvule x169 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (= x27 x372) (= (= x114 (_ bv0 256)) x47) (= x161 x259) (= x201 x368) (= x156 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x136 x63) (= x288 x28) (= x116 (bvmul x140 x66)) (bvult (_ bv0 256) x138) (= (_ bv0 256) x318) x254 (bvuge x385 (_ bv0 256)) (= x257 x345)) (and (=> (and (and (= x117 x151) (= x319 x240) x317 (= x317 x16) (= (_ bv0 256) x117)) x16) x53) (=> (and (not x16) (and x239 (= (= x313 x22) x141) (= x16 x118) (= (not x118) x239) (= x161 x22) (= x313 x372))) (and (=> (and (and x4 (= x319 x240) (= x25 x59) (= x4 x141) (= x59 x151)) x141) x53) (=> (and (not x141) (and (= x389 x141) (= (= x124 x67) x238) (= x67 x161) (= x124 x25) x14 (= x14 (not x389)))) (and (=> (and (and (= x262 x161) (= x2 x372) (= (_ bv2 256) x275) (= (not x34) x293) x293 (= x34 x238) (= x388 (= x2 x217)) (= (bvmul (_ bv2 256) x262) x217)) (not x238)) (and (=> (and (and (= (_ bv2 256) x334) (= x333 x161) (= x388 x76) (= x373 (= x312 x223)) x3 (= x312 x25) (= x3 (not x76)) (= (bvmul x333 (_ bv2 256)) x223)) (not x388)) (and (=> (and (not x373) (and (= (bvmul x285 (_ bv2 256)) x215) (= x285 x372) (= (_ bv2 256) x137) (= (not x20) x86) (= x20 x373) (= (= x390 x215) x60) (= x161 x390) x86)) (and (=> x60 x352) (=> (and (and (= x21 x25) (= x150 (_ bv2 256)) (= x135 (= x178 x252)) (= x252 x161) (= x8 x60) (= x178 (bvmul x21 (_ bv2 256))) x40 (= x40 (not x8))) (not x60)) (and (=> x135 x23) (=> (and (not x135) (and x339 (= x35 (= x216 x355)) (= (bvmul x130 (_ bv3 256)) x216) (= x209 (_ bv3 256)) (= x372 x355) (= (not x245) x339) (= x130 x161) (= x135 x245))) (and (=> (and x35 (and (= x363 x151) x301 (= x294 (_ bv3 256)) (= x145 x25) (= x35 x301) (= x363 (bvmul x145 (_ bv3 256))) (= x240 x319))) x53) (=> (and (and (= x35 x82) (= (not x82) x358) (= x161 x38) (= (= x70 x280) x18) x358 (= x280 (bvmul x38 (_ bv3 256))) (= (_ bv3 256) x371) (= x25 x70)) (not x35)) (and (=> (and (not x18) (and (= x161 x183) x337 (= x337 (not x378)) (= (_ bv3 256) x39) (= x18 x378) (= x331 (bvmul (_ bv3 256) x148)) (= x41 (= x183 x331)) (= x148 x372))) (and (=> x41 x315) (=> (and (not x41) (and (= x162 (= x202 x228)) (= x41 x195) (= x161 x202) (= (_ bv3 256) x146) (= x25 x375) x166 (= x228 (bvmul (_ bv3 256) x375)) (= (not x195) x166))) (and (=> x162 x322) (=> (and (not x162) (and (= x161 x50) (= x44 (bvmul x50 (_ bv10 256))) (= x279 x372) (= (not x348) x185) x185 (= (_ bv10 256) x197) (= x348 x162) (= (= x44 x279) x153))) (and (=> (and (not x153) (and (= x247 (not x295)) (= x295 x153) (= (bvmul x261 (_ bv10 256)) x126) (= (_ bv10 256) x163) (= x25 x181) x247 (= x261 x161) (= x134 (= x126 x181)))) (and (=> (and (and (= (_ bv10 256) x64) (= x220 x134) (= x323 (= x10 x133)) (= x75 x372) (= x97 (not x220)) x97 (= x133 x161) (= (bvmul (_ bv10 256) x75) x10)) (not x134)) (and (=> x323 x6) (=> (and (and (= x276 x25) (= x106 (_ bv10 256)) x264 (= (= x199 x270) x224) (= x323 x167) (= x199 (bvmul (_ bv10 256) x276)) (= (not x167) x264) (= x270 x161)) (not x323)) (and (=> x224 x335) (=> (and (not x224) (and (= x110 (bvmul (_ bv500 256) x61)) (= (_ bv500 256) x391) (= x372 x57) (= x180 (= x57 x110)) (= x61 x161) (= x340 x224) (= (not x340) x366) x366)) (and (=> (and (not x180) (and (= x332 (not x102)) (= x102 x180) (= x161 x108) (= (bvmul x108 (_ bv500 256)) x256) (= (= x256 x251) x272) (= x25 x251) x332 (= x74 (_ bv500 256)))) (and (=> (and (not x272) (and (= x226 x272) (= (_ bv500 256) x354) (= x372 x326) (= x161 x379) (= (not x226) x260) (= (bvmul x326 (_ bv500 256)) x310) (= (= x310 x379) x349) x260)) (and (=> (and (and (= (not x236) x188) (= (= x160 x111) x381) (= x161 x111) (= x236 x349) (= x25 x71) (= (_ bv500 256) x147) (= (bvmul (_ bv500 256) x71) x160) x188) (not x349)) (and (=> x381 x292) (=> (and (not x381) (and (= x372 x227) x84 (= x305 (bvmul x232 (_ bv400 256))) (= x232 x161) (= x129 x381) (= (_ bv400 256) x271) (= x177 (= x227 x305)) (= x84 (not x129)))) (and (=> (and x177 (and (= x289 x177) (= x56 x151) (= (_ bv400 256) x80) (= x278 x25) x289 (= x319 x240) (= x56 (bvmul (_ bv400 256) x278)))) x53) (=> (and (not x177) (and (= (bvmul x269 (_ bv400 256)) x105) (= (= x296 x105) x119) (= x269 x161) (= x177 x81) (= x277 (_ bv400 256)) x72 (= (not x81) x72) (= x296 x25))) (and (=> (and x119 (and (= x240 x319) (= x157 x151) (= x384 x372) (= x119 x89) x89 (= (bvmul x384 (_ bv400 256)) x157) (= (_ bv400 256) x214))) x53) (=> (and (not x119) (and (= (_ bv400 256) x42) x175 (= x343 (= x255 x302)) (= x302 x161) (= x119 x128) (= (bvmul (_ bv400 256) x347) x255) (= (not x128) x175) (= x347 x372))) (and (=> x343 x241) (=> (and (not x343) (and x15 (= x222 x343) (= x33 x161) (= (not x222) x15) (= x25 x1) (= x229 (= x266 x33)) (= (bvmul x1 (_ bv400 256)) x266) (= (_ bv400 256) x374))) (and (=> (and (not x229) (and (= x203 x151) (= (not x230) x155) (= x319 x46) (= x230 x229) (= (_ bv0 256) x203) (= x46 false) x155)) x53) (=> x229 x69))))))))))) (=> x349 x192))) (=> (and (and (= x98 x151) (= x319 x240) (= x98 (bvmul (_ bv500 256) x142)) x32 (= x142 x372) (= x32 x272) (= (_ bv500 256) x370)) x272) x53))) (=> (and (and (= x240 x319) (= (bvmul (_ bv500 256) x65) x205) (= (_ bv500 256) x249) x91 (= x151 x205) (= x180 x91) (= x25 x65)) x180) x53))))))) (=> (and (and (= x24 x151) x362 (= x319 x240) (= x43 x372) (= x134 x362) (= (_ bv10 256) x123) (= (bvmul x43 (_ bv10 256)) x24)) x134) x53))) (=> (and (and x242 (= x149 x25) (= x319 x240) (= (_ bv10 256) x210) (= x151 x176) (= x242 x153) (= (bvmul (_ bv10 256) x149) x176)) x153) x53))))))) (=> (and x18 (and (= x90 x151) (= (_ bv3 256) x284) (= x319 x240) (= x18 x369) x369 (= x372 x92) (= (bvmul (_ bv3 256) x92) x90))) x53))))))))) (=> (and (and (= x319 x240) x386 (= (bvmul x268 (_ bv2 256)) x99) (= x151 x99) (= x372 x268) (= x383 (_ bv2 256)) (= x386 x373)) x373) x53))) (=> (and (and (= x184 (_ bv2 256)) (= x164 x388) (= (bvmul x88 (_ bv2 256)) x377) (= x319 x240) (= x88 x25) (= x151 x377) x164) x388) x53))) (=> (and x238 (and (= x372 x109) x353 (= x353 x238) (= x109 x151) (= x240 x319))) x53)))))))))
(assert (= (and x286 (not x381)) x303))
(assert (not x283))
(assert (= x5 true))
(assert (= (and x182 (not x141)) x73))
(assert (= (_ bv2685885107 256) (x204 (x170 (_ bv2685885107 256)))))
(assert (= (and (not x135) x221) x304))
(check-sat)
(exit)