(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x232 0)) (((x71 (x263 x232) (x220 (_ BitVec 256))) (x88 (x167 x232) (x255 x232) (x221 (_ BitVec 256))) (x248 (x100 (_ BitVec 256))))))
(declare-fun x183 () x232)
(declare-fun x268 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x281 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x242 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x80 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x24 (x232) (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x160 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x150 () x232)
(declare-fun x78 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x250 (x232) (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x98 () x232)
(declare-fun x210 () (_ BitVec 256))
(declare-fun x44 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x217 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x41 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x261 (x232) (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x169 () Bool)
(declare-fun x26 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x271 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x233 () x232)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x157 (x232) (_ BitVec 256))
(declare-fun x136 () x232)
(declare-fun x31 () x232)
(declare-fun x245 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x272 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x104 (x232) (_ BitVec 256))
(declare-fun x47 () Bool)
(declare-fun x249 () x232)
(declare-fun x13 () Bool)
(declare-fun x153 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x1 (x232) (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x120 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x274 () Bool)
(declare-fun x181 () x232)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x194 (x232) (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x287 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x21 () Bool)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x99 () x232)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x33 () x232)
(declare-fun x141 () Bool)
(declare-fun x67 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x172 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x122 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x266 () Bool)
(declare-fun x277 (x232) (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x83 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x270 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x262 () x232)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x113 () x232)
(declare-fun x258 () Bool)
(declare-fun x135 () (_ BitVec 256))
(declare-fun x60 () x232)
(declare-fun x158 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x278 () Bool)
(declare-fun x246 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x15 () x232)
(declare-fun x147 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x228 () x232)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x161 () Bool)
(declare-fun x260 (x232) (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x177 () x232)
(declare-fun x164 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x279 () Bool)
(declare-fun x56 () Bool)
(declare-fun x148 (x232) (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x251 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x199 () x232)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x187 () Bool)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x202 () x232)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x102 () (_ BitVec 256))
(declare-fun x223 () x232)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x227 (x232) (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x4 () x232)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x134 (x232) (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x35 () x232)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x124 () x232)
(declare-fun x77 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x65 (x232) (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x95 ((_ BitVec 256)) x232)
(declare-fun x186 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x267 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(define-fun x244 ((x232 x232) (x63 (_ BitVec 256))) x232 (ite ((_ is x71) x232) (x71 (x263 x232) (bvadd x63 (x220 x232))) (ite ((_ is x88) x232) (x88 (x167 x232) (x255 x232) (bvadd x63 (x221 x232))) (x248 (bvadd (x100 x232) x63)))))
(define-fun x226 ((x38 (_ BitVec 256)) (x216 (_ BitVec 256))) Bool (= (bvudiv (bvmul x216 x38) x216) x38))
(define-fun x123 ((x38 (_ BitVec 256)) (x216 (_ BitVec 256))) Bool (= x38 (bvsdiv (bvmul x38 x216) x216)))
(define-fun x23 ((x38 (_ BitVec 256)) (x216 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x216 x38) x216) x38))
(define-fun x112 ((x195 (_ BitVec 256))) Bool (=> (and (not (= x195 (_ bv1763987465 256))) (not (= x195 (_ bv1980270339 256))) (not (= x195 (_ bv699302164 256))) (not (= x195 (_ bv1161348331 256))) (not (= (_ bv2094874590 256) x195)) (not (= (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x195)) (not (= (_ bv1710941022 256) x195)) (not (= x195 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))) (bvult (_ bv10000 256) x195) (not (= x195 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (not (= x195 (_ bv1814410054 256))) (not (= (_ bv231365057 256) x195)) (not (= x195 (_ bv761373525 256))) (not (= x195 (_ bv1461501637330902918203684832716283019655932542975 256)))) (not ((_ is x248) (x95 x195)))))
(assert (= (x95 (_ bv1461501637330902918203684832716283019655932542975 256)) (x248 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (x112 x119))
(assert (x112 x68))
(assert (=> (bvule x68 (_ bv10000 256)) (= (x95 x68) (x248 x68))))
(assert (=> (bvuge (_ bv10000 256) x146) (= (x95 x146) (x248 x146))))
(assert (= (x194 (x248 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256))) (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)))
(assert (= (bvadd (_ bv2 256) (x194 x150)) (x194 (x244 x150 (_ bv2 256)))))
(assert (= (x95 (_ bv699302164 256)) (x248 (_ bv699302164 256))))
(assert (= (bvadd (x194 x4) (_ bv1 256)) (x194 (x244 x4 (_ bv1 256)))))
(assert (x112 x162))
(assert (= (_ bv2094874590 256) (x194 (x248 (_ bv2094874590 256)))))
(assert (= true x52))
(assert (=> (bvuge (_ bv10000 256) x51) (= (x248 x51) (x95 x51))))
(assert (= (x194 (x248 (_ bv1161348331 256))) (_ bv1161348331 256)))
(assert (= (x95 (_ bv1161348331 256)) (x248 (_ bv1161348331 256))))
(assert (= (_ bv1710941022 256) (x194 (x248 (_ bv1710941022 256)))))
(assert (= (x194 (x248 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (_ bv761373525 256) (x194 (x248 (_ bv761373525 256)))))
(assert (=> (bvule x162 (_ bv10000 256)) (= (x95 x162) (x248 x162))))
(assert (= (_ bv1763987465 256) (x194 (x248 (_ bv1763987465 256)))))
(assert (= x68 (x194 (x95 x68))))
(assert (= (x95 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)) (x248 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256))))
(assert (=> (bvule x119 (_ bv10000 256)) (= (x95 x119) (x248 x119))))
(assert (=> (bvuge (_ bv10000 256) x204) (= (x248 x204) (x95 x204))))
(assert (= (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) (x194 (x248 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))))
(assert (x112 x153))
(assert (= (_ bv1980270339 256) (x194 (x248 (_ bv1980270339 256)))))
(assert (= (_ bv231365057 256) (x194 (x248 (_ bv231365057 256)))))
(assert (x112 x118))
(assert (not x161))
(assert (= (x95 (_ bv1710941022 256)) (x248 (_ bv1710941022 256))))
(assert (= (x194 (x95 x162)) x162))
(assert (=> (bvule x180 (_ bv10000 256)) (= (x248 x180) (x95 x180))))
(assert (x112 x146))
(assert (= x153 (x194 (x95 x153))))
(assert (= (x194 (x244 x202 (_ bv4 256))) (bvadd (_ bv4 256) (x194 x202))))
(assert (= (bvadd (x194 x262) (_ bv3 256)) (x194 (x244 x262 (_ bv3 256)))))
(assert (= (x248 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (x95 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= (x95 (_ bv1814410054 256)) (x248 (_ bv1814410054 256))))
(assert (= x180 (x194 (x95 x180))))
(assert (= (x248 (_ bv1763987465 256)) (x95 (_ bv1763987465 256))))
(assert (= (bvadd (_ bv1 256) (x194 x113)) (x194 (x244 x113 (_ bv1 256)))))
(assert (=> (bvule x118 (_ bv10000 256)) (= (x95 x118) (x248 x118))))
(assert (= (x194 (x95 x51)) x51))
(assert (= (x95 (_ bv761373525 256)) (x248 (_ bv761373525 256))))
(assert (x112 x204))
(assert (= (x95 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x248 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (x95 (_ bv2094874590 256)) (x248 (_ bv2094874590 256))))
(assert (= (x95 (_ bv231365057 256)) (x248 (_ bv231365057 256))))
(assert (= (x194 (x95 x146)) x146))
(assert (= (x194 (x95 x118)) x118))
(assert (= (x194 (x248 (_ bv699302164 256))) (_ bv699302164 256)))
(assert (x112 x51))
(assert (= x204 (x194 (x95 x204))))
(assert (= (x194 (x95 x119)) x119))
(assert (=> (bvuge (_ bv10000 256) x153) (= (x95 x153) (x248 x153))))
(assert (= (x95 (_ bv1980270339 256)) (x248 (_ bv1980270339 256))))
(assert (= (=> (and (and x34 (= (_ bv6 256) x269) (= x81 false) (= x234 x208) (= x152 (x134 (x95 x146))) (= x97 x180) (bvule (_ bv0 256) x234) (bvule x97 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvugt (_ bv699302164 256) x179) (= x268 false) (bvule (_ bv0 256) x97) (bvugt (_ bv2094874590 256) x179) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x146) (bvugt x270 (_ bv0 256)) (= (_ bv1980270339 256) x284) (bvuge x238 (_ bv0 256)) (= x241 x238) (= (x227 (x95 x146)) x270) (= x78 false) (bvule (_ bv0 256) x152) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x234) (bvugt (_ bv1161348331 256) x179) (= false x147) (bvugt x146 (_ bv0 256)) (bvule x238 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvugt (x227 (x95 x146)) (_ bv0 256)) x34) (= x179 (_ bv231365057 256))) (and (and (bvult x46 (_ bv2094874590 256)) (bvugt (_ bv1161348331 256) x46) (= x46 (_ bv761373525 256)) (= x106 x254) (= x8 x241) (bvuge x254 (_ bv0 256)) (not (bvugt (_ bv699302164 256) x46)) (not (= x46 (_ bv699302164 256))) (bvugt x16 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x254) (= (x227 (x95 x146)) x16)) (and (and (and (= (bvadd x10 x229) x186) (= x229 x39) (= x10 x69) (= (= x186 x76) x154)) (and (= (x227 (x95 x146)) x92) (bvugt (_ bv2094874590 256) x132) (not (bvugt (_ bv699302164 256) x132)) (= x69 x254) (= (_ bv761373525 256) x132) (bvugt x92 (_ bv0 256)) (= x62 x76) (bvuge x254 (_ bv0 256)) (bvule x254 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= (_ bv699302164 256) x132)) (bvult x132 (_ bv1161348331 256)))) (and (= x103 (= (_ bv0 256) x253)) (bvule (_ bv0 256) x121) (= x115 (bvor x256 x156)) (ite x187 x187 (not (bvult x170 x84))) (= x224 (bvmul x259 x230)) (= x17 x133) (bvule x86 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (bvand x96 x28) x256) (= (bvadd (bvneg (_ bv4 256)) x75) x219) (bvugt x178 (_ bv0 256)) (bvuge x170 (_ bv0 256)) (= (ite (not x205) (_ bv1 256) (_ bv0 256)) x156) (= x107 (x250 x98)) (= x113 (x88 (x95 x118) x136 (_ bv0 256))) (= (ite (not x5) (_ bv1 256) (_ bv0 256)) x237) (x226 x87 x253) (= (x88 (x95 x162) (x248 (_ bv1 256)) (_ bv0 256)) x233) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x118) x139) (= x276 x93) (ite x27 x27 (not (bvugt x196 x91))) (not (= x58 (_ bv1814410054 256))) (= (x244 x4 (_ bv1 256)) x31) (= x182 x257) (= (not x64) x281) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x238) (bvuge x41 (_ bv0 256)) (ite x217 x217 (not (bvugt x107 x54))) (= (= x264 x8) x82) (bvule (_ bv0 256) x91) (= (not x140) x279) (= x121 (x104 x33)) (bvule x176 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x244 x202 (_ bv4 256)) x228) (= (bvsgt (_ bv0 256) x25) x13) (= (_ bv0 256) x93) (= x239 (bvudiv (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x26)) (bvult x58 (_ bv2094874590 256)) (= x94 (bvsgt x211 (_ bv0 256))) (bvuge x190 (_ bv0 256)) (= (ite x103 (_ bv1 256) (_ bv0 256)) x192) (= x213 x110) (= x150 (x88 (x95 x68) (x248 (_ bv2 256)) (_ bv0 256))) (= x35 (x88 (x95 x180) x233 (_ bv0 256))) (bvule (_ bv0 256) x176) (= x212 (bvslt x11 (_ bv0 256))) (= (x88 (x95 x68) (x248 (_ bv3 256)) (_ bv0 256)) x136) (= x130 (not x21)) (= (bvand x135 x43) x61) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x87) (= x251 (= x20 x180)) (= (bvand x218 x237) x128) (= x231 (= x184 x74)) (= x214 x101) (bvule (_ bv0 256) x108) (= x215 (x260 x183)) (bvugt x267 (_ bv0 256)) (bvuge x53 (_ bv0 256)) (= x50 (ite (bvslt x87 (_ bv0 256)) (_ bv1 256) (_ bv0 256))) (= (x160 x14) x259) (= x188 (ite (or x222 x103) (_ bv1 256) (_ bv0 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x242) (= x32 (ite x222 (_ bv1 256) (_ bv0 256))) (not (bvugt (_ bv4 256) x75)) (= (not (bvugt x41 x137)) x222) (= (ite (bvsgt x211 (_ bv0 256)) (_ bv1 256) (_ bv0 256)) x175) (= x11 x158) (not (bvugt (_ bv1161348331 256) x58)) (= (not x243) x29) (= x70 (bvslt (_ bv0 256) x211)) (= (not x77) x56) (= x273 (bvor x79 x189)) (= x68 x101) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x40) x119) (not (= (_ bv0 256) x87)) (= x145 (bvor x128 x225)) (= (ite (not x191) (_ bv1 256) (_ bv0 256)) x210) (= (bvand x9 x173) x135) (= (_ bv1980270339 256) x58) (= x209 x242) (= (not x111) x217) (not (bvugt (_ bv1710941022 256) x58)) (= (bvmul x215 x84) x213) (= x108 x230) (= x203 x133) (= x109 (bvmul x253 x87)) (ite x56 x56 (not (bvult x238 x42))) (= (bvult x48 x7) x141) (= (bvand x50 x193) x129) (bvule (_ bv0 256) x200) (= x102 x39) (= (bvmul x257 x87) x67) (= x37 x118) (= (bvand x118 (_ bv1461501637330902918203684832716283019655932542975 256)) x127) (= x235 x118) (bvuge x87 (_ bv0 256)) (= x36 (bvslt x11 (_ bv0 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x48) (= x288 (x227 (x95 x146))) (= (ite (or x251 x47) (_ bv1 256) (_ bv0 256)) x252) (= (x65 x35) x282) (bvule x283 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x183 (x244 x150 (_ bv2 256))) (bvugt x145 (_ bv0 256)) (= (bvsgt x25 (_ bv0 256)) x105) (not (bvslt x219 (_ bv192 256))) (= x185 x68) (bvslt (_ bv195 256) x75) (= x278 (bvsgt (_ bv0 256) x211)) (not (bvslt x87 (_ bv0 256))) (= (x88 (x95 x119) (x248 (_ bv5 256)) (_ bv0 256)) x223) (= x190 (_ bv1 256)) (= (bvand x242 (_ bv1461501637330902918203684832716283019655932542975 256)) x207) (= (x244 x262 (_ bv3 256)) x177) (= x96 (ite (not x70) (_ bv1 256) (_ bv0 256))) (= x138 x257) (bvule x49 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (ite (bvslt x211 (_ bv0 256)) (_ bv1 256) (_ bv0 256)) x143) (= x166 (bvsgt x211 (_ bv0 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x170) (= (bvslt x211 (_ bv0 256)) x22) (not (= (_ bv1763987465 256) x58)) (= x257 (bvadd x121 x26)) (= (bvand x242 (_ bv1461501637330902918203684832716283019655932542975 256)) x204) (bvule (_ bv0 256) x283) (= (ite (not x94) (_ bv1 256) (_ bv0 256)) x247) (bvule (_ bv0 256) x48) (= x199 (x88 (x95 x68) (x248 (_ bv4 256)) (_ bv0 256))) (bvugt (_ bv2094874590 256) x122) (= x245 (ite (bvslt x211 x45) (_ bv1 256) (_ bv0 256))) (not (= (_ bv1710941022 256) x58)) (= x168 (ite (= (_ bv0 256) x211) (_ bv0 256) (ite (= (bvult x211 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)) false) (bvudiv (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) (ite (bvugt (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x211) x211 (bvadd (bvneg (bvadd (bvneg (_ bv1 256)) x211)) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (bvadd (bvneg (bvadd (bvudiv (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) (ite (bvugt (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x211) x211 (bvadd (bvneg (bvadd x211 (bvneg (_ bv1 256)))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (bvneg (_ bv1 256)))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))) (= (x65 x99) x283) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x41) (= x272 x40) (ite x258 x258 (not (bvugt x253 x53))) (= (ite (bvslt (_ bv0 256) x87) (_ bv1 256) (_ bv0 256)) x66) (= (bvand x40 (_ bv1461501637330902918203684832716283019655932542975 256)) x153) (= (bvand x242 (_ bv1461501637330902918203684832716283019655932542975 256)) x116) (= (ite x169 (_ bv1 256) (_ bv0 256)) x172) (bvuge x282 (_ bv0 256)) (= (ite x198 (_ bv1 256) (_ bv0 256)) x114) (= x48 (x24 x177)) (= x5 (bvugt x42 x149)) (= (= x125 x3) x164) (ite x2 x2 (not (bvugt x91 x196))) (= x53 (x148 x181)) (= x25 (bvmul x87 x26)) (= (x88 (x95 x68) (x248 (_ bv2 256)) (_ bv0 256)) x202) (= x30 (ite (not x212) (_ bv1 256) (_ bv0 256))) (= (x1 x223) x91) (= (_ bv0 256) x61) (= x67 x7) (= (x44 x240) x125) (ite x130 x130 (not (bvult x107 x54))) (= x108 (x104 x124)) (= (x88 (x95 x68) (x248 (_ bv2 256)) (_ bv0 256)) x262) (= (ite (bvsgt x171 x87) (_ bv1 256) (_ bv0 256)) x43) (= x40 x280) (= (ite (not x36) (_ bv1 256) (_ bv0 256)) x28) (= x144 (bvand x66 x143)) (= (bvand x40 (_ bv1461501637330902918203684832716283019655932542975 256)) x201) (= x184 x87) (= x206 x106) (= x117 (ite (bvsgt x87 (_ bv0 256)) (_ bv1 256) (_ bv0 256))) (= x173 (ite (bvsgt (_ bv0 256) x211) (_ bv1 256) (_ bv0 256))) (= (bvsgt (_ bv0 256) x11) x111) (= x41 (x157 x228)) (bvult (_ bv0 256) x115) (bvugt x273 (_ bv0 256)) (= (x227 (x95 x146)) x19) (bvuge x49 (_ bv0 256)) (= x98 (x88 (x95 x204) x199 (_ bv0 256))) (= x265 (ite (bvult x239 x87) (_ bv1 256) (_ bv0 256))) (= x258 (not x22)) (= (ite (bvslt (_ bv0 256) x211) (_ bv1 256) (_ bv0 256)) x193) (= x197 x59) (= x275 (= x282 (_ bv1 256))) (= x165 x26) (ite x246 x246 (not (bvult x253 x53))) (= (x88 (x95 x180) x60 (_ bv0 256)) x99) (= x267 (bvor x210 x55)) (bvult (_ bv0 256) x188) (= x243 (bvsgt x25 (_ bv0 256))) (x226 x257 x87) (= x225 (ite (not x166) (_ bv1 256) (_ bv0 256))) (= x274 (= x207 x180)) (= x18 (bvsgt x211 (_ bv0 256))) (= x3 x121) (= (x65 x249) x287) (bvule (_ bv0 256) x287) (= x197 x176) (bvule x108 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x57 (ite x275 (_ bv1 256) (_ bv0 256))) (= (bvand x40 (_ bv1461501637330902918203684832716283019655932542975 256)) x20) (= (not x13) x27) (= x178 (bvor x252 x12)) (= x21 (bvslt (_ bv0 256) x11)) (= (= x287 (_ bv1 256)) x47) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x242) x162) (= x246 (not x18)) (= (_ bv231365057 256) x122) (= x242 x142) (= x85 (bvand x144 x245)) (bvuge x149 (_ bv0 256)) (= x163 x158) (= x253 (bvadd x26 x53)) (= x73 (_ bv0 256)) (= x26 x211) (bvult (_ bv0 256) x288) (= x286 (_ bv0 256)) (= (bvand x247 x30) x189) x82 (= x285 (ite x47 (_ bv1 256) (_ bv0 256))) (= x68 x151) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x40) (= x131 (bvand x117 x175)) (= x170 (x277 x113)) (= (ite x274 (_ bv1 256) (_ bv0 256)) x159) x231 (= x73 (bvand x265 x131)) (= x4 (x88 (x95 x68) (x248 (_ bv2 256)) (_ bv0 256))) (= x264 (bvadd x203 x206)) (= (bvadd x25 x91) x196) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x107) (bvule x282 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (ite (not x278) (_ bv1 256) (_ bv0 256)) x12) (= x33 (x88 (x95 x68) (x248 (_ bv2 256)) (_ bv0 256))) (= x109 x137) (= (bvadd x107 (bvneg x158)) x54) (= (bvslt (_ bv0 256) x211) x120) (= (= x283 (_ bv1 256)) x169) (= (bvugt x137 x110) x205) (= x51 (bvand x118 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x60 (x88 (x95 x51) (x248 (_ bv1 256)) (_ bv0 256))) (bvuge x107 (_ bv0 256)) (= x171 (ite (= x211 (_ bv0 256)) (_ bv0 256) (ite (= true (bvult x211 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256))) (bvudiv (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) (ite (bvugt (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x211) x211 (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg (bvadd (bvneg (_ bv1 256)) x211))))) (bvadd (bvneg (bvadd (bvneg (_ bv1 256)) (bvudiv (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) (ite (bvugt (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x211) x211 (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg (bvadd x211 (bvneg (_ bv1 256))))))))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))) (= x180 x86) (= (ite (or x274 x275) (_ bv1 256) (_ bv0 256)) x55) (= x77 (bvslt x25 (_ bv0 256))) (= (x261 x31) x87) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x118) (x226 x84 x215) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x149) (= x191 (bvslt (_ bv0 256) x11)) (= (bvmul x174 x182) x236) x6 (ite x29 x29 (not (bvugt x238 x42))) (ite x279 x279 (not (bvugt x257 x121))) (= x79 (ite (or x198 x169) (_ bv1 256) (_ bv0 256))) (bvuge x86 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x200) (= (bvand x126 x129) x286) (= (bvadd x17 x236) x271) (bvule x53 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvugt x19 (_ bv0 256)) (= x84 (bvadd x163 x170)) (= x6 (= x102 x89)) (= (bvslt (_ bv0 256) x11) x64) (= x90 x68) (bvule (_ bv0 256) x215) (bvule (_ bv0 256) x238) (= (ite x251 (_ bv1 256) (_ bv0 256)) x155) (ite x266 x266 (not (bvugt x121 x257))) (= x62 x200) (= (= x139 x180) x198) (= (not x80) x187) (= (bvslt x211 (_ bv0 256)) x140) (= x72 x118) (= x9 (ite (bvslt x87 (_ bv0 256)) (_ bv1 256) (_ bv0 256))) (bvugt (_ bv1161348331 256) x122) (= x85 (_ bv0 256)) (ite x281 x281 (not (bvugt x170 x84))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x287) (= (not x120) x266) (bvugt (_ bv699302164 256) x122) (= (bvadd x25 x238) x200) (bvule x190 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x215 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x91) (= x68 x14) (= x124 (x88 (x95 x68) (x248 (_ bv2 256)) (_ bv0 256))) (= x249 (x88 (x95 x180) x15 (_ bv0 256))) (= (bvadd x25 x238) x42) x164 (= x126 (ite (bvslt x87 x168) (_ bv1 256) (_ bv0 256))) (= x89 (bvadd x271 (bvneg x224))) (= x68 x240) (= x74 (x160 x214)) (= (x244 x113 (_ bv1 256)) x181) (= x45 (ite (= (_ bv0 256) x87) (_ bv0 256) (ite (= false (bvugt (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x87)) (bvudiv (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) (ite (bvult x87 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)) x87 (bvadd (bvneg (bvadd x87 (bvneg (_ bv1 256)))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg (bvadd (bvudiv (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) (ite (bvugt (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x87) x87 (bvadd (bvneg (bvadd (bvneg (_ bv1 256)) x87)) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (bvneg (_ bv1 256)))))))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x121) (= x80 (bvsgt (_ bv0 256) x158)) (= (x88 (x95 x153) (x248 (_ bv1 256)) (_ bv0 256)) x15) (= x2 (not x105)) (= x218 (ite (not x141) (_ bv1 256) (_ bv0 256))) (= x174 (x160 x90)))))) x154) x161))
(assert (= (_ bv1461501637330902918203684832716283019655932542975 256) (x194 (x248 (_ bv1461501637330902918203684832716283019655932542975 256)))))
(assert (= (_ bv1814410054 256) (x194 (x248 (_ bv1814410054 256)))))
(assert (x112 x180))
(check-sat)
(exit)