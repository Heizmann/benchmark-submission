(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x413 0)) (((x399 (x422 x413) (x137 (_ BitVec 256))) (x34 (x432 (_ BitVec 256))) (x332 (x50 x413) (x272 x413) (x421 (_ BitVec 256))))))
(declare-fun x441 () Bool)
(declare-fun x359 (x413) (_ BitVec 256))
(declare-fun x276 () Bool)
(declare-fun x448 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x402 () Bool)
(declare-fun x288 () Bool)
(declare-fun x409 () x413)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x446 () (_ BitVec 256))
(declare-fun x404 () x413)
(declare-fun x354 () (_ BitVec 256))
(declare-fun x453 () Bool)
(declare-fun x425 () Bool)
(declare-fun x261 () Bool)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x309 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x312 () x413)
(declare-fun x37 () Bool)
(declare-fun x123 () (_ BitVec 256))
(declare-fun x438 () Bool)
(declare-fun x436 () x413)
(declare-fun x379 () (_ BitVec 256))
(declare-fun x363 () (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x277 (x413) (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x21 () x413)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x357 () (_ BitVec 256))
(declare-fun x460 (x413) (_ BitVec 256))
(declare-fun x136 () x413)
(declare-fun x102 () x413)
(declare-fun x64 () x413)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x41 () Bool)
(declare-fun x91 () Bool)
(declare-fun x67 () x413)
(declare-fun x364 () x413)
(declare-fun x28 () Bool)
(declare-fun x113 () (_ BitVec 256))
(declare-fun x344 () (_ BitVec 256))
(declare-fun x193 () x413)
(declare-fun x455 () Bool)
(declare-fun x148 () Bool)
(declare-fun x435 () Bool)
(declare-fun x449 () Bool)
(declare-fun x205 () x413)
(declare-fun x166 () x413)
(declare-fun x367 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x241 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x185 () x413)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x349 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x268 () x413)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x439 () (_ BitVec 256))
(declare-fun x112 () Bool)
(declare-fun x333 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x299 () Bool)
(declare-fun x17 () Bool)
(declare-fun x372 () (_ BitVec 256))
(declare-fun x434 () Bool)
(declare-fun x296 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x408 () (_ BitVec 256))
(declare-fun x79 () x413)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x260 () Bool)
(declare-fun x400 () (_ BitVec 256))
(declare-fun x416 () (_ BitVec 256))
(declare-fun x373 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x384 () (_ BitVec 256))
(declare-fun x49 () x413)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x386 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x368 () (_ BitVec 256))
(declare-fun x71 () x413)
(declare-fun x230 () x413)
(declare-fun x375 () x413)
(declare-fun x48 () Bool)
(declare-fun x360 (x413) (_ BitVec 256))
(declare-fun x318 (x413) (_ BitVec 256))
(declare-fun x93 (x413) (_ BitVec 256))
(declare-fun x284 () x413)
(declare-fun x18 () x413)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x103 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x32 (x413) (_ BitVec 256))
(declare-fun x158 () x413)
(declare-fun x244 () (_ BitVec 256))
(declare-fun x38 () x413)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x224 (x413) (_ BitVec 256))
(declare-fun x319 (x413) (_ BitVec 256))
(declare-fun x115 () x413)
(declare-fun x314 (x413) (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x65 () Bool)
(declare-fun x407 () (_ BitVec 256))
(declare-fun x414 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x390 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x383 () (_ BitVec 256))
(declare-fun x13 () x413)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x236 () x413)
(declare-fun x442 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x405 () (_ BitVec 256))
(declare-fun x293 () x413)
(declare-fun x316 () (_ BitVec 256))
(declare-fun x313 () (_ BitVec 256))
(declare-fun x370 () (_ BitVec 256))
(declare-fun x420 () (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x186 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x330 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x280 () x413)
(declare-fun x366 () x413)
(declare-fun x204 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x163 () (_ BitVec 256))
(declare-fun x323 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x258 (x413) (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x199 (x413) (_ BitVec 256))
(declare-fun x398 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x149 () x413)
(declare-fun x308 () Bool)
(declare-fun x14 () Bool)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x265 () Bool)
(declare-fun x417 () x413)
(declare-fun x264 () x413)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x176 () Bool)
(declare-fun x301 () (_ BitVec 256))
(declare-fun x411 () x413)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x454 () x413)
(declare-fun x300 () x413)
(declare-fun x410 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x361 () Bool)
(declare-fun x77 () (_ BitVec 256))
(declare-fun x76 () x413)
(declare-fun x245 () Bool)
(declare-fun x365 () (_ BitVec 256))
(declare-fun x412 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x346 () Bool)
(declare-fun x338 () Bool)
(declare-fun x4 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x289 () x413)
(declare-fun x257 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x424 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x110 (x413) (_ BitVec 256))
(declare-fun x233 () Bool)
(declare-fun x343 () (_ BitVec 256))
(declare-fun x307 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x317 () x413)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x36 () x413)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x26 () x413)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x20 () x413)
(declare-fun x418 (x413) (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x450 () x413)
(declare-fun x341 () (_ BitVec 256))
(declare-fun x161 () x413)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x356 () (_ BitVec 256))
(declare-fun x283 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x403 () Bool)
(declare-fun x200 () Bool)
(declare-fun x290 () Bool)
(declare-fun x33 () Bool)
(declare-fun x320 () x413)
(declare-fun x217 () x413)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x348 () Bool)
(declare-fun x415 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x377 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x388 () x413)
(declare-fun x362 () (_ BitVec 256))
(declare-fun x351 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x35 () Bool)
(declare-fun x381 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x243 () x413)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x281 () x413)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x433 () (_ BitVec 256))
(declare-fun x222 () x413)
(declare-fun x92 () Bool)
(declare-fun x147 () (_ BitVec 256))
(declare-fun x315 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x24 () (_ BitVec 256))
(declare-fun x378 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x310 () (_ BitVec 256))
(declare-fun x380 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x340 () (_ BitVec 256))
(declare-fun x311 () (_ BitVec 256))
(declare-fun x443 () x413)
(declare-fun x247 () x413)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x84 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x392 () x413)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x458 () x413)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x430 () Bool)
(declare-fun x369 () x413)
(declare-fun x127 () x413)
(declare-fun x287 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x180 () x413)
(declare-fun x138 () x413)
(declare-fun x342 () Bool)
(declare-fun x212 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x376 () (_ BitVec 256))
(declare-fun x306 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x201 () x413)
(declare-fun x444 () Bool)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x382 () (_ BitVec 256))
(declare-fun x263 () x413)
(declare-fun x252 () Bool)
(declare-fun x321 () (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x253 () (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x298 () x413)
(declare-fun x393 () Bool)
(declare-fun x206 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x254 () x413)
(declare-fun x278 () Bool)
(declare-fun x267 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x374 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x459 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x231 () x413)
(declare-fun x397 (x413) (_ BitVec 256))
(declare-fun x401 () Bool)
(declare-fun x394 () (_ BitVec 256))
(declare-fun x269 () Bool)
(declare-fun x452 () Bool)
(declare-fun x336 () (_ BitVec 256))
(declare-fun x371 () (_ BitVec 256))
(declare-fun x457 () Bool)
(declare-fun x218 () (_ BitVec 256))
(declare-fun x178 () x413)
(declare-fun x322 () (_ BitVec 256))
(declare-fun x337 () (_ BitVec 256))
(declare-fun x294 () x413)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x347 () Bool)
(declare-fun x105 () (_ BitVec 256))
(declare-fun x40 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x406 () Bool)
(declare-fun x220 () Bool)
(declare-fun x151 () x413)
(declare-fun x447 () x413)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x165 () x413)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x256 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x221 () x413)
(declare-fun x44 () Bool)
(declare-fun x216 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x274 () Bool)
(declare-fun x324 () (_ BitVec 256))
(declare-fun x445 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x295 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x146 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x106 (x413) (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x385 (x413) (_ BitVec 256))
(declare-fun x327 () (_ BitVec 256))
(declare-fun x194 (x413) (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x437 () Bool)
(declare-fun x189 () x413)
(declare-fun x190 () Bool)
(declare-fun x329 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x423 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x255 ((_ BitVec 256)) x413)
(declare-fun x431 () x413)
(declare-fun x262 () x413)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x240 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x426 () Bool)
(declare-fun x456 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x358 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x339 () x413)
(declare-fun x325 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x192 () x413)
(declare-fun x395 () (_ BitVec 256))
(declare-fun x440 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x353 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x143 () Bool)
(declare-fun x141 () (_ BitVec 256))
(declare-fun x95 () x413)
(declare-fun x304 () (_ BitVec 256))
(declare-fun x213 () x413)
(declare-fun x328 () (_ BitVec 256))
(declare-fun x56 () Bool)
(declare-fun x387 () Bool)
(declare-fun x140 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x229 (x413) (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x271 () (_ BitVec 256))
(declare-fun x82 () x413)
(declare-fun x335 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x153 () x413)
(declare-fun x391 () x413)
(declare-fun x19 () (_ BitVec 256))
(define-fun x389 ((x413 x413) (x282 (_ BitVec 256))) x413 (ite ((_ is x399) x413) (x399 (x422 x413) (bvadd x282 (x137 x413))) (ite ((_ is x332) x413) (x332 (x50 x413) (x272 x413) (bvadd (x421 x413) x282)) (x34 (bvadd x282 (x432 x413))))))
(define-fun x396 ((x175 (_ BitVec 256)) (x355 (_ BitVec 256))) Bool (= (bvudiv (bvmul x175 x355) x355) x175))
(define-fun x225 ((x175 (_ BitVec 256)) (x355 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x175 x355) x355) x175))
(define-fun x345 ((x175 (_ BitVec 256)) (x355 (_ BitVec 256))) Bool (= x175 (bvsdiv (bvmul x175 x355) x355)))
(define-fun x334 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x132) (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) (x307 x132)))
(define-fun x451 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= x132 (_ bv132 256)) x442 (x334 x132)))
(define-fun x331 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x132) x310 (x451 x132)))
(define-fun x428 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= x132 (_ bv196 256)) x16 (x331 x132)))
(define-fun x429 ((x132 x413)) (_ BitVec 256) (ite (= x392 x132) x150 (x318 x132)))
(define-fun x326 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x132) (_ bv1 256) (x40 x132)))
(define-fun x179 ((x132 x413)) (_ BitVec 256) (ite (= x13 x132) x390 (x360 x132)))
(define-fun x350 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= x132 (_ bv0 256)) (_ bv1 256) (x40 x132)))
(define-fun x133 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= x132 x154) (_ bv1 256) (x398 x132)))
(define-fun x101 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= x412 x132) (_ bv0 256) (x283 x132)))
(define-fun x184 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= x132 x275) x412 (x103 x132)))
(define-fun x352 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= x132 x162) (_ bv0 256) (x101 x132)))
(define-fun x427 ((x132 (_ BitVec 256))) (_ BitVec 256) (ite (= x132 x160) x162 (x184 x132)))
(define-fun x419 ((x130 (_ BitVec 256))) Bool (=> (and (not (= x130 (_ bv3384965404 256))) (not (= (_ bv1461501637330902918203684832716283019655932542975 256) x130)) (not (= (_ bv3564505029 256) x130)) (not (= (_ bv599290589 256) x130)) (not (= x130 (_ bv404098525 256))) (bvugt x130 (_ bv10000 256)) (not (= x130 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))) (not (= x130 (_ bv4294967296 256))) (not (= (_ bv3839634084 256) x130)) (not (= x130 (_ bv4152920812 256))) (not (= (_ bv3569331386 256) x130)) (not (= (_ bv1461501637330902918203684832716283019655932542976 256) x130)) (not (= x130 (_ bv1086394137 256))) (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x130)) (not (= (_ bv3569979932 256) x130)) (not (= x130 (_ bv117300739 256))) (not (= (_ bv1000000000000000000 256) x130)) (not (= x130 (_ bv4133948374 256))) (not (= x130 (_ bv2172364862 256))) (not (= x130 (_ bv157198259 256))) (not (= (_ bv3505202862 256) x130)) (not (= x130 (_ bv3265688288 256))) (not (= (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x130)) (not (= x130 (_ bv4099215060 256)))) (not ((_ is x34) (x255 x130)))))
(assert (x419 x74))
(assert (=> (bvule x146 (_ bv10000 256)) (= (x34 x146) (x255 x146))))
(assert (= (x397 (x255 x257)) x257))
(assert (= (x255 (_ bv4294967296 256)) (x34 (_ bv4294967296 256))))
(assert (= (or (and x164 (not x33)) x61) x430))
(assert (x419 x336))
(assert (= (x397 (x389 x21 (_ bv3 256))) (bvadd (_ bv3 256) (x397 x21))))
(assert (= (x397 (x34 (_ bv4294967296 256))) (_ bv4294967296 256)))
(assert (= x407 (x397 (x255 x407))))
(assert (= x156 (x397 (x255 x156))))
(assert (x419 x156))
(assert (x419 x2))
(assert (= (x397 (x255 x125)) x125))
(assert (= x98 (x397 (x255 x98))))
(assert (=> (bvuge (_ bv10000 256) x378) (= (x34 x378) (x255 x378))))
(assert (= (x34 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (x255 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))))
(assert (= (x397 (x255 x210)) x210))
(assert (= (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) (x397 (x34 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))))
(assert (x419 x305))
(assert (x419 x295))
(assert (= (x397 (x34 (_ bv1086394137 256))) (_ bv1086394137 256)))
(assert (= (or (and x198 x65) (and (not x438) x228) (and x94 x245) (and x41 x220) (and x402 x361) (and x215 x44) (and (not x342) x261)) x265))
(assert (x419 x125))
(assert (not x406))
(assert (x419 x357))
(assert (= (x397 (x255 x439)) x439))
(assert (=> (bvuge (_ bv10000 256) x439) (= (x34 x439) (x255 x439))))
(assert (x419 x372))
(assert (= x271 (x397 (x255 x271))))
(assert (= (or x17 (and (not x48) x278)) x269))
(assert (x419 x218))
(assert (= (x34 (_ bv404098525 256)) (x255 (_ bv404098525 256))))
(assert (= (x34 (_ bv117300739 256)) (x255 (_ bv117300739 256))))
(assert (=> (bvuge (_ bv10000 256) x163) (= (x255 x163) (x34 x163))))
(assert (= x444 (or x234 x112)))
(assert (= (x34 (_ bv3505202862 256)) (x255 (_ bv3505202862 256))))
(assert (= (=> (and (and (and (bvult (_ bv0 256) x88) (= x320 (x332 (x255 x45) (x34 (_ bv9 256)) (_ bv0 256))) (bvule x146 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x359 (x255 x310)) x88) (not (= x86 (_ bv4133948374 256))) (not (bvult x86 (_ bv4099215060 256))) (= x292 x45) (= x414 x146) (not (bvult x86 (_ bv2172364862 256))) (= (x332 (x255 x146) x320 (_ bv0 256)) x254) (= x343 x424) (= x167 x279) (not (= x86 (_ bv4099215060 256))) (not (bvult x86 (_ bv3569331386 256))) (bvule x45 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (_ bv4152920812 256) x86) (= (x460 x254) x279) (bvuge x279 (_ bv0 256)) (bvule x279 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (and (= x167 x27) (= x200 (bvule x27 x424)))) (and (not (bvugt (_ bv3569331386 256) x123)) (= (x332 (x255 x24) x38 (_ bv0 256)) x165) (not (= (_ bv3569979932 256) x123)) (= x122 (bvand x374 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x343 x170) (bvule x113 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x31 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368)) (not (= (_ bv3569331386 256) x123)) (bvule (_ bv0 256) x113) (= x206 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368)) (= x400 (bvand x374 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x170 (x32 x178)) (= x38 (x332 (x255 x442) x192 (_ bv0 256))) (not (bvult (bvadd x139 x113) x139)) (bvule (_ bv0 256) x170) (= x373 (bvadd x113 x186)) (= x178 (x332 (x255 x66) (x34 (_ bv8 256)) (_ bv0 256))) (= (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256)) x340) (not (bvult x123 (_ bv2172364862 256))) (= x24 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x374)) (= (x277 x165) x113) (bvugt (_ bv4099215060 256) x123) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x170) (bvult (_ bv0 256) x97) (= x97 (x359 (x255 x310))) (bvule x66 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x332 (x255 x206) (x34 (_ bv2 256)) (_ bv0 256)) x192) (= (_ bv3839634084 256) x123) (= x66 x292))) x200) x14))
(assert (= x44 (and (not x41) x220)))
(assert (= (x397 (x255 x47)) x47))
(assert (= (x34 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x255 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= x65 (and (not x215) x44)))
(assert (=> (bvuge (_ bv10000 256) x257) (= (x34 x257) (x255 x257))))
(assert (= (=> (and (and (and (= x362 (x359 (x255 x310))) (bvule x416 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (bvugt (_ bv3569331386 256) x141)) (bvule (_ bv0 256) x8) (not (= x141 (_ bv4099215060 256))) (not (bvugt (_ bv4099215060 256) x141)) (bvult (_ bv0 256) x362) (= x239 x8) (= x383 x147) (not (= (_ bv4133948374 256) x141)) (= (x332 (x255 x416) x79 (_ bv0 256)) x447) (= x156 x292) (= x416 x414) (= (x332 (x255 x156) (x34 (_ bv9 256)) (_ bv0 256)) x79) (= (x460 x447) x8) (= (_ bv4152920812 256) x141) (not (bvult x141 (_ bv2172364862 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x8) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x156)) (and (= x109 (x359 (x255 x310))) (bvule x368 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (bvult x63 (_ bv2172364862 256))) (bvugt x109 (_ bv0 256)) (not (= x63 (_ bv3505202862 256))) (not (bvslt x445 (_ bv96 256))) (= (_ bv0 256) x96) (= (_ bv0 256) x134) (not (bvult x63 (_ bv3265688288 256))) (not (= x63 (_ bv3384965404 256))) (bvule (_ bv0 256) x99) (= x134 x324) (bvsgt x116 (_ bv99 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x152) (= x235 x368) (bvule (_ bv0 256) x152) (not (= x63 (_ bv3265688288 256))) (= (bvugt x177 (_ bv0 256)) x347) (= (bvadd x116 (bvneg (_ bv4 256))) x445) (= x223 x78) (bvult x63 (_ bv3569331386 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x381) x338 (= x139 x186) (= x338 (bvuge x383 x270)) (= x16 x182) (= (x224 x185) x177) (= x374 x29) (= x16 x69) (= (_ bv3564505029 256) x63) (= x78 x152) (= x442 x99) (bvule x374 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x270 x239) (= x248 x368) (= (x332 (x255 x368) (x34 (_ bv3 256)) (_ bv0 256)) x185) (not (bvult x116 (_ bv4 256))) (bvule x99 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x381 (_ bv0 256)))) (and (= x287 false) (= x203 (x258 (x255 x54))) (bvule (_ bv0 256) x135) x56 (bvule x30 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x292) (= (bvugt (x359 (x255 x188)) (_ bv0 256)) x143) (not (bvult x10 (_ bv3569331386 256))) (bvule (_ bv0 256) x157) (bvuge (_ bv255 256) x124) (= x135 (x258 (x255 x188))) (= (_ bv3839634084 256) x10) (bvule x310 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x359 (x255 x310)) x249) (bvuge x251 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x188) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x54) (bvule (_ bv0 256) x207) (bvule x414 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x30 (_ bv0 256)) (bvuge x203 (_ bv0 256)) (bvule x111 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x346 false) (= (x32 x317) x251) (bvule x157 (_ bv1461501637330902918203684832716283019655932542975 256)) x143 (bvule (_ bv0 256) x414) (not (= x310 x188)) (= (bvult (_ bv0 256) (x359 (x255 x310))) x56) (not (= (_ bv3569979932 256) x10)) (bvult (_ bv0 256) x310) (= false x176) (bvult (_ bv0 256) x188) (bvult (_ bv0 256) x54) (= x376 x157) (not (= x188 x54)) (= x118 (_ bv3564505029 256)) (= (x332 (x255 x357) (x34 (_ bv8 256)) (_ bv0 256)) x317) (= x403 (bvult (_ bv0 256) (x359 (x255 x54)))) (= x401 false) (= x251 x147) (= x442 x111) (bvugt (_ bv4099215060 256) x10) (= x207 (x258 (x255 x310))) (bvule (_ bv0 256) x292) (bvuge x124 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x251) (not (= x10 (_ bv3569331386 256))) (bvule (_ bv0 256) x111) (= x292 x357) x403 (not (= x54 x310)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x357) (not (bvugt (_ bv2172364862 256) x10)) (bvult (_ bv0 256) x249) (= x315 (_ bv3 256)))) (and (=> (not x347) x23) (=> (and x347 (and (= (x224 x26) x311) (bvult x210 (_ bv1461501637330902918203684832716283019655932542976 256)) (= x163 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368)) (= (x319 x454) x89) (bvule x210 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvult (_ bv0 256) x311) (= x210 (x418 x217)) (= x454 (x332 (x255 x210) x388 (_ bv0 256))) (= x26 (x332 (x255 x163) (x34 (_ bv3 256)) (_ bv0 256))) (= x388 (x332 (x255 x2) (x34 (_ bv4 256)) (_ bv0 256))) (= x2 (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (bvugt x89 (_ bv0 256)) x84) (= x231 x217) (= x85 (_ bv0 256)) (bvuge x210 (_ bv0 256)) (= x231 (x399 x26 (_ bv0 256))))) (and (=> (and (and (bvule (_ bv0 256) x440) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x440) (= (= x367 (_ bv0 256)) x415) (= (x319 x151) x291) (bvugt x291 (_ bv0 256)) (bvule (_ bv0 256) x367) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x367) (= x264 x95) (= x440 (x229 x95)) (= x372 (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (x332 (x255 x210) x201 (_ bv0 256)) x151) (= (x399 x151 (_ bv0 256)) x264) (bvult x440 (_ bv1461501637330902918203684832716283019655932542976 256)) (= x335 (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x201 (x332 (x255 x372) (x34 (_ bv4 256)) (_ bv0 256))) (= x367 (x32 x281)) (= x281 (x332 (x255 x335) (x34 (_ bv8 256)) (_ bv0 256)))) x84) (and (=> (and (and (= x417 (x332 (x255 x98) (x34 (_ bv2 256)) (_ bv0 256))) (= x280 (x332 (x255 x440) x417 (_ bv0 256))) (= (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256)) x98) (= x36 (x389 x67 (_ bv4 256))) (= x405 x19) (bvule (_ bv0 256) x19) (= x67 (x332 (x255 x210) x280 (_ bv0 256))) (= (x93 x36) x19) (bvule x19 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) x415) x196) (=> (and (and (or (and (not x53) (and (x396 x356 (_ bv1000000000000000000 256)) (= x238 x128) (= x140 (bvmul (_ bv1000000000000000000 256) x356)) (= (bvudiv x140 x195) x238))) (and x53 (= x128 (_ bv0 256)))) (and (bvule x195 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x28 (= x363 (_ bv0 256))) (= x271 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368)) (= x1 (x314 x289)) (= (x332 (x255 x271) (x34 (_ bv2 256)) (_ bv0 256)) x18) (= (x194 x243) x73) (= x149 (x332 (x255 x210) x436 (_ bv0 256))) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368) x336) (= (x32 x161) x195) (= x433 (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (x199 x127) x211) (= (x389 x213 (_ bv2 256)) x127) (= (x332 (x255 x440) x18 (_ bv0 256)) x49) (bvule x73 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (= (_ bv0 256) x356) x53) (= x436 (x332 (x255 x440) x136 (_ bv0 256))) (= (x332 (x255 x440) x102 (_ bv0 256)) x293) (bvule (_ bv0 256) x1) (= (x332 (x255 x210) x293 (_ bv0 256)) x213) (ite x28 x28 (= x211 (bvudiv x356 x363))) (bvule x211 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x211 (_ bv0 256)) (bvule x1 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x289 (x389 x149 (_ bv1 256))) (= x328 (ite (bvugt x1 x139) x186 x1)) (not (bvult x328 x73)) (= x102 (x332 (x255 x336) (x34 (_ bv2 256)) (_ bv0 256))) (= x243 (x389 x21 (_ bv3 256))) (= (x332 (x255 x210) x49 (_ bv0 256)) x21) (= (bvmul x363 x211) x356) (bvule (_ bv0 256) x195) (= x161 (x332 (x255 x433) (x34 (_ bv8 256)) (_ bv0 256))) (not (= x195 (_ bv0 256))) (= x250 (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x363 (bvadd (bvneg x73) x328)) (bvule (_ bv0 256) x73) (= x136 (x332 (x255 x250) (x34 (_ bv2 256)) (_ bv0 256))))) (not x415)) x434))) (=> (not x84) x11))))) x406))
(assert (= (x397 (x255 x305)) x305))
(assert (=> (bvule x305 (_ bv10000 256)) (= (x255 x305) (x34 x305))))
(assert (= x442 (x397 (x255 x442))))
(assert (=> (bvule x206 (_ bv10000 256)) (= (x34 x206) (x255 x206))))
(assert (= (x397 (x255 x55)) x55))
(assert (x419 x57))
(assert (= (x34 (_ bv3265688288 256)) (x255 (_ bv3265688288 256))))
(assert (=> (bvule x335 (_ bv10000 256)) (= (x255 x335) (x34 x335))))
(assert (= (x397 (x255 x310)) x310))
(assert (= (x34 (_ bv2172364862 256)) (x255 (_ bv2172364862 256))))
(assert (= (and (not x91) x348) x52))
(assert (x419 x433))
(assert (= (x397 (x34 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (x419 x257))
(assert (= x357 (x397 (x255 x357))))
(assert (= (x397 (x389 x213 (_ bv2 256))) (bvadd (_ bv2 256) (x397 x213))))
(assert (x419 x9))
(assert (= x368 (x397 (x255 x368))))
(assert (=> (bvule x74 (_ bv10000 256)) (= (x34 x74) (x255 x74))))
(assert (= true x441))
(assert (=> (bvule x191 (_ bv10000 256)) (= (x255 x191) (x34 x191))))
(assert (=> (bvule x271 (_ bv10000 256)) (= (x255 x271) (x34 x271))))
(assert (= x393 (and x430 (not x276))))
(assert (= (x397 (x255 x45)) x45))
(assert (= x234 (and x274 x269)))
(assert (x419 x47))
(assert (= (and (not x92) x52) x456))
(assert (= (x397 (x255 x395)) x395))
(assert (= (x397 (x34 (_ bv4133948374 256))) (_ bv4133948374 256)))
(assert (= (x255 (_ bv1461501637330902918203684832716283019655932542975 256)) (x34 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= x146 (x397 (x255 x146))))
(assert (=> (bvule x47 (_ bv10000 256)) (= (x34 x47) (x255 x47))))
(assert (x419 x440))
(assert (=> (bvule x125 (_ bv10000 256)) (= (x255 x125) (x34 x125))))
(assert (= (x397 (x255 x250)) x250))
(assert (= (bvadd (_ bv1 256) (x397 x369)) (x397 (x389 x369 (_ bv1 256)))))
(assert (=> (bvuge (_ bv10000 256) x416) (= (x255 x416) (x34 x416))))
(assert (= (x397 (x255 x104)) x104))
(assert (= (_ bv3569331386 256) (x397 (x34 (_ bv3569331386 256)))))
(assert (= (_ bv157198259 256) (x397 (x34 (_ bv157198259 256)))))
(assert (x419 x335))
(assert (x419 x24))
(assert (=> (bvule x55 (_ bv10000 256)) (= (x34 x55) (x255 x55))))
(assert (= (x397 (x34 (_ bv3505202862 256))) (_ bv3505202862 256)))
(assert (x419 x163))
(assert (= x90 (and (not x333) x75)))
(assert (= (_ bv117300739 256) (x397 (x34 (_ bv117300739 256)))))
(assert (= (x397 (x255 x416)) x416))
(assert (= (x397 (x255 x2)) x2))
(assert (= (x255 (_ bv3569979932 256)) (x34 (_ bv3569979932 256))))
(assert (= x336 (x397 (x255 x336))))
(assert (= x433 (x397 (x255 x433))))
(assert (= (_ bv3839634084 256) (x397 (x34 (_ bv3839634084 256)))))
(assert (=> (bvuge (_ bv10000 256) x327) (= (x255 x327) (x34 x327))))
(assert (= (and (not x171) x148) x51))
(assert (= x54 (x397 (x255 x54))))
(assert (x419 x378))
(assert (x419 x368))
(assert (= x190 (and x4 x53)))
(assert (= x440 (x397 (x255 x440))))
(assert (= x155 (and x457 (not x107))))
(assert (x419 x250))
(assert (= (and x65 (not x198)) x453))
(assert (= (x397 (x255 x237)) x237))
(assert (= (x397 (x389 x375 (_ bv4 256))) (bvadd (_ bv4 256) (x397 x375))))
(assert (= x70 (and x430 x276)))
(assert (x419 x7))
(assert (= (or x3 x25) x425))
(assert (= (x397 (x255 x24)) x24))
(assert (= (x255 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)) (x34 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))))
(assert (= (and x261 x342) x228))
(assert (= (bvadd (_ bv1 256) (x397 x149)) (x397 (x389 x149 (_ bv1 256)))))
(assert (x419 x105))
(assert (= (x397 (x255 x105)) x105))
(assert (= (_ bv4099215060 256) (x397 (x34 (_ bv4099215060 256)))))
(assert (= (x397 (x255 x206)) x206))
(assert (=> (bvule x433 (_ bv10000 256)) (= (x255 x433) (x34 x433))))
(assert (= (x34 (_ bv1000000000000000000 256)) (x255 (_ bv1000000000000000000 256))))
(assert (= x144 (x397 (x255 x144))))
(assert (x419 x310))
(assert (x419 x188))
(assert (= (=> (= (not (bvugt x177 (_ bv1 256))) x267) (and x23 x267)) x11))
(assert (= x348 (and x6 x43)))
(assert (= x188 (x397 (x255 x188))))
(assert (= (and (not x145) x456) x148))
(assert (x419 x114))
(assert (=> (bvuge (_ bv10000 256) x295) (= (x255 x295) (x34 x295))))
(assert (x419 x327))
(assert (=> (bvuge (_ bv10000 256) x407) (= (x34 x407) (x255 x407))))
(assert (= (_ bv3384965404 256) (x397 (x34 (_ bv3384965404 256)))))
(assert (= (and x426 x90) x457))
(assert (=> (bvule x372 (_ bv10000 256)) (= (x255 x372) (x34 x372))))
(assert (=> (bvuge (_ bv10000 256) x9) (= (x34 x9) (x255 x9))))
(assert (=> (bvuge (_ bv10000 256) x57) (= (x255 x57) (x34 x57))))
(assert (x419 x237))
(assert (x419 x439))
(assert (=> (bvule x368 (_ bv10000 256)) (= (x255 x368) (x34 x368))))
(assert (= (x397 (x255 x191)) x191))
(assert (= x434 (=> (and (not (bvugt x448 (bvadd x128 x448))) (= (x93 x364) x448) (= x244 (bvadd x128 x448)) (= x375 (x332 (x255 x210) x411 (_ bv0 256))) (= (x389 x375 (_ bv4 256)) x364) (= x237 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368)) (bvule x448 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x448) (= (x332 (x255 x440) x115 (_ bv0 256)) x411) (= x405 x244) (= x115 (x332 (x255 x237) (x34 (_ bv2 256)) (_ bv0 256)))) x196)))
(assert (=> (bvuge (_ bv10000 256) x395) (= (x255 x395) (x34 x395))))
(assert (x419 x416))
(assert (x419 x54))
(assert (x419 x191))
(assert (= (x255 (_ bv3839634084 256)) (x34 (_ bv3839634084 256))))
(assert (=> (bvuge (_ bv10000 256) x54) (= (x34 x54) (x255 x54))))
(assert (= x57 (x397 (x255 x57))))
(assert (= (x397 (x255 x163)) x163))
(assert (= (and (not x53) x4) x387))
(assert (= (=> (and (= x187 x68) (= x384 x232)) x252) x37))
(assert (=> (bvule x188 (_ bv10000 256)) (= (x34 x188) (x255 x188))))
(assert (= (or x131 (and (not x347) x441)) x75))
(assert (= x452 (and x90 (not x426))))
(assert (x419 x5))
(assert (= (and x288 x155) x43))
(assert (= (x397 (x34 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)))
(assert (= (x397 (x389 x67 (_ bv4 256))) (bvadd (_ bv4 256) (x397 x67))))
(assert (= x3 (or x387 x190)))
(assert (= (and x441 x347) x256))
(assert (= (_ bv0 256) (x283 x329)))
(assert (=> (bvuge (_ bv10000 256) x440) (= (x255 x440) (x34 x440))))
(assert (= (=> (and (and (= (x359 (x255 x15)) x216) (= x276 (bvult (_ bv0 256) x285)) (not (= (_ bv0 256) x216))) (or (and (and (= (x258 (x255 x15)) x309) (bvult x344 (_ bv4294967296 256)) x380 x435 (= x87 (x258 (x255 x310))) (= x380 (bvuge (x106 (x255 x310)) x87)) (= (= x309 (x106 (x255 x15))) x435)) x276) (not x276))) x308) x159))
(assert (=> (bvuge (_ bv10000 256) x15) (= (x34 x15) (x255 x15))))
(assert (= (x397 (x34 (_ bv404098525 256))) (_ bv404098525 256)))
(assert (= (x397 (x255 x327)) x327))
(assert (= x220 (and (not x361) x402)))
(assert (= x402 (and x438 x228)))
(assert (= (x34 (_ bv3569331386 256)) (x255 (_ bv3569331386 256))))
(assert (=> (bvuge (_ bv10000 256) x66) (= (x34 x66) (x255 x66))))
(assert (= (_ bv3569979932 256) (x397 (x34 (_ bv3569979932 256)))))
(assert (= x261 (and x245 (not x94))))
(assert (= (x397 (x34 (_ bv3265688288 256))) (_ bv3265688288 256)))
(assert (= x74 (x397 (x255 x74))))
(assert (x419 x144))
(assert (= x218 (x397 (x255 x218))))
(assert (=> (bvuge (_ bv10000 256) x144) (= (x255 x144) (x34 x144))))
(assert (= x330 (=> (and (= x273 x297) (= x39 (_ bv0 256))) x437)))
(assert (x419 x210))
(assert (= (x397 (x255 x335)) x335))
(assert (x419 x407))
(assert (=> (bvuge (_ bv10000 256) x310) (= (x255 x310) (x34 x310))))
(assert (x419 x45))
(assert (= x72 (x397 (x255 x72))))
(assert (= (x255 (_ bv157198259 256)) (x34 (_ bv157198259 256))))
(assert (=> (bvule x114 (_ bv10000 256)) (= (x34 x114) (x255 x114))))
(assert (= (=> (and (or x455 (not x455)) (= (= x384 (_ bv0 256)) x455)) x233) x252))
(assert (= (or (and (not x84) x256) x425) x131))
(assert (= (x397 (x389 x247 (_ bv1 256))) (bvadd (_ bv1 256) (x397 x247))))
(assert (x419 x66))
(assert (= (bvadd (x397 x138) (_ bv1 256)) (x397 (x389 x138 (_ bv1 256)))))
(assert (=> (bvuge (_ bv10000 256) x218) (= (x255 x218) (x34 x218))))
(assert (= (x397 (x34 (_ bv4152920812 256))) (_ bv4152920812 256)))
(assert (=> (bvuge (_ bv10000 256) x336) (= (x34 x336) (x255 x336))))
(assert (= x196 (=> (and (= x298 (x332 (x255 x295) (x34 (_ bv4 256)) (_ bv0 256))) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368) x302) (= x20 (x389 x138 (_ bv1 256))) (= x71 (x332 (x255 x407) (x34 (_ bv2 256)) (_ bv0 256))) (bvule x212 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x314 x20) x212) (= (x332 (x255 x210) x298 (_ bv0 256)) x193) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368) x241) (= (x319 x193) x354) (= x138 (x332 (x255 x210) x263 (_ bv0 256))) (= (not (bvugt x354 (_ bv1 256))) x126) (= x423 (ite (bvult x139 x212) x186 x212)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368) x295) (= x263 (x332 (x255 x440) x71 (_ bv0 256))) (bvuge x212 (_ bv0 256)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368) x407)) (and x126 x11))))
(assert (=> (bvuge (_ bv10000 256) x72) (= (x34 x72) (x255 x72))))
(assert (x419 x72))
(assert (x419 x395))
(assert (x419 x146))
(assert (= (x397 (x255 x114)) x114))
(assert (= x245 (and x75 x333)))
(assert (= x278 (or x70 x393)))
(assert (=> (bvuge (_ bv10000 256) x5) (= (x34 x5) (x255 x5))))
(assert (= (x34 (_ bv4152920812 256)) (x255 (_ bv4152920812 256))))
(assert (= (x34 (_ bv3564505029 256)) (x255 (_ bv3564505029 256))))
(assert (= x17 (and x278 x48)))
(assert (= (x397 (x255 x7)) x7))
(assert (= (=> (and (= (not (bvugt x80 (_ bv1 256))) x260) (= x329 (x427 x160)) (bvugt (_ bv4 256) x46) (= (x352 x329) x46)) (and x159 x260)) x168))
(assert (=> (bvuge (_ bv10000 256) x357) (= (x255 x357) (x34 x357))))
(assert (=> (bvule x98 (_ bv10000 256)) (= (x34 x98) (x255 x98))))
(assert (= (=> (and (= x232 (_ bv0 256)) (= x187 x273)) x37) x299))
(assert (=> (bvule x156 (_ bv10000 256)) (= (x255 x156) (x34 x156))))
(assert (= (=> (and (= x39 x384) (= x68 x297)) x252) x437))
(assert (= (x34 (_ bv4133948374 256)) (x255 (_ bv4133948374 256))))
(assert (= (bvadd (_ bv2 256) (x397 x300)) (x397 (x389 x300 (_ bv2 256)))))
(assert (= (x397 (x255 x378)) x378))
(assert (= (or (and (not x288) x155) (and x145 x456) (and x43 (not x6)) (and x91 x348) (and x107 x457) (and x52 x92) (and x148 x171)) x296))
(assert (= (x397 (x34 (_ bv2172364862 256))) (_ bv2172364862 256)))
(assert (= x12 (or x453 x265)))
(assert (= (x397 (x34 (_ bv1000000000000000000 256))) (_ bv1000000000000000000 256)))
(assert (=> (bvuge (_ bv10000 256) x105) (= (x34 x105) (x255 x105))))
(assert (= (x34 (_ bv4099215060 256)) (x255 (_ bv4099215060 256))))
(assert (x419 x55))
(assert (= (x397 (x34 (_ bv3564505029 256))) (_ bv3564505029 256)))
(assert (= x66 (x397 (x255 x66))))
(assert (=> (bvuge (_ bv10000 256) x237) (= (x34 x237) (x255 x237))))
(assert (= x372 (x397 (x255 x372))))
(assert (=> (bvule x210 (_ bv10000 256)) (= (x34 x210) (x255 x210))))
(assert (x419 x271))
(assert (= x61 (and x164 x33)))
(assert (=> (bvuge (_ bv10000 256) x442) (= (x34 x442) (x255 x442))))
(assert (=> (bvule x250 (_ bv10000 256)) (= (x255 x250) (x34 x250))))
(assert (= (=> (and (not (= x42 (_ bv0 256))) (= (bvand x374 (_ bv1461501637330902918203684832716283019655932542975 256)) x72) (= x353 (_ bv128 256)) (= x42 (x359 (x255 x72))) (= x333 (= x72 x188))) (and (=> (and (and (= (= x72 x54) x426) (and x426 (and (= x219 (_ bv100 256)) (= x386 x99) (not (= x242 (_ bv117300739 256))) (= (x359 (x255 x54)) x174) (= x242 (_ bv599290589 256)) (bvugt (_ bv1086394137 256) x242) (= x107 (bvslt x181 (_ bv96 256))) (bvugt x174 (_ bv0 256)) (not (= (_ bv157198259 256) x242)) (not (bvugt (_ bv4 256) x219)) (not (= x242 (_ bv404098525 256))) (= x305 x310) (= x209 x182) (= x181 (bvadd (bvneg (_ bv4 256)) x219)) (= (_ bv100 256) x219) (= (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x77)))) (not x333)) (and (=> (and (and (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x99) x22) (= x288 (= x22 x99))) (not x107)) (and (=> (and (and (= (= x305 x310) x6) (= x305 x337)) x288) (and (=> (not x6) x299) (=> (and x6 (and (= x370 x209) (= x91 (bvult x117 x202)) (= (x360 x391) x408) (= (x332 (x255 x191) (x34 (_ bv1 256)) (_ bv0 256)) x391) (bvule x304 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x408 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x304 (_ bv0 256)) (= x191 (bvand x386 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvuge x408 (_ bv0 256)) (= x304 (x360 x236)) (= (x332 (x255 x305) (x34 (_ bv1 256)) (_ bv0 256)) x236) (bvuge x117 (_ bv0 256)) (bvule x117 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvadd x304 x408) x202))) (and (=> x91 x299) (=> (and (and (= (x332 (x255 x125) (x34 (_ bv1 256)) (_ bv0 256)) x431) (= (x360 x431) x341) (bvule (_ bv0 256) x341) (= x92 (bvugt x209 x341)) (bvule x341 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvand x386 (_ bv1461501637330902918203684832716283019655932542975 256)) x125)) (not x91)) (and (=> x92 x299) (=> (and (and (= (bvadd (bvneg x209) x341) x390) (= (x332 (x255 x305) (x34 (_ bv1 256)) (_ bv0 256)) x409) (= (bvadd x209 x266) x208) (= x439 (bvand x386 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvule x266 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x266) (= (bvugt x266 x208) x145) (= (x179 x409) x266) (= (x332 (x255 x439) (x34 (_ bv1 256)) (_ bv0 256)) x13)) (not x92)) (and (=> (and (and (= x153 (x332 (x255 x105) (x34 (_ bv2 256)) (_ bv0 256))) (= x105 (bvand x386 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvule x321 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x221 (x332 (x255 x310) x153 (_ bv0 256))) (= x321 (x385 x221)) (= (bvugt x209 x321) x171) (bvule (_ bv0 256) x321)) (not x145)) (and (=> (and (and (= (bvadd (bvneg x209) x321) x83) (= x232 (_ bv1 256)) (= (_ bv32 256) x187) (= x121 (bvand x386 (_ bv1461501637330902918203684832716283019655932542975 256)))) (not x171)) x37) (=> x171 x299))) (=> x145 x299))))))))) (=> (not x288) x299))) (=> x107 x299))) (=> (and x333 (and (= (_ bv599290589 256) x286) (= x303 (_ bv100 256)) (not (= x286 (_ bv157198259 256))) (= x99 x325) (= x182 x358) (= (bvslt x214 (_ bv96 256)) x94) (= x214 (bvadd x303 (bvneg (_ bv4 256)))) (not (= x286 (_ bv404098525 256))) (not (= x286 (_ bv117300739 256))) (bvugt x119 (_ bv0 256)) (not (bvult x303 (_ bv4 256))) (= (_ bv100 256) x303) (bvugt (_ bv1086394137 256) x286) (= (x359 (x255 x188)) x119) (= x57 x310) (= x100 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))) (and (=> (and (not x94) (and (= (= x99 x420) x342) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x99) x420))) (and (=> (not x342) x330) (=> (and (and (= x129 x57) (= x438 (= x57 x310))) x342) (and (=> (not x438) x330) (=> (and (and (bvuge x62 (_ bv0 256)) (= (bvadd x62 x313) x81) (bvule x62 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x180 (x332 (x255 x57) (x34 (_ bv1 256)) (_ bv0 256))) (= x114 (bvand x325 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x62 (x318 x82)) (bvule x371 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x358 x227) (bvule x313 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x371) (= x313 (x318 x180)) (= (bvugt x81 x371) x361) (bvuge x313 (_ bv0 256)) (= (x332 (x255 x114) (x34 (_ bv1 256)) (_ bv0 256)) x82)) x438) (and (=> (and (not x361) (and (bvuge x142 (_ bv0 256)) (= (x318 x205) x142) (= (x332 (x255 x144) (x34 (_ bv1 256)) (_ bv0 256)) x205) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x325) x144) (= x41 (bvult x142 x358)) (bvule x142 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (and (=> (and (and (= (bvadd (bvneg x358) x142) x150) (= x268 (x332 (x255 x57) (x34 (_ bv1 256)) (_ bv0 256))) (= x215 (bvult x169 x316)) (= (bvadd x358 x316) x169) (= (x332 (x255 x104) (x34 (_ bv1 256)) (_ bv0 256)) x392) (bvule x316 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x325) x104) (bvule (_ bv0 256) x316) (= (x429 x268) x316)) (not x41)) (and (=> (and (not x215) (and (= x259 (x110 x450)) (bvule x259 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x332 (x255 x310) x443 (_ bv0 256)) x450) (= (x332 (x255 x218) (x34 (_ bv2 256)) (_ bv0 256)) x443) (bvule (_ bv0 256) x259) (= x218 (bvand x325 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x198 (bvugt x358 x259)))) (and (=> x198 x330) (=> (and (and (= x204 (bvadd (bvneg x358) x259)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x325) x306) (= (_ bv1 256) x39) (= x297 (_ bv32 256))) (not x198)) x437))) (=> x215 x330))) (=> x41 x330))) (=> x361 x330))))))) (=> x94 x330))))) x23))
(assert (= (x255 (_ bv1086394137 256)) (x34 (_ bv1086394137 256))))
(assert (= x35 (or x12 x449)))
(assert (= x164 (or (and (not x455) x35) x410)))
(assert (= (x255 (_ bv3384965404 256)) (x34 (_ bv3384965404 256))))
(assert (= (and x455 x35) x410))
(assert (= (x255 (_ bv599290589 256)) (x34 (_ bv599290589 256))))
(assert (= x9 (x397 (x255 x9))))
(assert (= (=> (and (or (and (not x274) (and (= (x332 (x255 x378) (x34 (_ bv2 256)) (_ bv0 256)) x458) (= x284 (x332 (x255 x327) x404 (_ bv0 256))) (not (= x108 (_ bv0 256))) (= x377 (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x58 (bvudiv x16 x108)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368) x378) (bvule x108 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x374) x379) (= x404 (x332 (x255 x442) x458 (_ bv0 256))) (= (bvand x374 (_ bv1461501637330902918203684832716283019655932542975 256)) x327) (bvule (_ bv0 256) x108) (= (x277 x284) x108))) (and x274 (and (= x74 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x374)) (not (= (_ bv0 256) x173)) (= x301 (x314 x312)) (= x312 (x389 x369 (_ bv1 256))) (= x369 (x332 (x255 x257) x222 (_ bv0 256))) (= (x332 (x255 x442) x294 (_ bv0 256)) x262) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x173) (= (= x349 (_ bv0 256)) x172) (= x222 (x332 (x255 x442) x166 (_ bv0 256))) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x374) x55) (= (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256)) x246) (not (bvugt x182 (bvadd x323 x182))) (= (bvudiv x253 x173) x365) (= (x332 (x255 x5) (x34 (_ bv2 256)) (_ bv0 256)) x294) (bvuge x301 (_ bv0 256)) (= (bvadd x16 x323) x253) (ite x172 x172 (= (bvudiv x197 x349) x59)) (= (bvmul x349 x59) x197) (= x230 (x389 x300 (_ bv2 256))) (= (bvand x374 (_ bv1461501637330902918203684832716283019655932542975 256)) x257) (bvuge x173 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x301) (= x158 (x332 (x255 x442) x366 (_ bv0 256))) (bvuge x59 (_ bv0 256)) (= x446 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x374)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368) x7) (= (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256)) x5) (= x173 (x277 x64)) (= (x332 (x255 x395) (x34 (_ bv2 256)) (_ bv0 256)) x366) (= x323 (bvudiv x197 (_ bv1000000000000000000 256))) (= x166 (x332 (x255 x7) (x34 (_ bv2 256)) (_ bv0 256))) (= (x199 x230) x59) (= x64 (x332 (x255 x55) x158 (_ bv0 256))) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x368) x395) (= (x332 (x255 x74) x262 (_ bv0 256)) x300) (not (bvult x301 x139)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x59) (= x349 (bvadd (bvneg x186) x301))))) (and (= x47 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x374)) (= (x332 (x255 x442) x76 (_ bv0 256)) x189) (not (= x285 (_ bv0 256))) (= x339 (x389 x247 (_ bv1 256))) (bvule x120 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x247 (x332 (x255 x47) x189 (_ bv0 256))) (= x9 (bvand x368 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvule (_ bv0 256) x120) (= x120 (x314 x339)) (= (bvult x186 x120) x274) (= x76 (x332 (x255 x9) (x34 (_ bv2 256)) (_ bv0 256))))) x14) x459))
(assert (= x290 (and x256 x84)))
(assert (= x295 (x397 (x255 x295))))
(assert (= (x397 (x255 x5)) x5))
(assert (x419 x98))
(assert (= (=> (and (= (= x285 (_ bv0 256)) x48) (or x48 (not x48))) x459) x308))
(assert (= (_ bv599290589 256) (x397 (x34 (_ bv599290589 256)))))
(assert (x419 x206))
(assert (=> (bvule x2 (_ bv10000 256)) (= (x34 x2) (x255 x2))))
(assert (= (_ bv1461501637330902918203684832716283019655932542975 256) (x397 (x34 (_ bv1461501637330902918203684832716283019655932542975 256)))))
(assert (=> (bvuge (_ bv10000 256) x24) (= (x34 x24) (x255 x24))))
(assert (=> (bvuge (_ bv10000 256) x104) (= (x34 x104) (x255 x104))))
(assert (= (and (not x274) x269) x112))
(assert (= (or x51 x296) x449))
(assert (= (x397 (x255 x15)) x15))
(assert (= x25 (and x290 x415)))
(assert (= x233 (=> (and (not (= (_ bv0 256) x384)) (= (bvand (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256) x382) x351) (= (bvand x60 (_ bv1461501637330902918203684832716283019655932542975 256)) x15) (not (bvsgt (_ bv32 256) x68)) (= x154 (bvadd (_ bv128 256) x351)) (= x412 (bvadd (_ bv64 256) x154)) (= x162 (bvadd x412 (_ bv160 256))) (= x382 (bvadd x68 (_ bv31 256))) (= (bvadd (_ bv32 256) x154) x160) (= x80 (x133 x154)) (= (bvadd x154 (_ bv32 256)) x275) (= x33 (bvult (_ bv0 256) x80))) (and (=> x33 x168) (=> (not x33) x159)))))
(assert (=> (bvule x45 (_ bv10000 256)) (= (x34 x45) (x255 x45))))
(assert (= (and x290 (not x415)) x4))
(assert (x419 x442))
(assert (x419 x104))
(assert (x419 x15))
(assert (=> (bvuge (_ bv10000 256) x7) (= (x255 x7) (x34 x7))))
(assert (= (x397 (x34 (_ bv1461501637330902918203684832716283019655932542976 256))) (_ bv1461501637330902918203684832716283019655932542976 256)))
(assert (= (x34 (_ bv1461501637330902918203684832716283019655932542976 256)) (x255 (_ bv1461501637330902918203684832716283019655932542976 256))))
(check-sat)
(exit)