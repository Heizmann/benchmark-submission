(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x342 0)) (((x169 (x606 x342) (x294 (_ BitVec 256))) (x205 (x31 (_ BitVec 256))) (x404 (x422 x342) (x397 x342) (x260 (_ BitVec 256))))))
(declare-fun x3 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x576 () (_ BitVec 256))
(declare-fun x408 () Bool)
(declare-fun x550 () (_ BitVec 256))
(declare-fun x514 () (_ BitVec 256))
(declare-fun x439 () Bool)
(declare-fun x60 () Bool)
(declare-fun x388 () (_ BitVec 256))
(declare-fun x391 () (_ BitVec 256))
(declare-fun x565 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x418 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x480 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x475 () Bool)
(declare-fun x235 () Bool)
(declare-fun x535 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x495 () Bool)
(declare-fun x361 () Bool)
(declare-fun x118 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x258 () (_ BitVec 256))
(declare-fun x534 () x342)
(declare-fun x457 () Bool)
(declare-fun x449 () Bool)
(declare-fun x518 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x178 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x55 () x342)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x510 () Bool)
(declare-fun x312 () (_ BitVec 256))
(declare-fun x122 (x342) (_ BitVec 256))
(declare-fun x269 () Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x624 () x342)
(declare-fun x393 () (_ BitVec 256))
(declare-fun x604 () Bool)
(declare-fun x128 () Bool)
(declare-fun x394 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x558 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x148 () Bool)
(declare-fun x544 () Bool)
(declare-fun x498 () (_ BitVec 256))
(declare-fun x268 () x342)
(declare-fun x529 () x342)
(declare-fun x589 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x191 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x500 () x342)
(declare-fun x139 () x342)
(declare-fun x360 () (_ BitVec 256))
(declare-fun x245 () Bool)
(declare-fun x310 () Bool)
(declare-fun x496 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x385 () Bool)
(declare-fun x188 () Bool)
(declare-fun x314 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x521 () (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x277 () Bool)
(declare-fun x282 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x100 () Bool)
(declare-fun x428 () x342)
(declare-fun x105 () (_ BitVec 256))
(declare-fun x357 () (_ BitVec 256))
(declare-fun x176 () x342)
(declare-fun x536 () Bool)
(declare-fun x412 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x441 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x41 () Bool)
(declare-fun x292 () (_ BitVec 256))
(declare-fun x405 () (_ BitVec 256))
(declare-fun x513 () Bool)
(declare-fun x352 () (_ BitVec 256))
(declare-fun x321 () (_ BitVec 256))
(declare-fun x253 () Bool)
(declare-fun x399 () Bool)
(declare-fun x467 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x221 () Bool)
(declare-fun x501 () Bool)
(declare-fun x432 () (_ BitVec 256))
(declare-fun x322 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x341 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x568 () (_ BitVec 256))
(declare-fun x623 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x242 () (_ BitVec 256))
(declare-fun x367 () Bool)
(declare-fun x328 () Bool)
(declare-fun x173 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x389 () Bool)
(declare-fun x186 () Bool)
(declare-fun x407 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x308 () Bool)
(declare-fun x127 () Bool)
(declare-fun x311 () (_ BitVec 256))
(declare-fun x353 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x590 () Bool)
(declare-fun x478 () x342)
(declare-fun x271 () Bool)
(declare-fun x232 () Bool)
(declare-fun x458 () Bool)
(declare-fun x12 () (_ BitVec 256))
(declare-fun x582 () Bool)
(declare-fun x117 () Bool)
(declare-fun x165 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x460 () (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x371 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x420 () x342)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x466 () x342)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x320 () (_ BitVec 256))
(declare-fun x351 () (_ BitVec 256))
(declare-fun x398 () x342)
(declare-fun x390 () (_ BitVec 256))
(declare-fun x300 () Bool)
(declare-fun x578 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x375 () (_ BitVec 256))
(declare-fun x340 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x541 () Bool)
(declare-fun x70 () Bool)
(declare-fun x142 () Bool)
(declare-fun x526 () (_ BitVec 256))
(declare-fun x338 () Bool)
(declare-fun x555 () Bool)
(declare-fun x599 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x246 () Bool)
(declare-fun x395 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x548 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x552 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x476 () Bool)
(declare-fun x288 () Bool)
(declare-fun x267 () Bool)
(declare-fun x113 () x342)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x431 () Bool)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x468 () (_ BitVec 256))
(declare-fun x560 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x627 () Bool)
(declare-fun x63 () Bool)
(declare-fun x406 () (_ BitVec 256))
(declare-fun x327 () (_ BitVec 256))
(declare-fun x581 () (_ BitVec 256))
(declare-fun x469 () (_ BitVec 256))
(declare-fun x419 () (_ BitVec 256))
(declare-fun x425 () (_ BitVec 256))
(declare-fun x410 () Bool)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x374 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x566 () Bool)
(declare-fun x616 () Bool)
(declare-fun x523 () Bool)
(declare-fun x444 () (_ BitVec 256))
(declare-fun x259 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x1 () x342)
(declare-fun x600 () Bool)
(declare-fun x625 (x342) (_ BitVec 256))
(declare-fun x337 () Bool)
(declare-fun x138 (x342) (_ BitVec 256))
(declare-fun x346 () Bool)
(declare-fun x6 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x577 () (_ BitVec 256))
(declare-fun x364 () x342)
(declare-fun x298 ((_ BitVec 256)) x342)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x33 () Bool)
(declare-fun x304 () (_ BitVec 256))
(declare-fun x162 () Bool)
(declare-fun x574 () (_ BitVec 256))
(declare-fun x451 () (_ BitVec 256))
(declare-fun x379 () (_ BitVec 256))
(declare-fun x474 (x342) (_ BitVec 256))
(declare-fun x503 () Bool)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x487 () Bool)
(declare-fun x620 () Bool)
(declare-fun x585 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x88 () (_ BitVec 256))
(declare-fun x307 () Bool)
(declare-fun x572 () (_ BitVec 256))
(declare-fun x297 (x342) (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x463 () Bool)
(declare-fun x557 () Bool)
(declare-fun x593 () Bool)
(declare-fun x141 () x342)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x2 (x342) (_ BitVec 256))
(declare-fun x530 () Bool)
(declare-fun x49 () Bool)
(declare-fun x355 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x217 () Bool)
(declare-fun x333 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x378 () Bool)
(declare-fun x569 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x44 () Bool)
(declare-fun x110 () Bool)
(declare-fun x605 () Bool)
(declare-fun x630 () (_ BitVec 256))
(declare-fun x309 () Bool)
(declare-fun x464 () Bool)
(declare-fun x24 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x556 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x376 () (_ BitVec 256))
(declare-fun x426 () (_ BitVec 256))
(declare-fun x368 () (_ BitVec 256))
(declare-fun x123 () Bool)
(declare-fun x48 () Bool)
(declare-fun x613 () (_ BitVec 256))
(declare-fun x204 () Bool)
(declare-fun x286 () x342)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x594 () (_ BitVec 256))
(declare-fun x207 () Bool)
(declare-fun x509 () Bool)
(declare-fun x511 () Bool)
(declare-fun x180 () Bool)
(declare-fun x592 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x347 () x342)
(declare-fun x580 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x306 () (_ BitVec 256))
(declare-fun x586 () (_ BitVec 256))
(declare-fun x179 () Bool)
(declare-fun x317 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x619 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x591 () x342)
(declare-fun x112 () Bool)
(declare-fun x607 () (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x546 () (_ BitVec 256))
(declare-fun x401 () (_ BitVec 256))
(declare-fun x517 () Bool)
(declare-fun x559 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x579 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x433 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x42 () Bool)
(declare-fun x384 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x46 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x446 () Bool)
(declare-fun x488 () Bool)
(declare-fun x83 () Bool)
(declare-fun x626 () (_ BitVec 256))
(declare-fun x531 () (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x508 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x372 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x615 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x524 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x219 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x628 () Bool)
(declare-fun x516 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x482 () (_ BitVec 256))
(declare-fun x362 () Bool)
(declare-fun x492 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x470 () Bool)
(declare-fun x506 () (_ BitVec 256))
(declare-fun x473 () (_ BitVec 256))
(declare-fun x603 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x573 () (_ BitVec 256))
(declare-fun x443 () x342)
(declare-fun x611 () Bool)
(declare-fun x261 () Bool)
(declare-fun x533 () Bool)
(declare-fun x587 () (_ BitVec 256))
(declare-fun x522 () (_ BitVec 256))
(declare-fun x618 () (_ BitVec 256))
(declare-fun x562 () Bool)
(declare-fun x154 () x342)
(declare-fun x453 () Bool)
(declare-fun x424 () Bool)
(declare-fun x588 () x342)
(declare-fun x440 () (_ BitVec 256))
(declare-fun x200 (x342) (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x64 () (_ BitVec 256))
(declare-fun x595 () (_ BitVec 256))
(declare-fun x564 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x462 () Bool)
(declare-fun x73 () x342)
(declare-fun x302 () (_ BitVec 256))
(declare-fun x447 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x448 () Bool)
(declare-fun x455 () Bool)
(declare-fun x313 () x342)
(declare-fun x248 () Bool)
(declare-fun x396 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x477 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x436 () (_ BitVec 256))
(declare-fun x356 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x365 () Bool)
(declare-fun x281 () Bool)
(declare-fun x485 () (_ BitVec 256))
(declare-fun x563 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x512 () Bool)
(declare-fun x614 () x342)
(declare-fun x135 () (_ BitVec 256))
(declare-fun x472 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x80 () Bool)
(declare-fun x608 () (_ BitVec 256))
(declare-fun x343 () (_ BitVec 256))
(declare-fun x324 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x483 () Bool)
(declare-fun x527 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x494 () Bool)
(declare-fun x454 () Bool)
(declare-fun x423 (x342) (_ BitVec 256))
(declare-fun x445 () Bool)
(declare-fun x504 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x438 () Bool)
(declare-fun x493 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x350 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x354 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x621 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x612 () (_ BitVec 256))
(declare-fun x411 () (_ BitVec 256))
(declare-fun x437 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x332 () Bool)
(declare-fun x402 () Bool)
(declare-fun x373 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x598 () Bool)
(declare-fun x264 () (_ BitVec 256))
(declare-fun x21 () x342)
(declare-fun x537 () (_ BitVec 256))
(declare-fun x551 () Bool)
(declare-fun x86 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x358 () Bool)
(declare-fun x315 () Bool)
(declare-fun x381 () (_ BitVec 256))
(declare-fun x602 () (_ BitVec 256))
(declare-fun x459 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x427 () Bool)
(declare-fun x106 () Bool)
(declare-fun x539 () Bool)
(declare-fun x542 () (_ BitVec 256))
(declare-fun x456 () (_ BitVec 256))
(declare-fun x287 () Bool)
(declare-fun x19 () Bool)
(declare-fun x199 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x519 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x486 () (_ BitVec 256))
(declare-fun x481 () (_ BitVec 256))
(declare-fun x172 () x342)
(declare-fun x181 () Bool)
(declare-fun x545 () (_ BitVec 256))
(declare-fun x159 (x342) (_ BitVec 256))
(declare-fun x461 () Bool)
(declare-fun x489 () Bool)
(declare-fun x497 () (_ BitVec 256))
(declare-fun x279 () Bool)
(declare-fun x450 (x342) (_ BitVec 256))
(declare-fun x334 () (_ BitVec 256))
(declare-fun x502 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x540 () (_ BitVec 256))
(declare-fun x87 (x342) (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x348 () (_ BitVec 256))
(declare-fun x414 () (_ BitVec 256))
(declare-fun x330 () (_ BitVec 256))
(declare-fun x339 () Bool)
(declare-fun x561 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x575 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x549 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x363 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x415 () (_ BitVec 256))
(declare-fun x484 () (_ BitVec 256))
(declare-fun x299 () Bool)
(declare-fun x452 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x249 () Bool)
(declare-fun x171 () Bool)
(declare-fun x382 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x609 () Bool)
(declare-fun x596 () (_ BitVec 256))
(declare-fun x325 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x610 () (_ BitVec 256))
(declare-fun x629 () (_ BitVec 256))
(declare-fun x490 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x597 () (_ BitVec 256))
(declare-fun x571 () Bool)
(declare-fun x228 () (_ BitVec 256))
(declare-fun x326 () (_ BitVec 256))
(declare-fun x403 () (_ BitVec 256))
(declare-fun x104 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x323 () Bool)
(declare-fun x244 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x547 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x567 () Bool)
(declare-fun x274 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x491 () (_ BitVec 256))
(declare-fun x583 () Bool)
(declare-fun x377 () (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x416 () (_ BitVec 256))
(declare-fun x153 () Bool)
(declare-fun x601 () Bool)
(declare-fun x125 () Bool)
(declare-fun x387 () Bool)
(declare-fun x212 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x570 () Bool)
(declare-fun x146 () Bool)
(declare-fun x345 () Bool)
(declare-fun x507 () (_ BitVec 256))
(declare-fun x383 () (_ BitVec 256))
(declare-fun x520 () (_ BitVec 256))
(declare-fun x421 () Bool)
(declare-fun x289 () Bool)
(declare-fun x285 () Bool)
(declare-fun x160 () (_ BitVec 256))
(declare-fun x442 () Bool)
(declare-fun x392 () Bool)
(declare-fun x331 () (_ BitVec 256))
(declare-fun x584 () Bool)
(declare-fun x220 () Bool)
(declare-fun x400 () (_ BitVec 256))
(declare-fun x329 () (_ BitVec 256))
(declare-fun x434 () (_ BitVec 256))
(declare-fun x335 () x342)
(declare-fun x206 (x342) (_ BitVec 256))
(declare-fun x316 () Bool)
(declare-fun x283 () (_ BitVec 256))
(declare-fun x319 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x515 () (_ BitVec 256))
(declare-fun x265 () Bool)
(declare-fun x479 () (_ BitVec 256))
(declare-fun x499 () (_ BitVec 256))
(declare-fun x349 () (_ BitVec 256))
(declare-fun x429 () (_ BitVec 256))
(declare-fun x296 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x370 () Bool)
(declare-fun x226 () x342)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x554 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x263 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x359 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x239 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x553 () Bool)
(declare-fun x528 () Bool)
(declare-fun x366 () (_ BitVec 256))
(declare-fun x369 () (_ BitVec 256))
(declare-fun x538 () Bool)
(declare-fun x147 () (_ BitVec 256))
(declare-fun x417 () Bool)
(declare-fun x525 () (_ BitVec 256))
(declare-fun x233 () Bool)
(declare-fun x435 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x465 () Bool)
(declare-fun x129 () (_ BitVec 256))
(declare-fun x303 () Bool)
(define-fun x505 ((x342 x342) (x210 (_ BitVec 256))) x342 (ite ((_ is x169) x342) (x169 (x606 x342) (bvadd x210 (x294 x342))) (ite ((_ is x404) x342) (x404 (x422 x342) (x397 x342) (bvadd (x260 x342) x210)) (x205 (bvadd x210 (x31 x342))))))
(define-fun x247 ((x301 (_ BitVec 256)) (x622 (_ BitVec 256))) Bool (= (bvudiv (bvmul x301 x622) x622) x301))
(define-fun x15 ((x301 (_ BitVec 256)) (x622 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x301 x622) x622) x301))
(define-fun x79 ((x301 (_ BitVec 256)) (x622 (_ BitVec 256))) Bool (= x301 (bvsdiv (bvmul x301 x622) x622)))
(define-fun x617 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x430) x284 (x480 x430)))
(define-fun x532 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv160 256)) x131 (x617 x430)))
(define-fun x471 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv192 256) x430) x218 (x532 x430)))
(define-fun x214 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv224 256)) x10 (x471 x430)))
(define-fun x543 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x430) x168 (x214 x430)))
(define-fun x93 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x430) x124 (x219 x430)))
(define-fun x409 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x430) x586 (x93 x430)))
(define-fun x257 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv128 256)) x280 (x296 x430)))
(define-fun x386 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv160 256)) x518 (x257 x430)))
(define-fun x413 ((x430 x342)) (_ BitVec 256) (ite (= x1 x430) x160 (x625 x430)))
(define-fun x344 ((x430 x342)) (_ BitVec 256) (ite (= x430 x398) x433 (x450 x430)))
(define-fun x156 ((x430 x342)) (_ BitVec 256) (ite (= x430 x500) x27 (x413 x430)))
(define-fun x336 ((x430 x342)) (_ BitVec 256) (ite (= x430 x176) x565 (x344 x430)))
(define-fun x380 ((x238 (_ BitVec 256))) Bool (=> (and (bvugt x238 (_ bv10000 256)) (not (= x238 (_ bv436938878 256))) (not (= (_ bv2265735533 256) x238)) (not (= (_ bv3647180086 256) x238)) (not (= (_ bv2094874590 256) x238)) (not (= (_ bv3995103268 256) x238)) (not (= (_ bv1710941022 256) x238)) (not (= x238 (_ bv558109909 256))) (not (= (_ bv2746363844 256) x238)) (not (= x238 (_ bv699302164 256))) (not (= (_ bv606387804 256) x238)) (not (= x238 (_ bv3207937467 256))) (not (= (_ bv1461501637330902918203684832716283019655932542975 256) x238)) (not (= x238 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (not (= (_ bv1161348331 256) x238)) (not (= x238 (_ bv231365057 256)))) (not ((_ is x205) (x298 x238)))))
(assert (= (x87 (x298 x292)) x292))
(assert (= x241 (and x523 (not x539))))
(assert (= (x205 (_ bv231365057 256)) (x298 (_ bv231365057 256))))
(assert (x380 x20))
(assert (= (x87 (x298 x273)) x273))
(assert (= x554 (or x328 x241 x62 x70 x271 x503 x570)))
(assert (= (=> (= x232 true) x382) x442))
(assert (x380 x561))
(assert (x380 x29))
(assert (= (_ bv3207937467 256) (x87 (x205 (_ bv3207937467 256)))))
(assert (= (x87 (x205 (_ bv436938878 256))) (_ bv436938878 256)))
(assert (= x271 (or (and (not x372) x164) (and x263 (not x417)) (and (not x402) x290) (and x476 (not x513)) (and (not x153) x101) (and (not x233) x127) (and x246 (not x605)) (and x510 (not x424)))))
(assert (= (and x178 x487) x530))
(assert (= (x87 (x205 (_ bv2265735533 256))) (_ bv2265735533 256)))
(assert (= (bvadd (_ bv1 256) (x87 x139)) (x87 (x505 x139 (_ bv1 256)))))
(assert (= (x87 (x205 (_ bv2746363844 256))) (_ bv2746363844 256)))
(assert (= x561 (x87 (x298 x561))))
(assert (= (x205 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x298 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (and x285 x83) x570))
(assert (= x600 (and (not x354) x601)))
(assert (= x453 (=> (= x232 true) x382)))
(assert (x380 x613))
(assert (= (and x303 x253) x458))
(assert (= x62 (and (not x125) x179)))
(assert (= true x555))
(assert (= x127 (and x513 x476)))
(assert (x380 x135))
(assert (= (x205 (_ bv3995103268 256)) (x298 (_ bv3995103268 256))))
(assert (= x445 (and x555 x117)))
(assert (=> (bvule x602 (_ bv10000 256)) (= (x205 x602) (x298 x602))))
(assert (= (bvadd (x87 x1) (_ bv1 256)) (x87 (x505 x1 (_ bv1 256)))))
(assert (= x267 (or x445 x309)))
(assert (= (x87 (x505 x364 (_ bv1 256))) (bvadd (_ bv1 256) (x87 x364))))
(assert (= (and x458 x609) x259))
(assert (x380 x355))
(assert (= (x87 (x505 x335 (_ bv1 256))) (bvadd (_ bv1 256) (x87 x335))))
(assert (= (x298 (_ bv436938878 256)) (x205 (_ bv436938878 256))))
(assert (=> (bvuge (_ bv10000 256) x333) (= (x205 x333) (x298 x333))))
(assert (= (x87 (x505 x529 (_ bv1 256))) (bvadd (_ bv1 256) (x87 x529))))
(assert (= (x87 (x298 x312)) x312))
(assert (= (x87 (x205 (_ bv558109909 256))) (_ bv558109909 256)))
(assert (= x449 (and x554 (not x232))))
(assert (= x107 (x87 (x298 x107))))
(assert (x380 x292))
(assert (= x346 (=> (and (and (= x441 x295) (= x487 (not (= x295 x515))) (= x515 x293) (= x524 (ite x582 x393 x581))) (or (and x487 (and (= x334 x183) (= (bvadd x183 x415) x304) (= x411 x436) (= x222 x415) (= x334 x357) (= x222 x349) (= x209 x304))) (and (not x487) (and (= x202 x302) (= x209 x324) (= x202 x349) (= x302 x411))))) x431)))
(assert (x380 x107))
(assert (= (_ bv231365057 256) (x87 (x205 (_ bv231365057 256)))))
(assert (= x263 (and x308 x365)))
(assert (= (x87 (x205 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (=> (bvule x561 (_ bv10000 256)) (= (x298 x561) (x205 x561))))
(assert (=> (bvuge (_ bv10000 256) x20) (= (x205 x20) (x298 x20))))
(assert (= (x205 (_ bv2265735533 256)) (x298 (_ bv2265735533 256))))
(assert (= (x298 (_ bv1461501637330902918203684832716283019655932542975 256)) (x205 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= x382 (=> (or x232 (not x232)) x598)))
(assert (= x462 (and x178 (not x487))))
(assert (= x389 (=> (and (and (= (not (= x7 x425)) x421) (= x351 (ite x117 x379 x369)) (= x425 x293) (= x441 x7)) (or (and (and (= x444 x149) (= x330 x227) (= x360 x330) (= x592 x227)) (not x421)) (and (and (= x585 x366) (= x149 x88) (= x126 x394) (= x126 x357) (= x360 x440) (= (bvadd x366 (bvneg x394)) x88) (= x592 x585)) x421))) x157)))
(assert (= (x87 (x298 x9)) x9))
(assert (= (=> (= x232 true) x382) x472))
(assert (= (_ bv3995103268 256) (x87 (x205 (_ bv3995103268 256)))))
(assert (x380 x9))
(assert (= x285 (and x601 x354)))
(assert (= x476 (and x510 x424)))
(assert (= (x87 (x505 x478 (_ bv1 256))) (bvadd (x87 x478) (_ bv1 256))))
(assert (= (x87 (x205 (_ bv606387804 256))) (_ bv606387804 256)))
(assert (= (x298 (_ bv699302164 256)) (x205 (_ bv699302164 256))))
(assert (not x130))
(assert (= x178 (or x114 x279)))
(assert (x380 x273))
(assert (= (and x359 x92) x303))
(assert (=> (bvuge (_ bv10000 256) x312) (= (x298 x312) (x205 x312))))
(assert (= (_ bv699302164 256) (x87 (x205 (_ bv699302164 256)))))
(assert (= (x87 (x298 x355)) x355))
(assert (= (and x82 (not x86)) x245))
(assert (= x613 (x87 (x298 x613))))
(assert (=> (bvuge (_ bv10000 256) x9) (= (x298 x9) (x205 x9))))
(assert (= x92 (and x345 x538)))
(assert (= (and x125 x179) x523))
(assert (x380 x81))
(assert (= (and x288 x259) x188))
(assert (= x114 (and x582 x36)))
(assert (= (x298 (_ bv1710941022 256)) (x205 (_ bv1710941022 256))))
(assert (= (bvadd (x87 x614) (_ bv2 256)) (x87 (x505 x614 (_ bv2 256)))))
(assert (= (or x212 x310) x36))
(assert (= x101 (and x605 x246)))
(assert (=> (bvuge (_ bv10000 256) x613) (= (x205 x613) (x298 x613))))
(assert (x380 x333))
(assert (= x602 (x87 (x298 x602))))
(assert (=> (bvule x29 (_ bv10000 256)) (= (x298 x29) (x205 x29))))
(assert (= (x87 (x505 x500 (_ bv1 256))) (bvadd (x87 x500) (_ bv1 256))))
(assert (= (and (not x253) x303) x511))
(assert (= x82 (and x259 (not x288))))
(assert (= (and x555 (not x117)) x309))
(assert (= x135 (x87 (x298 x135))))
(assert (= (x87 (x505 x313 (_ bv1 256))) (bvadd (_ bv1 256) (x87 x313))))
(assert (= (and x554 x232) x489))
(assert (= x516 (and x86 x82)))
(assert (= (x87 (x298 x20)) x20))
(assert (x380 x602))
(assert (= (x205 (_ bv558109909 256)) (x298 (_ bv558109909 256))))
(assert (= x246 (and x233 x127)))
(assert (= x279 (and (not x582) x36)))
(assert (= (and x579 x516) x410))
(assert (= (x87 (x205 (_ bv2094874590 256))) (_ bv2094874590 256)))
(assert (= (and x267 (not x421)) x212))
(assert (= (x87 (x298 x81)) x81))
(assert (x380 x71))
(assert (= (or x265 x245 x44 x604) x328))
(assert (x380 x312))
(assert (= (and (not x345) x538) x265))
(assert (= (x205 (_ bv606387804 256)) (x298 (_ bv606387804 256))))
(assert (= (x87 (x505 x172 (_ bv1 256))) (bvadd (_ bv1 256) (x87 x172))))
(assert (= (and (not x609) x458) x604))
(assert (= (x87 (x298 x29)) x29))
(assert (=> (bvuge (_ bv10000 256) x81) (= (x298 x81) (x205 x81))))
(assert (= x130 (=> (and (and (= (bvugt (x2 (x298 x602)) (_ bv0 256)) x48) x48 (bvugt x602 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x441) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x29) (= x333 x468) (= x108 (_ bv3207937467 256)) (= x208 x451) (bvule (_ bv0 256) x451) (= (x404 (x298 x29) (x205 (_ bv0 256)) (_ bv0 256)) x113) (= x333 x29) (bvule x451 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x297 x113) x451) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x78) (bvule (_ bv0 256) x441) (= (x2 (x298 x602)) x434) (= x78 x119) (bvule (_ bv0 256) x103) (bvule x468 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x293 (_ bv0 256)) (not (bvult x108 (_ bv3207937467 256))) (bvult (_ bv0 256) x434) (bvult x108 (_ bv3995103268 256)) (not (bvult x108 (_ bv2094874590 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x293) (bvule x602 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x474 (x298 x602)) x103) (bvule (_ bv0 256) x468) (bvule (_ bv0 256) x78)) (and (and (and (and (= (x122 x529) x131) (not (bvugt (_ bv2094874590 256) x275)) (= (x396 x561) x203) (= x64 (x543 (_ bv160 256))) (= x47 x561) (= x384 (_ bv1 256)) (= (x543 (_ bv256 256)) x381) (= x364 (x404 (x298 x561) (x205 (_ bv2 256)) (_ bv0 256))) (= (or x501 x67) x248) (bvuge x131 (_ bv0 256)) (= x182 x284) (bvuge x168 (_ bv0 256)) (bvuge x284 (_ bv0 256)) (= x195 x561) (not (bvugt (_ bv3207937467 256) x275)) (= (x138 x141) x168) (bvule x218 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x505 x364 (_ bv1 256)) x529) (bvule x131 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x335 (x505 x139 (_ bv1 256))) (= (x2 (x298 x602)) x305) (bvugt x305 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x168) (= (_ bv3647180086 256) x275) (bvule (_ bv0 256) x218) (= (x371 x195) x507) (bvule (_ bv0 256) x10) (= x284 (x206 x364)) (= x10 (x200 x335)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x284) (= x501 (= x240 (_ bv1 256))) (= x16 (= x203 x131)) (= x240 x136) (= x509 (= x182 x507)) (= (x505 x529 (_ bv1 256)) x139) (bvult x275 (_ bv3995103268 256)) (= (x543 (_ bv192 256)) x400) (= (x505 x335 (_ bv1 256)) x141) (bvule x10 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x509 (= (x159 x139) x218) (= x239 (x543 (_ bv128 256))) (= x311 (x543 (_ bv224 256))) (not (= (_ bv3207937467 256) x275)) x16) (and (and (and (not (= x272 (_ bv231365057 256))) (= (x2 (x298 x602)) x94) (= (x505 x268 (_ bv1 256)) x443) (= (x450 x443) x518) (bvugt (_ bv1161348331 256) x272) (= (x386 (_ bv160 256)) x211) (not (= (_ bv436938878 256) x272)) (= x280 (x625 x268)) (= x229 x250) (= x268 (x404 (x298 x71) x588 (_ bv0 256))) (= x47 x9) (bvult x272 (_ bv699302164 256)) (= x588 (x404 (x298 x9) (x205 (_ bv3 256)) (_ bv0 256))) (bvuge x518 (_ bv0 256)) (= x71 x293) (bvule x71 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x317 (x386 (_ bv128 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x280) (bvuge x280 (_ bv0 256)) (= (_ bv606387804 256) x272) (bvugt x94 (_ bv0 256)) (not (= x272 (_ bv558109909 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x518) (bvult x272 (_ bv2094874590 256)) (= x592 x12)) (and (and (= x293 x242) (= x383 x441) (= x405 x317) (= x349 x211) (= x117 (not (= x242 x383)))) (or (and x117 (and (= x623 x283) (= x89 x283) (= x496 x369) (= x547 x379) (= (bvadd (bvneg x89) x560) x547) (= x514 x250) (= x514 x560))) (and (not x117) (and (= x369 x545) (= x545 x491) (= x379 x170) (= x250 x491)))))) (and (= x502 x239) (= x313 (x404 (x298 x273) x226 (_ bv0 256))) (not (= x435 (_ bv231365057 256))) (= x226 (x404 (x298 x81) (x205 (_ bv3 256)) (_ bv0 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x586) (= x273 x441) (bvule (_ bv0 256) x124) (bvult x435 (_ bv699302164 256)) (= (_ bv606387804 256) x435) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x124) (not (= (_ bv436938878 256) x435)) (= x75 x311) (= x12 (x409 (_ bv160 256))) (= x400 x216) (= x420 (x505 x313 (_ bv1 256))) (bvult (_ bv0 256) x255) (bvugt (_ bv2094874590 256) x435) (= x350 x64) (not (= x435 (_ bv558109909 256))) (= x47 x81) (= (x625 x313) x124) (= x586 (x450 x420)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x273) (= (x2 (x298 x602)) x255) (bvuge x586 (_ bv0 256)) (= x381 x610) (= x229 (x409 (_ bv128 256))) (bvult x435 (_ bv1161348331 256))))) (and (= (= x61 x291) x67) (= x136 x97) (= (= (_ bv1 256) x564) x74) (= x333 x291) (not (bvult x54 (_ bv1161348331 256))) (bvule x97 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x613 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x404 (x298 x613) (x205 (_ bv1 256)) (_ bv0 256)) x154) (= x54 (_ bv1161348331 256)) (bvult x54 (_ bv1710941022 256)) (bvugt x196 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x355) (= x293 x61) (= (_ bv1 256) x419) (bvult x54 (_ bv2094874590 256)) (= (or x251 x74) x455) (= x293 x613) (= x333 x355) (= (x2 (x298 x602)) x196) (= x564 x199) (= (x423 x347) x97) (bvule (_ bv0 256) x97) (= x347 (x404 (x298 x355) x154 (_ bv0 256))))) (and (bvult (_ bv0 256) x504) (= x333 x201) (= (_ bv1161348331 256) x395) (= x25 (x423 x466)) (= x152 x208) (bvule x25 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x312 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (bvult x395 (_ bv1161348331 256))) (= x251 (= x66 x201)) (= x441 x66) (= x107 x333) (bvugt (_ bv2094874590 256) x395) (= (x404 (x298 x107) x286 (_ bv0 256)) x466) (= x441 x312) (bvugt (_ bv1710941022 256) x395) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x107) (= (x2 (x298 x602)) x504) (= x25 x199) (bvule (_ bv0 256) x25) (= (x404 (x298 x312) (x205 (_ bv1 256)) (_ bv0 256)) x286)))) x389)))
(assert (= (or x462 x530) x179))
(assert (= (and x421 x267) x310))
(assert (= (_ bv3647180086 256) (x87 (x205 (_ bv3647180086 256)))))
(assert (=> (bvule x107 (_ bv10000 256)) (= (x205 x107) (x298 x107))))
(assert (= (=> (and (= x319 x8) (= (bvmul x321 x537) x30) (= x597 x85) (= (bvugt x129 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x190) (= x144 (bvmul x282 x388)) (= x40 x282) (= (bvadd x115 (bvneg x589)) x266) (= x441 x140) (= (or x123 x146) x465) (= (or x323 x378) x281) (= x321 x192) (= x612 x349) (= x597 x484) (= (bvmul x187 x374) x574) (= x115 x322) (= x274 (bvadd x145 (bvneg x481))) (= x527 x357) (= x414 (bvmul x134 x39)) (= (not (= (_ bv0 256) x559)) x593) (= x407 x623) (= x350 x492) (= (_ bv0 256) x147) (= x261 (bvult x552 (_ bv0 256))) (= x544 (bvugt (_ bv0 256) x56)) (= x595 x623) (= x56 (bvadd x563 x629)) (= (bvadd (bvneg x542) x5) x552) (= x437 x349) (= (not (= x479 x341)) x361) (= (bvmul x535 x484) x151) (= x91 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x616 (bvugt x603 x144)) (= x374 x524) (= (bvult x224 (_ bv0 256)) x146) (= x77 x610) (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x521) (= x473 x388) (= x39 x189) (= x13 x352) (= (not (= (_ bv0 256) x85)) x408) (= x535 x84) (= (or x190 x544) x399) (= x559 x40) (= x567 (not (= x140 x467))) (= x45 (bvult (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x469)) (= x481 x65) (= x319 x350) (= x262 x597) (= x331 x527) (= x254 x623) (= x234 (bvmul x607 x569)) (= x357 x314) (= x5 x619) (= x293 x467) (= x350 x32) (= x224 (bvadd x447 x6)) (= x34 (bvult x243 x234)) (= x607 x40) (= x597 x537) (= x584 (and x536 x408)) (= x314 x456) (= x51 x592) (= (bvult x151 x77) x536) (= x348 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x134 x351) (= x619 x250) (= (bvugt x30 x574) x494) (= x318 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x405 x18) (= (_ bv0 256) x401) (= x550 x520) (= (bvadd x452 x331) x69) (= x123 (bvugt x69 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (= x603 x610) (= (or x287 (not x332)) x583) (= x558 x357) (= x406 (_ bv0 256)) (= x293 x341) (= x252 x216) (= x596 x589) (= x612 x447) (= x473 x350) (= x105 (bvmul x626 x137)) (= x405 x577) (= x596 x623) (= (bvadd (bvneg x456) x13) x469) (= x350 x84) (= (or x45 x457) x385) (= x339 x332) (= x129 (bvadd x228 x576)) (= x595 x629) (= x357 x65) (= x323 (not x512)) (= (and x465 x567) x142) (= x244 x40) (= x111 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x264 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (_ bv0 256) x580) (= x248 x148) (= (_ bv0 256) x368) (= x499 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x352 x592) (= x192 x350) (= x325 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x457 (bvugt (_ bv0 256) x274)) (= (bvmul x8 x244) x22) (= x479 x441) (= x6 x558) (= x452 x437) (= x118 x187) (= x216 x550) (= x145 x51) (= x228 x254) (= x41 (or x194 x261)) (= x542 x407) (= x512 x455) (= (bvugt x184 (_ bv0 256)) x339) (= x184 x96) (= x315 (and x616 x593)) (= x557 (bvugt x414 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (= (bvult (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x486) x392) (= x378 (not x148)) (= (bvugt x266 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x194) (= x486 (bvmul x262 x95)) (= (_ bv0 256) x375) (= x189 x216) (= (bvugt x105 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x235) (= x427 (and x399 x361)) (= x403 (_ bv0 256)) (= (bvmul x120 x520) x243) (= x287 x232) (= x524 x137) (= x576 x577) (= x32 x569) (= x492 x95) (= x118 x216) (= x18 x563) (= x307 (bvugt x22 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (= x250 x322) (= x120 x351) (= x252 x626)) (and x583 (=> (and (= x358 x41) (= x232 x19) (= (or (not x358) x19) x49)) (and x49 (=> (and (= x232 x100) (= x338 (or x100 (not x590))) (= x590 x385)) (and (=> (and (= x232 x221) (= x427 x611) (= (or x221 (not x611)) x175)) (and (=> (and (= (or (not x475) x362) x551) (= x142 x475) (= x232 x362)) (and x551 (=> (and (= x461 (or (not x299) x110)) (= x307 x299) (= x110 x232)) (and (=> (and (= x392 x488) (= x232 x23) (= x448 (or x23 (not x488)))) (and x448 (=> (and (= x281 x11) (= x106 x232) (= (or x106 (not x11)) x220)) (and (=> (and (= (or x150 (not x553)) x566) (= x553 x557) (= x150 x232)) (and x566 (=> (and (= x76 x34) (= x121 x232) (= x128 (or x121 (not x76)))) (and x128 (=> (and (= x367 x235) (= (or (not x367) x387) x277) (= x387 x232)) (and (=> (and (= x541 (or x620 (not x133))) (= x620 x232) (= x133 x494)) (and (=> (and (= x232 x316) (= (or x316 (not x289)) x223) (= x315 x289)) (and (=> (and (= x232 x463) (= x584 x373) (= (or x463 (not x373)) x454)) (and x454 (=> (and (= x427 x116) (= x204 x41) (= x557 x470) (= x533 x34) (= x575 (or x562 x181)) (= (or x337 x493) x571) (= x235 x269) (= (or x14 x483) x615) (= x142 x493) (= (or x470 x104) x112) (= x181 x385) (= x315 x14) (= x232 x370) (= x249 x392) (= (or x571 x207) x464) (= x171 (or x63 x615)) (= x549 (or x533 x112)) (= (or x171 (not x370)) x33) (= (or x575 x116) x337) (= x307 x207) (= x584 x63) (= x281 x162) (= x490 x339) (= x104 (or x162 x80)) (= x80 (or x249 x464)) (= (or x495 x155) x483) (= x562 (or x490 x204)) (= x495 x494) (= (or x549 x269) x155)) x33))) x223)) x541)) x277)))))) x220)))) x461)))) x175)) x338)))))) x598))
(assert (= (and (not x579) x516) x601))
(assert (= x510 (and x417 x263)))
(assert (=> (bvuge (_ bv10000 256) x135) (= (x298 x135) (x205 x135))))
(assert (= x44 (and x92 (not x359))))
(assert (= x538 (and x402 x290)))
(assert (=> (bvuge (_ bv10000 256) x292) (= (x298 x292) (x205 x292))))
(assert (= (x87 (x205 (_ bv1710941022 256))) (_ bv1710941022 256)))
(assert (= (and x101 x153) x164))
(assert (= (=> (and (= x135 x506) (= x125 (= (_ bv0 256) x96)) (bvule (_ bv0 256) x477) (= (ite x487 x209 x411) x597) (= x306 x357) (bvule x477 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x292 x276) (bvule (_ bv0 256) x109) (= x68 x343) (bvuge x416 (_ bv0 256)) (= x193 x630) (= x68 x416) (= x546 x412) (= x506 x441) (= x132 x276) (bvule x109 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x109 x333) (= x306 x193) (= x498 x20) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x416) (= x412 x320) (= x498 x47) (= x320 x623) (= x167 (x2 (x298 x602))) (bvult (_ bv0 256) x167) (= x293 x132)) (and (=> (and x125 (and (bvult x460 (_ bv3207937467 256)) (not (= (_ bv2094874590 256) x460)) (not (bvult x460 (_ bv2094874590 256))) (= (_ bv2265735533 256) x460) (= x539 (= x135 x506)) (= x135 x52) (= x28 x20) (bvult x460 (_ bv2746363844 256)))) (and (=> (and x539 (and (= (= x292 x276) x308) (= x426 x292))) (and (=> (and x308 (and (= (x404 (x298 x292) x428 (_ bv0 256)) x500) (= x172 (x404 (x298 x20) (x205 (_ bv2 256)) (_ bv0 256))) (= (x404 (x298 x20) (x205 (_ bv3 256)) (_ bv0 256)) x591) (= x17 (bvsgt x546 (_ bv0 256))) (bvule (_ bv0 256) x270) (bvule x270 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvadd x270 (bvneg x412)) x160) (= x270 (x625 x1)) (= x546 x578) (= (x404 (x298 x20) (x205 (_ bv3 256)) (_ bv0 256)) x428) (= (x404 (x298 x135) x591 (_ bv0 256)) x1) (= (ite (not x17) (not x17) (not (bvugt x160 x270))) x417) (= x630 x522))) (and (=> (and x417 (and (= x424 (ite (not x60) (not x60) (not (bvugt x270 x160)))) (= x60 (bvsgt (_ bv0 256) x578)))) (and (=> (and (and (= x165 (bvslt (_ bv0 256) x522)) (= (bvadd x497 (bvneg x630)) x433) (= x398 (x505 x1 (_ bv1 256))) (= x497 (x450 x398)) (bvule (_ bv0 256) x497) (= (ite (not x165) (not x165) (not (bvugt x433 x497))) x513) (bvule x497 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) x424) (and (=> (not x513) x472) (=> (and x513 (and (= x233 (ite (not x173) (not x173) (not (bvugt x497 x433)))) (= x173 (bvsgt (_ bv0 256) x522)))) (and (=> (and (and (bvule x35 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x35 (_ bv0 256)) (= (x413 x500) x35) (= (bvadd x35 x546) x27) (= x528 (bvslt x578 (_ bv0 256))) (= (ite (not x528) (not x528) (not (bvult x35 x27))) x605)) x233) (and (=> (and (and (= (ite (not x217) (not x217) (not (bvugt x35 x27))) x153) (= (bvsgt x578 (_ bv0 256)) x217)) x605) (and (=> (not x153) x472) (=> (and x153 (and (= x300 (bvslt x522 (_ bv0 256))) (bvule (_ bv0 256) x99) (= x176 (x505 x500 (_ bv1 256))) (= x565 (bvadd x99 x630)) (= (ite (not x300) (not x300) (not (bvugt x565 x99))) x372) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x99) (= x99 (x344 x176)))) (and (=> (not x372) x472) (=> (and (and (= (bvsgt x522 (_ bv0 256)) x42) (= (ite (not x42) (not x42) (not (bvugt x99 x565))) x402)) x372) (and (=> (not x402) x472) (=> (and x402 (and (bvule (_ bv0 256) x43) (= x24 (= x485 x43)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x43) (= x43 (x122 x478)) (= (x336 x398) x525) (bvuge x525 (_ bv0 256)) (= (ite (not x46) (_ bv1 256) (_ bv0 256)) x568) (= (x396 x20) x485) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x525) (= x478 (x505 x172 (_ bv1 256))) (= (ite (bvult x143 x43) (_ bv1 256) (_ bv0 256)) x340) (= x345 (= (_ bv0 256) x573)) (= (= x525 (_ bv0 256)) x46) (= (bvand x340 x568) x573) (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x525) x143) x24)) (and (=> (and (and x180 (= x53 (x122 x478)) (= (bvand x258 x621) x390) (= (ite (not x166) (_ bv1 256) (_ bv0 256)) x621) (= x180 (= x53 x102)) (= (x396 x20) x102) (bvule x53 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x278) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x278) (bvuge x53 (_ bv0 256)) (= x359 (= x390 (_ bv0 256))) (= (x336 x176) x278) (= x508 (bvudiv (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x278)) (= x166 (= x278 (_ bv0 256))) (= (ite (bvugt x53 x508) (_ bv1 256) (_ bv0 256)) x258) (= (bvmul x43 x525) x191)) x345) (and (=> (not x359) x442) (=> (and (and (= (x404 (x298 x135) (x205 (_ bv1 256)) (_ bv0 256)) x534) (= (ite (or x439 x438) (_ bv1 256) (_ bv0 256)) x329) (= (= x333 x135) x438) (bvule x177 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x423 x73) x531) (= x177 (x423 x21)) (= x326 (ite x627 (_ bv1 256) (_ bv0 256))) (= x572 (ite x438 (_ bv1 256) (_ bv0 256))) (= (x404 (x298 x292) (x205 (_ bv1 256)) (_ bv0 256)) x624) (= (bvand x26 x329) x519) (= (ite (or x231 x627) (_ bv1 256) (_ bv0 256)) x26) (= x429 (ite x439 (_ bv1 256) (_ bv0 256))) (= (x404 (x298 x333) x624 (_ bv0 256)) x21) (= (bvult (_ bv0 256) x519) x253) (bvule (_ bv0 256) x177) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x531) (= x627 (= (_ bv1 256) x177)) (= x73 (x404 (x298 x333) x534 (_ bv0 256))) (= (ite x231 (_ bv1 256) (_ bv0 256)) x376) (= (bvmul x53 x278) x618) (= (= x333 x292) x231) (bvuge x531 (_ bv0 256)) (= x439 (= x531 (_ bv1 256)))) x359) (and (=> (not x253) x453) (=> (and (and (= (= (_ bv0 256) x185) x158) (= (x156 x1) x185) (= (x159 x614) x59) (= (ite (bvult x198 x59) (_ bv1 256) (_ bv0 256)) x4) (= x37 (bvand x4 x163)) (= x163 (ite (not x158) (_ bv1 256) (_ bv0 256))) (bvuge x59 (_ bv0 256)) (bvule x59 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x185) x198) (= (= (_ bv0 256) x37) x609) (= (x505 x478 (_ bv1 256)) x614) (bvule x185 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x185)) x253) (and (=> (not x609) x442) (=> (and x609 (and (= x288 (bvugt x191 x197)) (= x197 (bvmul x59 x185)))) (and (=> x288 x453) (=> (and (not x288) (and (= (x156 x500) x432) (= x556 (bvand x215 x599)) (bvule (_ bv0 256) x432) (bvule (_ bv0 256) x548) (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x432) x237) (bvule x548 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x599 (ite (not x3) (_ bv1 256) (_ bv0 256))) (= (= x432 (_ bv0 256)) x3) (= (x159 x614) x548) (= x86 (= x556 (_ bv0 256))) (bvule x432 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x215 (ite (bvult x237 x548) (_ bv1 256) (_ bv0 256))))) (and (=> (and (and (= (bvugt x618 x377) x579) (= (bvmul x548 x432) x377)) x86) (and (=> (and (not x579) (and (= x55 (x505 x614 (_ bv2 256))) (bvule x459 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x213 (ite x186 (_ bv1 256) (_ bv0 256))) (= (x336 x398) x459) (= (not (bvugt x50 x191)) x446) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x50) (= x186 (= x459 (_ bv0 256))) (= x482 (ite x446 (_ bv1 256) (_ bv0 256))) (= x354 (bvugt x327 (_ bv0 256))) (= x50 (x138 x55)) (bvule (_ bv0 256) x50) (= (ite (or x446 x186) (_ bv1 256) (_ bv0 256)) x327) (bvule (_ bv0 256) x459))) (and (=> (not x354) x453) (=> (and x354 (and (= x58 (ite x225 (_ bv1 256) (_ bv0 256))) (= x225 (not (bvult x618 x418))) (= (x138 x55) x418) (= (bvugt x526 (_ bv0 256)) x83) (= x236 (ite x517 (_ bv1 256) (_ bv0 256))) (= x98 (x336 x176)) (bvuge x418 (_ bv0 256)) (= x517 (= (_ bv0 256) x98)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x98) (= (ite (or x517 x225) (_ bv1 256) (_ bv0 256)) x526) (bvule x418 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x98 (_ bv0 256)))) (and (=> (and (= false x232) x83) x382) (=> (not x83) x453))))) (=> x579 x453))) (=> (not x86) x442))))))))))) (=> (not x345) x442))))))))) (=> (not x605) x472))) (=> (not x233) x472))))) (=> (not x424) x472))) (=> (not x417) x472))) (=> (and (= true x232) (not x308)) x382))) (=> (and (not x539) (= x232 true)) x382))) (=> (and (= true x232) (not x125)) x382))) x431))
(assert (= x71 (x87 (x298 x71))))
(assert (= (x87 (x298 x333)) x333))
(assert (= (x205 (_ bv3207937467 256)) (x298 (_ bv3207937467 256))))
(assert (=> (bvuge (_ bv10000 256) x273) (= (x298 x273) (x205 x273))))
(assert (= x365 (and x523 x539)))
(assert (= (x298 (_ bv2094874590 256)) (x205 (_ bv2094874590 256))))
(assert (= (and (not x83) x285) x628))
(assert (= (x205 (_ bv3647180086 256)) (x298 (_ bv3647180086 256))))
(assert (= (or x188 x410 x511 x628 x600) x503))
(assert (=> (bvule x355 (_ bv10000 256)) (= (x205 x355) (x298 x355))))
(assert (= (and (not x308) x365) x70))
(assert (=> (bvule x71 (_ bv10000 256)) (= (x205 x71) (x298 x71))))
(assert (= x157 (=> (and (and (= x441 x72) (= x293 x594) (= (not (= x72 x594)) x582) (= (ite x421 x149 x360) x40)) (or (and (not x582) (and (= x405 x391) (= x230 x581) (= x230 x391) (= x587 x393))) (and x582 (and (= x161 x256) (= x90 x405) (= x90 x38) (= x623 x256) (= x393 x608) (= (bvadd x161 x38) x608) (= x581 x363))))) x346)))
(assert (= (_ bv1461501637330902918203684832716283019655932542975 256) (x87 (x205 (_ bv1461501637330902918203684832716283019655932542975 256)))))
(assert (= (_ bv1161348331 256) (x87 (x205 (_ bv1161348331 256)))))
(assert (= (or x449 x489) x174))
(assert (= (bvadd (_ bv1 256) (x87 x268)) (x87 (x505 x268 (_ bv1 256)))))
(assert (= (x205 (_ bv2746363844 256)) (x298 (_ bv2746363844 256))))
(assert (= (x205 (_ bv1161348331 256)) (x298 (_ bv1161348331 256))))
(assert (= x290 (and x372 x164)))
(check-sat)
(exit)