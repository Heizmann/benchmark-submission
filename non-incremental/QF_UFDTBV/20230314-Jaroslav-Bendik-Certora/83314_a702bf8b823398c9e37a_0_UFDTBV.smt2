(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x315 0)) (((x329 (x356 x315) (x310 x315) (x326 (_ BitVec 256))) (x426 (x70 x315) (x276 (_ BitVec 256))) (x130 (x271 (_ BitVec 256))) (x213 (x195 x315) (x106 x315) (x348 x315) (x362 x315) (x61 (_ BitVec 256))))))
(declare-fun x119 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x364 () (_ BitVec 256))
(declare-fun x369 () (_ BitVec 256))
(declare-fun x334 () (_ BitVec 256))
(declare-fun x303 (x315) (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x394 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x343 () Bool)
(declare-fun x368 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x355 () Bool)
(declare-fun x282 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x357 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x261 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x253 () (_ BitVec 256))
(declare-fun x393 () x315)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x427 (x315) (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x425 () (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x380 () (_ BitVec 256))
(declare-fun x421 () (_ BitVec 256))
(declare-fun x331 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x266 () (_ BitVec 256))
(declare-fun x291 () Bool)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x371 () Bool)
(declare-fun x122 () Bool)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x402 () (_ BitVec 256))
(declare-fun x49 () x315)
(declare-fun x404 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x47 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x361 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x312 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x304 ((_ BitVec 256)) x315)
(declare-fun x384 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x349 () Bool)
(declare-fun x169 () Bool)
(declare-fun x386 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x277 () (_ BitVec 256))
(declare-fun x333 () x315)
(declare-fun x138 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x260 () Bool)
(declare-fun x145 () Bool)
(declare-fun x390 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x424 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x415 () (_ BitVec 256))
(declare-fun x268 () Bool)
(declare-fun x350 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x321 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x358 () x315)
(declare-fun x322 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x385 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x204 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x417 () Bool)
(declare-fun x5 () Bool)
(declare-fun x50 () Bool)
(declare-fun x221 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x416 () (_ BitVec 256))
(declare-fun x354 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x373 () (_ BitVec 256))
(declare-fun x365 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x383 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x340 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x395 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x246 () (_ BitVec 256))
(declare-fun x200 () Bool)
(declare-fun x146 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x346 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x311 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x23 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x360 () Bool)
(declare-fun x408 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x314 () Bool)
(declare-fun x1 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x398 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x237 () Bool)
(declare-fun x332 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x366 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x191 () Bool)
(declare-fun x205 () Bool)
(declare-fun x308 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x91 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x323 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x300 () (_ BitVec 256))
(declare-fun x335 () Bool)
(declare-fun x104 () Bool)
(declare-fun x289 (x315) (_ BitVec 256))
(declare-fun x181 () Bool)
(declare-fun x32 () Bool)
(declare-fun x137 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x317 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x372 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x319 () x315)
(declare-fun x180 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x66 () Bool)
(declare-fun x302 () Bool)
(declare-fun x194 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x420 () (_ BitVec 256))
(declare-fun x324 () (_ BitVec 256))
(declare-fun x382 () (_ BitVec 256))
(declare-fun x422 () Bool)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x403 () x315)
(declare-fun x399 () Bool)
(declare-fun x412 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x330 () Bool)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x388 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x305 () Bool)
(declare-fun x90 () Bool)
(declare-fun x409 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x306 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x298 () Bool)
(declare-fun x396 () (_ BitVec 256))
(declare-fun x389 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x406 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x391 () (_ BitVec 256))
(declare-fun x392 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x374 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x263 () Bool)
(declare-fun x313 () (_ BitVec 256))
(declare-fun x342 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x285 () Bool)
(declare-fun x280 () Bool)
(declare-fun x248 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x397 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x376 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x197 () Bool)
(declare-fun x256 () (_ BitVec 256))
(declare-fun x418 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x413 () (_ BitVec 256))
(declare-fun x316 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x359 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x423 () (_ BitVec 256))
(declare-fun x163 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x401 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x405 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x419 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x377 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x344 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x337 () Bool)
(declare-fun x164 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x363 () (_ BitVec 256))
(declare-fun x328 (x315) (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x283 () Bool)
(declare-fun x341 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x99 () Bool)
(declare-fun x6 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x320 () (_ BitVec 256))
(declare-fun x108 () Bool)
(declare-fun x378 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x309 () (_ BitVec 256))
(declare-fun x353 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x338 () (_ BitVec 256))
(declare-fun x400 () (_ BitVec 256))
(declare-fun x87 () Bool)
(declare-fun x71 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x336 () Bool)
(declare-fun x107 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x307 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x339 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x233 () Bool)
(declare-fun x129 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x370 () (_ BitVec 256))
(declare-fun x40 () Bool)
(declare-fun x93 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x288 () Bool)
(declare-fun x162 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x39 () Bool)
(declare-fun x327 () (_ BitVec 256))
(declare-fun x411 () Bool)
(declare-fun x294 () (_ BitVec 256))
(declare-fun x325 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x347 () Bool)
(declare-fun x88 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x387 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x290 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x279 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x375 () (_ BitVec 256))
(declare-fun x351 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(define-fun x345 ((x315 x315) (x208 (_ BitVec 256))) x315 (ite ((_ is x329) x315) (x329 (x356 x315) (x310 x315) (bvadd x208 (x326 x315))) (ite ((_ is x426) x315) (x426 (x70 x315) (bvadd x208 (x276 x315))) (ite ((_ is x213) x315) (x213 (x195 x315) (x106 x315) (x348 x315) (x362 x315) (bvadd x208 (x61 x315))) (x130 (bvadd (x271 x315) x208))))))
(define-fun x295 ((x174 (_ BitVec 256)) (x11 (_ BitVec 256))) Bool (= x174 (bvudiv (bvmul x11 x174) x11)))
(define-fun x143 ((x174 (_ BitVec 256)) (x11 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x174 x11) x11) x174))
(define-fun x352 ((x174 (_ BitVec 256)) (x11 (_ BitVec 256))) Bool (= x174 (bvsdiv (bvmul x11 x174) x11)))
(define-fun x410 ((x155 x315)) (_ BitVec 256) (ite (= (x130 (_ bv13 256)) x155) x222 (x303 x155)))
(define-fun x31 ((x155 x315)) (_ BitVec 256) (ite (= (x130 (_ bv14 256)) x155) x373 (x410 x155)))
(define-fun x414 ((x155 x315)) (_ BitVec 256) (ite (= (x130 (_ bv15 256)) x155) x60 (x31 x155)))
(define-fun x20 ((x155 x315)) (_ BitVec 256) (ite (= (x130 (_ bv16 256)) x155) x338 (x414 x155)))
(define-fun x38 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 (_ bv128 256)) x316 (x138 x155)))
(define-fun x165 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x155) (ite x99 (_ bv1 256) (_ bv0 256)) (x38 x155)))
(define-fun x235 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x155) x167 (x146 x155)))
(define-fun x36 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 (_ bv160 256)) (ite x184 (_ bv1 256) (_ bv0 256)) (x235 x155)))
(define-fun x33 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 x409) (_ bv77196514420459877940035116867124998943289115686762304616657918434777787006976 256) (x107 x155)))
(define-fun x381 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x409 x155) (_ bv0 256) (x33 x155)))
(define-fun x379 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x243 x155) (_ bv70508962019145425934951811999677760319478833095128838543097651878529435959296 256) (x381 x155)))
(define-fun x218 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x149 x155) (x289 x393) (x379 x155)))
(define-fun x199 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 x114) x41 (x218 x155)))
(define-fun x262 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x97 x155) x421 (x199 x155)))
(define-fun x407 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x243 x155) (ite true (_ bv1 256) (_ bv0 256)) (x262 x155)))
(define-fun x186 ((x367 (_ BitVec 256))) Bool (=> (and (not (= (_ bv2876725745 256) x367)) (not (= x367 (_ bv503383097 256))) (not (= (_ bv3366849169 256) x367)) (not (= x367 (_ bv3249860859 256))) (not (= (_ bv686821956 256) x367)) (not (= (_ bv1439069736 256) x367)) (not (= x367 (_ bv3506505391 256))) (not (= x367 (_ bv743225245 256))) (not (= (_ bv1816029635 256) x367)) (not (= x367 (_ bv1062488491900878629424266116482631147622884293147 256))) (not (= (_ bv1871194811 256) x367)) (not (= (_ bv3224796394 256) x367)) (not (= x367 (_ bv25742203781880459408941457317362166305709681742799472914177068605934923677696 256))) (not (= x367 (_ bv599290589 256))) (not (= x367 (_ bv790236105 256))) (not (= (_ bv21304723245256853039595661774342629002073543191790936201937503064778531143680 256) x367)) (not (= (_ bv86400 256) x367)) (not (= (_ bv1984976886 256) x367)) (not (= x367 (_ bv1531409238 256))) (not (= (_ bv3567393941 256) x367)) (not (= x367 (_ bv3002540418 256))) (not (= (_ bv910484757 256) x367)) (not (= x367 (_ bv2127478272 256))) (not (= x367 (_ bv26959946667150639794667015087019630673637144422540572481103610249216 256))) (not (= (_ bv922701707 256) x367)) (not (= x367 (_ bv2863377861 256))) (not (= x367 (_ bv3996650231 256))) (not (= (_ bv3871629458 256) x367)) (not (= (_ bv596258137 256) x367)) (not (= x367 (_ bv106320276355336348263208190817157392285036095892762275362566149969828045127680 256))) (bvult (_ bv10000 256) x367) (not (= x367 (_ bv100000 256))) (not (= (_ bv1862597803 256) x367)) (not (= (_ bv1738207182 256) x367)) (not (= (_ bv1840041978 256) x367)) (not (= (_ bv2966737888 256) x367)) (not (= (_ bv77196514420459877940035116867124998943289115686762304616657918434777787006976 256) x367)) (not (= (_ bv2580288415 256) x367)) (not (= (_ bv3812870723 256) x367)) (not (= x367 (_ bv1356689113 256))) (not (= x367 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (= (_ bv3008386744 256) x367)) (not (= x367 (_ bv822145385 256))) (not (= x367 (_ bv954831406 256))) (not (= (_ bv3943638230 256) x367)) (not (= (_ bv770885568 256) x367)) (not (= (_ bv826074471 256) x367)) (not (= x367 (_ bv4105672269 256))) (not (= (_ bv3890975986 256) x367)) (not (= (_ bv110688705405039355050572217931781119515373813223972846963051619115990310191104 256) x367)) (not (= (_ bv519173431 256) x367)) (not (= (_ bv3051865383 256) x367)) (not (= (_ bv2064814097 256) x367)) (not (= x367 (_ bv70508962019145425934951811999677760319478833095128838543097651878529435959296 256))) (not (= (_ bv500647658 256) x367)) (not (= x367 (_ bv15314092380000 256))) (not (= (_ bv36576266130383907740409294828766280552204369950469466485900666250106563985408 256) x367)) (not (= x367 (_ bv2039265891 256)))) (not ((_ is x130) (x304 x367)))))
(assert (= (and x225 x205) x388))
(assert (=> (bvule (_ bv3943638230 256) (_ bv10000 256)) (= (x304 (_ bv3943638230 256)) (x130 (_ bv3943638230 256)))))
(assert (= (and (not x22) x39) x194))
(assert (= (_ bv826074471 256) (x289 (x130 (_ bv826074471 256)))))
(assert (=> (bvuge (_ bv10000 256) (_ bv4105672269 256)) (= (x130 (_ bv4105672269 256)) (x304 (_ bv4105672269 256)))))
(assert (= (_ bv2966737888 256) (x289 (x130 (_ bv2966737888 256)))))
(assert (=> (bvule x113 (_ bv10000 256)) (= (x130 x113) (x304 x113))))
(assert (= x104 (and x305 x108)))
(assert (= (x130 (_ bv1862597803 256)) (x304 (_ bv1862597803 256))))
(assert (= (_ bv822145385 256) (x289 (x130 (_ bv822145385 256)))))
(assert (= (x289 (x130 (_ bv519173431 256))) (_ bv519173431 256)))
(assert (=> (bvuge (_ bv10000 256) x56) (= (x304 x56) (x130 x56))))
(assert (= (x289 (x304 (_ bv790236105 256))) (_ bv790236105 256)))
(assert (= (_ bv106320276355336348263208190817157392285036095892762275362566149969828045127680 256) (x289 (x130 (_ bv106320276355336348263208190817157392285036095892762275362566149969828045127680 256)))))
(assert (= (x289 (x130 (_ bv1816029635 256))) (_ bv1816029635 256)))
(assert (= (x304 (_ bv954831406 256)) (x130 (_ bv954831406 256))))
(assert (= (x289 (x130 (_ bv3249860859 256))) (_ bv3249860859 256)))
(assert (= (x289 (x130 (_ bv2064814097 256))) (_ bv2064814097 256)))
(assert (= (_ bv3224796394 256) (x289 (x130 (_ bv3224796394 256)))))
(assert (= (x304 (_ bv1871194811 256)) (x130 (_ bv1871194811 256))))
(assert (= (_ bv1461501637330902918203684832716283019655932542975 256) (x289 (x130 (_ bv1461501637330902918203684832716283019655932542975 256)))))
(assert (= (or x357 x197) x50))
(assert (= (x304 (_ bv1984976886 256)) (x130 (_ bv1984976886 256))))
(assert (x186 (_ bv4105672269 256)))
(assert (= (_ bv2876725745 256) (x289 (x130 (_ bv2876725745 256)))))
(assert (= (x130 (_ bv110688705405039355050572217931781119515373813223972846963051619115990310191104 256)) (x304 (_ bv110688705405039355050572217931781119515373813223972846963051619115990310191104 256))))
(assert (= x68 (and x109 x190)))
(assert (= (x130 (_ bv70508962019145425934951811999677760319478833095128838543097651878529435959296 256)) (x304 (_ bv70508962019145425934951811999677760319478833095128838543097651878529435959296 256))))
(assert (= (_ bv3366849169 256) (x289 (x130 (_ bv3366849169 256)))))
(assert (= (x130 (_ bv26959946667150639794667015087019630673637144422540572481103610249216 256)) (x304 (_ bv26959946667150639794667015087019630673637144422540572481103610249216 256))))
(assert (= (x304 (_ bv3002540418 256)) (x130 (_ bv3002540418 256))))
(assert (= (x130 (_ bv3051865383 256)) (x304 (_ bv3051865383 256))))
(assert (= (x304 (_ bv106320276355336348263208190817157392285036095892762275362566149969828045127680 256)) (x130 (_ bv106320276355336348263208190817157392285036095892762275362566149969828045127680 256))))
(assert (= (x289 (x130 (_ bv21304723245256853039595661774342629002073543191790936201937503064778531143680 256))) (_ bv21304723245256853039595661774342629002073543191790936201937503064778531143680 256)))
(assert (= (=> (and (= x30 x222) (= (_ bv1 256) x351)) x298) x18))
(assert (= (or x422 x90) x355))
(assert (= (x289 (x130 (_ bv15314092380000 256))) (_ bv15314092380000 256)))
(assert (= (x289 (x130 (_ bv110688705405039355050572217931781119515373813223972846963051619115990310191104 256))) (_ bv110688705405039355050572217931781119515373813223972846963051619115990310191104 256)))
(assert (= (x289 (x304 x43)) x43))
(assert (= x47 (=> (and (and (= x391 (x36 (_ bv128 256))) (= x184 (not (= (_ bv0 256) x115))) (= x46 (x36 (_ bv160 256)))) (and (= x335 x87) (= (not x335) x121) (= x392 x87) (= x392 (not (= (_ bv0 256) x46))))) x121)))
(assert (= (x304 (_ bv25742203781880459408941457317362166305709681742799472914177068605934923677696 256)) (x130 (_ bv25742203781880459408941457317362166305709681742799472914177068605934923677696 256))))
(assert (= (and (not x305) x108) x302))
(assert (= (x130 (_ bv596258137 256)) (x304 (_ bv596258137 256))))
(assert (not x336))
(assert (= (and x162 x200) x411))
(assert (= (_ bv3871629458 256) (x289 (x130 (_ bv3871629458 256)))))
(assert (= (_ bv1984976886 256) (x289 (x130 (_ bv1984976886 256)))))
(assert (x186 (_ bv3943638230 256)))
(assert (= (x289 (x130 (_ bv2580288415 256))) (_ bv2580288415 256)))
(assert (= (x130 (_ bv3506505391 256)) (x304 (_ bv3506505391 256))))
(assert (= x32 (=> (and (not (bvugt x420 (_ bv5000 256))) (= x196 (x303 (x130 (_ bv16 256)))) (= x227 (x303 (x130 (_ bv15 256)))) (not (bvugt (_ bv86400 256) x25)) (not (bvult x420 (_ bv1 256))) (= (x303 (x130 (_ bv13 256))) x185) (not (bvugt x93 x2)) (= (x303 (x130 (_ bv14 256))) x320) (= x25 (bvadd x338 (bvneg x60))) (= x71 (bvugt x196 x60)) (bvult (_ bv0 256) x255)) (and (=> (and (not x71) (and (= x222 x320) (= x351 (_ bv0 256)))) x298) (=> (and (and (= (bvult x185 x320) x312) (or (and x312 (and (= x423 x30) (= x413 (bvadd x320 (bvneg x185))) (bvugt x83 (_ bv0 256)) (= x7 (bvmul x413 x176)) (= (bvadd (bvneg x227) x196) x83) (= (bvadd (bvneg x227) x60) x176) (= x423 (bvadd x185 x74)) (= x74 (bvudiv x7 x83)))) (and (not x312) (and (= x300 (bvmul x287 x299)) (bvult (_ bv0 256) x405) (= x405 (bvadd x196 (bvneg x227))) (= x30 x375) (= x375 (bvadd (bvneg x386) x185)) (= (bvudiv x300 x405) x386) (= (bvadd x185 (bvneg x320)) x287) (= (bvadd x60 (bvneg x227)) x299))))) x71) x18)))))
(assert (= (or x194 x355) x109))
(assert (x186 (bvlshr x26 (_ bv224 256))))
(assert (= (or x72 x372 x343) x399))
(assert (= x225 (and (not x417) x45)))
(assert (= (_ bv790236105 256) (x289 (x130 (_ bv790236105 256)))))
(assert (x186 (_ bv790236105 256)))
(assert (= (x130 (_ bv503383097 256)) (x304 (_ bv503383097 256))))
(assert (= x285 (=> (and (= x409 x135) (= x160 x140)) x147)))
(assert (= (_ bv3943638230 256) (x289 (x304 (_ bv3943638230 256)))))
(assert (= x180 (and x288 x368)))
(assert (= (_ bv0 256) (x107 x111)))
(assert (= (x289 (x130 (_ bv26959946667150639794667015087019630673637144422540572481103610249216 256))) (_ bv26959946667150639794667015087019630673637144422540572481103610249216 256)))
(assert (=> (bvuge (_ bv10000 256) x13) (= (x130 x13) (x304 x13))))
(assert (= x421 (x289 (x304 x421))))
(assert (= (x304 (_ bv2039265891 256)) (x130 (_ bv2039265891 256))))
(assert (= (x130 (_ bv77196514420459877940035116867124998943289115686762304616657918434777787006976 256)) (x304 (_ bv77196514420459877940035116867124998943289115686762304616657918434777787006976 256))))
(assert (= (x289 (x130 (_ bv3943638230 256))) (_ bv3943638230 256)))
(assert (= (x304 (_ bv1356689113 256)) (x130 (_ bv1356689113 256))))
(assert (= (_ bv0 256) (x107 x327)))
(assert (= (and x349 x360) x197))
(assert (= (x289 (x130 (_ bv2863377861 256))) (_ bv2863377861 256)))
(assert (= (x130 (_ bv3008386744 256)) (x304 (_ bv3008386744 256))))
(assert (= (x304 (_ bv2580288415 256)) (x130 (_ bv2580288415 256))))
(assert (= x226 (and x325 x411)))
(assert (= (x289 (x130 (_ bv3008386744 256))) (_ bv3008386744 256)))
(assert (x186 x113))
(assert (= (_ bv1840041978 256) (x289 (x130 (_ bv1840041978 256)))))
(assert (= (x130 (_ bv519173431 256)) (x304 (_ bv519173431 256))))
(assert (x186 (_ bv954831406 256)))
(assert (= (or x180 x399 x388) x90))
(assert (= (=> (and (and (= x62 (x165 (_ bv160 256))) (= (not (= x418 (_ bv0 256))) x99) (= (x165 (_ bv128 256)) x324)) (and (and (= x69 x324) x191 (not (bvult x419 (_ bv500647658 256))) (= x340 (not (= (_ bv0 256) x62))) (= x419 (_ bv519173431 256)) (not (= (_ bv503383097 256) x419)) (not (= (_ bv500647658 256) x419)) (= x340 x404) (bvugt x252 (_ bv0 256)) (= (_ bv5000 256) x128) (= x317 x404) (= x191 (not x317)) (bvugt (_ bv743225245 256) x419) (= x69 x395) (= (x427 (x304 x421)) x252) (bvult x419 (_ bv954831406 256)) (= x415 (_ bv5000 256)) (bvult x419 (_ bv2127478272 256)) (bvugt (_ bv596258137 256) x419)) (and (not (= x168 (_ bv743225245 256))) (= x231 x294) (not (bvugt (_ bv743225245 256) x168)) (bvult x168 (_ bv822145385 256)) (bvugt x378 (_ bv0 256)) x337 (= (_ bv790236105 256) x168) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x139) x150) (= x22 (not (= (_ bv1062488491900878629424266116482631147622884293147 256) x150))) (= x245 x6) (= (_ bv0 256) x323) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x28) (= (bvult x395 (_ bv5000 256)) x337) (bvuge x37 (_ bv0 256)) (= x93 x60) (= x393 (x213 (x130 (_ bv36 256)) (x130 (_ bv32 256)) (x304 x56) (x304 (bvlshr x26 (_ bv224 256))) (_ bv0 256))) (= (_ bv5000 256) x179) (= x37 x245) (= x296 x41) (bvult x168 (_ bv2127478272 256)) (= x294 x178) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x296) (bvugt (_ bv954831406 256) x168) (= (x427 (x304 x421)) x378) (= x44 x311) (not (bvult x168 (_ bv500647658 256))) (bvule (_ bv0 256) x28) (= x26 (bvmul (_ bv26959946667150639794667015087019630673637144422540572481103610249216 256) x168)) (bvule x37 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x168 (_ bv770885568 256))) (= x338 x311) (= x2 x338) (= x206 x323) (bvuge x296 (_ bv0 256)) (= x420 x231)))) (and (=> (and (and (= x140 (ite x22 (_ bv1 256) (_ bv0 256))) (= (_ bv196 256) x409)) (not x22)) x147) (=> (and x22 (and (= (x213 (x130 (_ bv36 256)) (x130 (_ bv32 256)) (x304 x56) (x304 (_ bv4105672269 256)) (_ bv0 256)) x333) (= x42 (_ bv110688705405039355050572217931781119515373813223972846963051619115990310191104 256)) (= x417 (= x393 x333)))) (and (=> (and (and (= x160 (ite x417 (_ bv1 256) (_ bv0 256))) (= x135 (_ bv264 256))) x417) x285) (=> (and (not x417) (and (= (x213 (x130 (_ bv36 256)) (x130 (_ bv32 256)) (x304 x56) (x304 (_ bv790236105 256)) (_ bv0 256)) x319) (= x175 (_ bv21304723245256853039595661774342629002073543191790936201937503064778531143680 256)) (= x205 (= x319 x393)))) (and (=> (and (and (= x368 (= x393 x358)) (= (x213 (x130 (_ bv36 256)) (x130 (_ bv32 256)) (x304 x56) (x304 (_ bv3943638230 256)) (_ bv0 256)) x358) (= x365 (_ bv106320276355336348263208190817157392285036095892762275362566149969828045127680 256))) (not x205)) (and (=> (and (not x368) (and (and (= x403 (x213 (x130 (_ bv36 256)) (x130 (_ bv32 256)) (x304 x56) (x304 (_ bv954831406 256)) (_ bv0 256))) (= x122 (= x393 x403)) (= (_ bv25742203781880459408941457317362166305709681742799472914177068605934923677696 256) x321)) (or (and x122 (and (= (ite x122 (_ bv1 256) (_ bv0 256)) x8) (= x51 (_ bv468 256)))) (and (not x122) (and (and (= (_ bv36576266130383907740409294828766280552204369950469466485900666250106563985408 256) x124) (= x49 (x213 (x130 (_ bv36 256)) (x130 (_ bv32 256)) (x304 x56) (x304 (_ bv1356689113 256)) (_ bv0 256))) (= x131 (= x49 x393))) (or (and (and (= x212 (_ bv0 256)) (= x51 (_ bv536 256)) (= x8 (_ bv0 256))) (not x131)) (and x131 (and (= (ite x131 (_ bv1 256) (_ bv0 256)) x8) (= x51 (_ bv536 256)))))))))) x5) (=> (and x368 (and (= (_ bv400 256) x177) (= (ite x368 (_ bv1 256) (_ bv0 256)) x258))) x263))) (=> (and x205 (and (= x177 (_ bv332 256)) (= x258 (ite x205 (_ bv1 256) (_ bv0 256))))) x263))))))) x145))
(assert (= (x289 (x130 (_ bv503383097 256))) (_ bv503383097 256)))
(assert (= (x130 (_ bv3943638230 256)) (x304 (_ bv3943638230 256))))
(assert (= (x304 (_ bv3224796394 256)) (x130 (_ bv3224796394 256))))
(assert (= (x130 (_ bv2966737888 256)) (x304 (_ bv2966737888 256))))
(assert (= x292 (=> (and (= (_ bv1 256) x115) (= x167 x216)) x47)))
(assert (= (x289 (x304 (_ bv1356689113 256))) (_ bv1356689113 256)))
(assert (= (x289 (x130 (_ bv596258137 256))) (_ bv596258137 256)))
(assert (= (x130 (_ bv2876725745 256)) (x304 (_ bv2876725745 256))))
(assert (= (and (not x190) x109) x27))
(assert (= (x130 (_ bv2127478272 256)) (x304 (_ bv2127478272 256))))
(assert (= (x130 (_ bv36576266130383907740409294828766280552204369950469466485900666250106563985408 256)) (x304 (_ bv36576266130383907740409294828766280552204369950469466485900666250106563985408 256))))
(assert (= (x130 (_ bv3567393941 256)) (x304 (_ bv3567393941 256))))
(assert (= (x130 (_ bv770885568 256)) (x304 (_ bv770885568 256))))
(assert (= (x289 (x130 (_ bv1062488491900878629424266116482631147622884293147 256))) (_ bv1062488491900878629424266116482631147622884293147 256)))
(assert (=> (bvule (bvlshr x26 (_ bv224 256)) (_ bv10000 256)) (= (x304 (bvlshr x26 (_ bv224 256))) (x130 (bvlshr x26 (_ bv224 256))))))
(assert (= (=> (and (and (bvuge x364 (_ bv0 256)) (= x354 (bvugt (x427 (x304 x13)) (_ bv0 256))) (not (= x421 x113)) (not (= x421 x350)) (not (= x43 x421)) (not (bvugt (_ bv2127478272 256) x57)) (bvugt (_ bv3366849169 256) x57) (not (= x13 x43)) (not (= x350 x43)) (bvult (_ bv0 256) x421) (bvule x350 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x113 x350)) (= (_ bv3249860859 256) x57) (= x233 (bvult (_ bv0 256) (x427 (x304 x350)))) (bvugt x113 (_ bv0 256)) (= x254 (_ bv86400 256)) (bvult x57 (_ bv3812870723 256)) (= (bvugt (x427 (x304 x113)) (_ bv0 256)) x192) (bvugt x350 (_ bv0 256)) (= (x328 (x304 x43)) x102) (not (= x57 (_ bv3224796394 256))) (= x152 (bvugt (x427 (x304 x421)) (_ bv0 256))) (bvule x43 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x328 (x304 x113)) x364) x354 (not (= x350 x13)) (bvugt x43 (_ bv0 256)) (= (x328 (x304 x350)) x64) (bvult (_ bv0 256) x13) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x421) (bvule (_ bv0 256) x88) (= (bvugt (x427 (x304 x43)) (_ bv0 256)) x63) x192 (bvult x57 (_ bv3567393941 256)) (bvule x113 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x113 x43)) x152 (not (bvugt (_ bv3224796394 256) x57)) (= (x328 (x304 x13)) x88) (not (= x13 x113)) x63 (bvule (_ bv0 256) x102) (bvule x13 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x64) (bvugt x161 (_ bv0 256)) (not (= x421 x13)) (bvuge x344 (_ bv0 256)) (= (x427 (x304 x421)) x161) x233 (= x344 (x328 (x304 x421)))) (and (and (and (and (and (= x265 (_ bv5000 256)) (= (_ bv1000 256) x24) (not (= x101 (_ bv503383097 256))) (= x101 (_ bv519173431 256)) (bvult (_ bv0 256) x53) (bvult x101 (_ bv743225245 256)) (not (bvult x101 (_ bv500647658 256))) (= true x291) (= (_ bv5000 256) x284) (bvugt (_ bv596258137 256) x101) (= x53 (x427 (x304 x421))) (bvult x101 (_ bv2127478272 256)) (bvult x101 (_ bv954831406 256)) (not (= x101 (_ bv500647658 256))) (= x398 (_ bv1000 256))) (and (and (and (not (bvugt (_ bv596258137 256) x125)) (not (= x125 (_ bv599290589 256))) (= (_ bv1 256) x221) (not (bvugt (_ bv500647658 256) x125)) (bvugt x59 (_ bv0 256)) (= x125 (_ bv686821956 256)) (= (_ bv1 256) x9) (bvugt (_ bv743225245 256) x125) (bvugt (_ bv2127478272 256) x125) (not (= (_ bv596258137 256) x125)) (bvugt (_ bv954831406 256) x125) (= x35 (_ bv1 256)) (= (x427 (x304 x421)) x59)) (and (and (and (not (= (_ bv2863377861 256) x382)) (= (x427 (x304 x421)) x77) (= (_ bv5000 256) x12) (not (bvult x382 (_ bv2580288415 256))) (not (bvult x382 (_ bv2127478272 256))) (bvugt (_ bv3008386744 256) x382) (bvult x382 (_ bv3224796394 256)) (not (bvugt (_ bv2863377861 256) x382)) (= (_ bv3002540418 256) x382) (= (_ bv0 256) x209) (not (= (_ bv2876725745 256) x382)) (= x207 (_ bv100000 256)) (bvult (_ bv0 256) x77) (not (= (_ bv2966737888 256) x382))) (and (and (and (and (and (and (and (bvuge x136 (_ bv0 256)) (not (= (_ bv500647658 256) x277)) (= (_ bv64 256) x224) (= x203 (_ bv5000 256)) (= x136 x116) (= x54 (_ bv64 256)) (bvult x277 (_ bv954831406 256)) (bvugt (_ bv2127478272 256) x277) (bvult x277 (_ bv596258137 256)) (bvuge x183 (_ bv0 256)) (bvule x136 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x183 x41) (= x286 true) (bvugt x397 (_ bv0 256)) (not (= x277 (_ bv503383097 256))) (not (bvult x277 (_ bv500647658 256))) (bvugt (_ bv743225245 256) x277) (= x277 (_ bv519173431 256)) (= (x427 (x304 x421)) x397) (= x270 (_ bv5000 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x183)) (and (= x301 (x303 (x130 (_ bv14 256)))) (= (x303 (x130 (_ bv13 256))) x157) (bvule x67 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x251) (bvult x92 (_ bv3224796394 256)) (not (bvugt (_ bv2863377861 256) x92)) (= (_ bv5000 256) x193) (not (bvugt (_ bv2580288415 256) x92)) (= x133 (x427 (x304 x421))) (= x6 x408) (= x105 (_ bv100000 256)) (not (= x92 (_ bv3008386744 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x240) (not (bvult x92 (_ bv2127478272 256))) (= (x303 (x130 (_ bv16 256))) x385) (= x251 x41) (= x206 x253) (= x371 (bvult x60 x385)) (= x92 (_ bv3051865383 256)) (bvuge x67 (_ bv0 256)) (bvugt x133 (_ bv0 256)) (= (x303 (x130 (_ bv15 256))) x297) (= x253 (_ bv0 256)) (not (bvult x92 (_ bv3008386744 256))) (bvuge x240 (_ bv0 256)) (= x67 x408) (bvuge x251 (_ bv0 256)))) (and (bvugt (_ bv1984976886 256) x269) (bvugt (_ bv2127478272 256) x269) (not (bvult x269 (_ bv954831406 256))) (= (_ bv1871194811 256) x269) (= x4 (_ bv64 256)) (not (bvult x269 (_ bv1871194811 256))) (not (bvult x269 (_ bv1439069736 256))) (= x318 (x427 (x304 x421))) (bvult (_ bv0 256) x318) (= x126 (_ bv64 256)) (= true x283) (= (_ bv64 256) x85))) (and (not (bvugt (_ bv3812870723 256) x117)) (= (x427 (x304 x421)) x123) (not (bvult x117 (_ bv3224796394 256))) (= (_ bv3890975986 256) x117) (= x89 (_ bv192 256)) (= x181 true) (bvult x117 (_ bv3996650231 256)) (not (bvugt (_ bv2127478272 256) x117)) (not (bvugt (_ bv3890975986 256) x117)) (= (_ bv64 256) x81) (= x374 (_ bv192 256)) (bvult (_ bv0 256) x123))) (and (not (= (_ bv1816029635 256) x95)) (= (x427 (x304 x421)) x144) (not (bvult x95 (_ bv954831406 256))) (not (bvugt (_ bv1439069736 256) x95)) (bvugt (_ bv2127478272 256) x95) (bvult x95 (_ bv1871194811 256)) (not (= x95 (_ bv1840041978 256))) (= x275 true) (not (bvult x95 (_ bv1738207182 256))) (not (= x95 (_ bv1738207182 256))) (= x279 (_ bv128 256)) (= x366 (_ bv128 256)) (= x95 (_ bv1862597803 256)) (bvugt x144 (_ bv0 256)) (= (_ bv192 256) x17))) (and (= (_ bv64 256) x65) (bvugt (_ bv3812870723 256) x211) (not (= (_ bv3366849169 256) x211)) (= true x40) (= (_ bv64 256) x229) (not (bvult x211 (_ bv3224796394 256))) (not (bvugt (_ bv3366849169 256) x211)) (bvugt (_ bv3567393941 256) x211) (bvult (_ bv0 256) x424) (= (_ bv128 256) x201) (not (bvugt (_ bv2127478272 256) x211)) (= (x427 (x304 x421)) x424) (= (_ bv3506505391 256) x211))) (and (bvult x21 (_ bv2127478272 256)) (= x250 (_ bv0 256)) (= x293 (_ bv0 256)) (not (= x21 (_ bv1984976886 256))) (not (bvugt (_ bv1439069736 256) x21)) (= (x427 (x304 x421)) x120) (= x330 true) (bvugt x120 (_ bv0 256)) (not (bvult x21 (_ bv1871194811 256))) (not (bvugt (_ bv954831406 256) x21)) (not (bvult x21 (_ bv1984976886 256))) (not (= x21 (_ bv2039265891 256))) (= (_ bv2064814097 256) x21) (= (_ bv64 256) x76)))) (and (bvult x210 (_ bv954831406 256)) (bvugt (_ bv596258137 256) x210) (bvult x210 (_ bv743225245 256)) (= x34 (_ bv5000 256)) (= x322 (_ bv1 256)) (not (= x210 (_ bv500647658 256))) (= (_ bv519173431 256) x210) (= (x427 (x304 x421)) x118) (bvugt (_ bv2127478272 256) x210) (= (_ bv5000 256) x281) (not (bvugt (_ bv500647658 256) x210)) (= (_ bv0 256) x256) (not (= x210 (_ bv503383097 256))) (bvult (_ bv0 256) x118)))) (and (= x159 (_ bv5000 256)) (not (bvult x334 (_ bv596258137 256))) (not (= x334 (_ bv596258137 256))) (bvult x334 (_ bv2127478272 256)) (not (= (_ bv599290589 256) x334)) (bvult x334 (_ bv954831406 256)) (bvult x334 (_ bv743225245 256)) (= (_ bv686821956 256) x334) (bvult (_ bv0 256) x370) (= (_ bv1 256) x58) (= (x427 (x304 x421)) x370) (= x82 (_ bv1 256)) (not (bvugt (_ bv500647658 256) x334))))) (and (= (_ bv2 256) x151) (not (bvult x137 (_ bv954831406 256))) (= x80 (x427 (x304 x421))) (not (= (_ bv1738207182 256) x137)) (= true x19) (= x1 (_ bv2 256)) (not (bvugt (_ bv1439069736 256) x137)) (bvugt x80 (_ bv0 256)) (bvugt (_ bv1871194811 256) x137) (= x137 (_ bv1816029635 256)) (= x78 (_ bv1000 256)) (not (bvult x137 (_ bv1738207182 256))) (bvugt (_ bv2127478272 256) x137))) (and (= (_ bv922701707 256) x309) (bvugt (_ bv2127478272 256) x309) (not (bvugt (_ bv743225245 256) x309)) (not (bvult x309 (_ bv500647658 256))) (bvugt x202 (_ bv0 256)) (= x202 (x427 (x304 x421))) (not (= (_ bv910484757 256) x309)) (bvugt (_ bv954831406 256) x309) (not (= (_ bv826074471 256) x309)) (not (= (_ bv822145385 256) x309)) (= x129 (_ bv86400 256)) (= x249 (_ bv2 256)) (= x84 (_ bv0 256)) (not (bvult x309 (_ bv822145385 256))))) (and (bvugt (_ bv3366849169 256) x188) (= x164 (x427 (x304 x421))) (= (_ bv3249860859 256) x188) (bvult x188 (_ bv3567393941 256)) (not (bvult x188 (_ bv2127478272 256))) (not (= x188 (_ bv3224796394 256))) (not (bvugt (_ bv3224796394 256) x188)) (= (_ bv1531409238 256) x55) (= x110 (_ bv86400 256)) (= (_ bv86400 256) x273) (bvult x188 (_ bv3812870723 256)) (bvugt x164 (_ bv0 256))))) (and (=> (and (and (= x349 (bvugt x301 x157)) (or (and (and (= x342 (bvmul x3 x103)) (= x103 (bvadd x60 (bvneg x297))) (= x416 (bvudiv x342 x156)) (bvult (_ bv0 256) x156) (= (bvadd x416 x157) x266) (= x156 (bvadd x385 (bvneg x297))) (= x266 x339) (= x3 (bvadd (bvneg x157) x301))) x349) (and (not x349) (and (= x278 (bvadd x157 (bvneg x301))) (= x219 x339) (= x396 (bvmul x198 x278)) (= (bvadd (bvneg x297) x385) x48) (= (bvadd (bvneg x361) x157) x219) (= x361 (bvudiv x396 x48)) (= (bvadd (bvneg x297) x60) x198) (bvult (_ bv0 256) x48))))) x371) x234) (=> (and (not x371) (and (= x418 (_ bv0 256)) (= x316 x301))) x145))) x336))
(assert (= (and x411 (not x325)) x66))
(assert (= (x289 (x130 (_ bv1738207182 256))) (_ bv1738207182 256)))
(assert (= (or x314 x158) x108))
(assert (= (=> (and (= (= x140 (_ bv0 256)) x190) (or (and (not x190) (and (= (ite x86 (_ bv1 256) (_ bv0 256)) x255) (= x389 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x139)) (= x86 (= x296 x389)))) (and (and (= x280 (not x346)) (= x308 (x407 x327)) (= (bvadd (_ bv32 256) x149) x114) (= x142 x401) (= x148 (x381 x111)) (= x425 (x427 (x304 x113))) (bvule x148 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (_ bv4 256) x401) (= (ite x280 (_ bv1 256) (_ bv0 256)) x187) (= (bvadd (_ bv32 256) x114) x97) (= x255 x308) (not (bvult x142 (_ bv4 256))) (= x409 x111) (= (= (_ bv0 256) x308) x346) (= (bvadd x409 (_ bv32 256)) x243) (= x327 x243) (bvult x112 (_ bv3871629458 256)) (= (bvadd x243 (_ bv4 256)) x239) (= x259 (x427 (x304 x113))) (= x308 x187) (not (bvugt (_ bv2863377861 256) x112)) (bvult (_ bv0 256) x259) (= x239 x149) (not (= x73 (_ bv0 256))) (not (= (_ bv0 256) x425)) (= (_ bv4 256) x142) (= (x427 (x304 x148)) x73) (= (_ bv77196514420459877940035116867124998943289115686762304616657918434777787006976 256) x238) (= x112 (_ bv2863377861 256))) x190))) x32) x147))
(assert (= (and x122 x169) x372))
(assert (= (x130 (_ bv1439069736 256)) (x304 (_ bv1439069736 256))))
(assert (= (x130 (_ bv21304723245256853039595661774342629002073543191790936201937503064778531143680 256)) (x304 (_ bv21304723245256853039595661774342629002073543191790936201937503064778531143680 256))))
(assert (= (_ bv3812870723 256) (x289 (x130 (_ bv3812870723 256)))))
(assert (= (_ bv599290589 256) (x289 (x130 (_ bv599290589 256)))))
(assert (= (_ bv77196514420459877940035116867124998943289115686762304616657918434777787006976 256) (x289 (x130 (_ bv77196514420459877940035116867124998943289115686762304616657918434777787006976 256)))))
(assert (= x268 (and x119 (not x312))))
(assert (= (x130 (_ bv2863377861 256)) (x304 (_ bv2863377861 256))))
(assert (= (_ bv2039265891 256) (x289 (x130 (_ bv2039265891 256)))))
(assert (= (x130 (_ bv500647658 256)) (x304 (_ bv500647658 256))))
(assert (= (x304 (_ bv686821956 256)) (x130 (_ bv686821956 256))))
(assert (x186 (_ bv1356689113 256)))
(assert (= (x130 (_ bv1816029635 256)) (x304 (_ bv1816029635 256))))
(assert (= (_ bv770885568 256) (x289 (x130 (_ bv770885568 256)))))
(assert (= (x304 (_ bv100000 256)) (x130 (_ bv100000 256))))
(assert (= (x130 (_ bv2064814097 256)) (x304 (_ bv2064814097 256))))
(assert (= (_ bv954831406 256) (x289 (x304 (_ bv954831406 256)))))
(assert (= (x130 (_ bv86400 256)) (x304 (_ bv86400 256))))
(assert (x186 x350))
(assert (= x234 (=> (and (= x316 x339) (= x418 (_ bv1 256))) x145)))
(assert (= (x130 (_ bv1461501637330902918203684832716283019655932542975 256)) (x304 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (_ bv3051865383 256) (x289 (x130 (_ bv3051865383 256)))))
(assert (= (_ bv954831406 256) (x289 (x130 (_ bv954831406 256)))))
(assert (= (x289 (x130 (_ bv2127478272 256))) (_ bv2127478272 256)))
(assert (= (or x302 x104) x162))
(assert (= (_ bv3002540418 256) (x289 (x130 (_ bv3002540418 256)))))
(assert (= (and x417 x45) x422))
(assert (= (or x228 x50) x39))
(assert (= x5 (=> (and (= x177 x51) (= x8 x258)) x263)))
(assert (x186 x43))
(assert (= (_ bv4105672269 256) (x289 (x304 (_ bv4105672269 256)))))
(assert (= x72 (and (not x131) x171)))
(assert (= x158 (and (not x71) x230)))
(assert (= x171 (and x169 (not x122))))
(assert (= (x304 (_ bv922701707 256)) (x130 (_ bv922701707 256))))
(assert (= (x130 (_ bv1738207182 256)) (x304 (_ bv1738207182 256))))
(assert (= x360 (and x371 x347)))
(assert (= (_ bv3996650231 256) (x289 (x130 (_ bv3996650231 256)))))
(assert (= (or x268 x163) x314))
(assert (=> (bvuge (_ bv10000 256) x43) (= (x130 x43) (x304 x43))))
(assert (= (x289 (x130 (_ bv1871194811 256))) (_ bv1871194811 256)))
(assert (= (_ bv922701707 256) (x289 (x130 (_ bv922701707 256)))))
(assert (= (x289 (x130 (_ bv25742203781880459408941457317362166305709681742799472914177068605934923677696 256))) (_ bv25742203781880459408941457317362166305709681742799472914177068605934923677696 256)))
(assert (= (_ bv4105672269 256) (x289 (x130 (_ bv4105672269 256)))))
(assert (= x45 (and x22 x39)))
(assert (= (x304 (_ bv790236105 256)) (x130 (_ bv790236105 256))))
(assert (= x14 (or x66 x226)))
(assert (= (_ bv3506505391 256) (x289 (x130 (_ bv3506505391 256)))))
(assert (= (x130 (_ bv1062488491900878629424266116482631147622884293147 256)) (x304 (_ bv1062488491900878629424266116482631147622884293147 256))))
(assert (= (and x171 x131) x343))
(assert (=> (bvule x148 (_ bv10000 256)) (= (x304 x148) (x130 x148))))
(assert (= (and x230 x71) x119))
(assert (= (x289 (x130 (_ bv686821956 256))) (_ bv686821956 256)))
(assert (= (x304 (_ bv599290589 256)) (x130 (_ bv599290589 256))))
(assert (= x393 (x304 (x289 x393))))
(assert (x186 x13))
(assert (= (_ bv1439069736 256) (x289 (x130 (_ bv1439069736 256)))))
(assert (= x350 (x289 (x304 x350))))
(assert (x186 x148))
(assert (= (x289 (x130 (_ bv1531409238 256))) (_ bv1531409238 256)))
(assert (=> (bvule x350 (_ bv10000 256)) (= (x130 x350) (x304 x350))))
(assert (= (x289 (x130 (_ bv1862597803 256))) (_ bv1862597803 256)))
(assert (= (x289 (x130 (_ bv100000 256))) (_ bv100000 256)))
(assert (= (x304 (_ bv3249860859 256)) (x130 (_ bv3249860859 256))))
(assert (= (bvlshr x26 (_ bv224 256)) (x289 (x304 (bvlshr x26 (_ bv224 256))))))
(assert (= x228 (and x347 (not x371))))
(assert (= (x130 (_ bv3996650231 256)) (x304 (_ bv3996650231 256))))
(assert (= x169 (and x288 (not x368))))
(assert (= (or x68 x27) x230))
(assert (= (x304 (_ bv4105672269 256)) (x130 (_ bv4105672269 256))))
(assert (= (_ bv3567393941 256) (x289 (x130 (_ bv3567393941 256)))))
(assert (= x298 (=> (and (or (and (and (x295 (_ bv86400 256) x373) (= (bvadd x306 (_ bv1 256)) x261) (= x267 (bvmul (_ bv86400 256) x373)) (= x380 (bvadd x267 (bvneg (_ bv1 256)))) (not (= (_ bv0 256) x236)) (= (bvudiv x380 x236) x306) (= x261 x166) (= (= (_ bv0 256) x222) x377) (= (_ bv86400 256) x402) (ite x377 x377 (= x25 (bvudiv x236 x222))) (= x236 (bvmul x25 x222))) x305) (and (not x305) (and (= (bvmul x222 (_ bv86400 256)) x383) (not (= x79 (_ bv0 256))) (= x141 x166) (= (_ bv86400 256) x247) (= (ite (= x383 (_ bv0 256)) (_ bv0 256) (bvadd (_ bv1 256) (bvudiv (bvadd (bvneg (_ bv1 256)) x383) x79))) x141) (x295 x373 x25) (x295 (_ bv86400 256) x222) (= x79 (bvmul x25 x373))))) (and (= (_ bv1000 256) x244) (= x305 (bvugt x373 x222)) (= x373 (bvmul x231 (_ bv1000 256))) (x295 x420 (_ bv1000 256)) (= (_ bv0 256) x351))) x237)))
(assert (= (_ bv36576266130383907740409294828766280552204369950469466485900666250106563985408 256) (x289 (x130 (_ bv36576266130383907740409294828766280552204369950469466485900666250106563985408 256)))))
(assert (= (x304 (_ bv3871629458 256)) (x130 (_ bv3871629458 256))))
(assert (= (x130 (_ bv910484757 256)) (x304 (_ bv910484757 256))))
(assert (= (x289 (x130 (_ bv500647658 256))) (_ bv500647658 256)))
(assert (= (_ bv70508962019145425934951811999677760319478833095128838543097651878529435959296 256) (x289 (x130 (_ bv70508962019145425934951811999677760319478833095128838543097651878529435959296 256)))))
(assert (= (or x394 x14) x134))
(assert (= true x347))
(assert (= (x304 (_ bv3366849169 256)) (x130 (_ bv3366849169 256))))
(assert (= (x289 (x130 (_ bv3890975986 256))) (_ bv3890975986 256)))
(assert (= (x130 (_ bv3812870723 256)) (x304 (_ bv3812870723 256))))
(assert (= x237 (=> (and (bvugt x223 (_ bv0 256)) (= x282 x214) (= (x20 (x130 (_ bv16 256))) x217) (= x127 x100) (bvuge x369 (_ bv0 256)) (not (bvugt x166 (_ bv2 256))) (= x60 x91) (not (bvugt (_ bv3008386744 256) x182)) (bvuge x96 (_ bv0 256)) (= (x427 (x304 x421)) x223) (= x96 x241) (= x376 x274) (not (bvugt (_ bv2863377861 256) x182)) (= x15 x220) (= x274 (_ bv0 256)) (bvule x132 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x132 (_ bv0 256)) (= x182 (_ bv3051865383 256)) (= x132 x100) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x220) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x127) (not (= x182 (_ bv3008386744 256))) (= x359 (x20 (x130 (_ bv14 256)))) (not (bvugt (_ bv2580288415 256) x182)) (bvule x96 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvult x182 (_ bv3224796394 256)) (bvule (_ bv0 256) x127) (= x406 (bvadd x91 (_ bv15314092380000 256))) (not (bvult x182 (_ bv2127478272 256))) (bvule x369 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x220) (= x242 (x20 (x130 (_ bv15 256)))) (= x363 (x20 (x130 (_ bv13 256)))) (= (bvult x282 x217) x200) (= x341 (_ bv15314092380000 256)) x260 (= (bvugt x214 x406) x260) (= x16 x241)) (and (=> (and (not x200) (and (= x359 x167) (= x115 (_ bv0 256)))) x47) (=> (and (and (or (and (and (= x272 x216) (= x387 (bvmul x248 x232)) (bvugt x264 (_ bv0 256)) (= x264 (bvadd (bvneg x242) x217)) (= (bvadd x282 (bvneg x242)) x248) (= x272 (bvadd x363 x153)) (= x153 (bvudiv x387 x264)) (= (bvadd (bvneg x363) x359) x232)) x325) (and (and (= x290 x216) (= x98 (bvmul x313 x23)) (= (bvadd x217 (bvneg x242)) x390) (= x290 (bvadd x363 (bvneg x29))) (= (bvadd (bvneg x242) x282) x23) (= (bvudiv x98 x390) x29) (bvugt x390 (_ bv0 256)) (= x313 (bvadd (bvneg x359) x363))) (not x325))) (= (bvugt x359 x363) x325)) x200) x292)))))
(assert (= x288 (and x225 (not x205))))
(assert (= (and x119 x312) x163))
(assert (= (x304 (_ bv1531409238 256)) (x130 (_ bv1531409238 256))))
(assert (= x13 (x289 (x304 x13))))
(assert (= x357 (and (not x349) x360)))
(assert (=> (bvuge (_ bv10000 256) (_ bv1356689113 256)) (= (x304 (_ bv1356689113 256)) (x130 (_ bv1356689113 256)))))
(assert (=> (bvuge (_ bv10000 256) x421) (= (x304 x421) (x130 x421))))
(assert (= (x289 (x130 (_ bv1356689113 256))) (_ bv1356689113 256)))
(assert (= x394 (and x162 (not x200))))
(assert (=> (bvule (_ bv790236105 256) (_ bv10000 256)) (= (x304 (_ bv790236105 256)) (x130 (_ bv790236105 256)))))
(assert (= (x289 (x304 x113)) x113))
(assert (= (x130 (_ bv15314092380000 256)) (x304 (_ bv15314092380000 256))))
(assert (= x56 (x289 (x304 x56))))
(assert (= (x289 (x130 (_ bv743225245 256))) (_ bv743225245 256)))
(assert (x186 x56))
(assert (= (x304 (_ bv1840041978 256)) (x130 (_ bv1840041978 256))))
(assert (= (=> (and (= x258 x160) (= x177 x135)) x285) x263))
(assert (= (x304 (_ bv3890975986 256)) (x130 (_ bv3890975986 256))))
(assert (= (x289 (x130 (_ bv910484757 256))) (_ bv910484757 256)))
(assert (= (x130 (_ bv826074471 256)) (x304 (_ bv826074471 256))))
(assert (= (x130 (_ bv822145385 256)) (x304 (_ bv822145385 256))))
(assert (=> (bvule (_ bv954831406 256) (_ bv10000 256)) (= (x130 (_ bv954831406 256)) (x304 (_ bv954831406 256)))))
(assert (x186 x421))
(assert (= (x289 (x130 (_ bv86400 256))) (_ bv86400 256)))
(assert (= (x304 (_ bv743225245 256)) (x130 (_ bv743225245 256))))
(assert (= (x289 (x304 x148)) x148))
(check-sat)
(exit)