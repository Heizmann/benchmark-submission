(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x151 0)) (((x244 (x119 x151) (x25 (_ BitVec 256))) (x189 (x205 (_ BitVec 256))) (x4 (x216 x151) (x112 x151) (x90 (_ BitVec 256))))))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x115 () x151)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x227 () Bool)
(declare-fun x157 () (_ BitVec 256))
(declare-fun x43 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x199 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x35 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x240 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x99 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x14 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x239 () x151)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x57 () Bool)
(declare-fun x213 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x167 () x151)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x179 () x151)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x236 (x151) (_ BitVec 256))
(declare-fun x221 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x144 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x233 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x60 (x151) (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x51 () x151)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x24 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x245 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x190 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x152 () x151)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x86 (x151) (_ BitVec 256))
(declare-fun x182 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x65 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x150 () x151)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x170 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x237 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x118 () x151)
(declare-fun x77 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x78 (x151) (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x64 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x247 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x56 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x42 ((_ BitVec 256)) x151)
(define-fun x192 ((x151 x151) (x212 (_ BitVec 256))) x151 (ite ((_ is x244) x151) (x244 (x119 x151) (bvadd x212 (x25 x151))) (ite ((_ is x4) x151) (x4 (x216 x151) (x112 x151) (bvadd (x90 x151) x212)) (x189 (bvadd x212 (x205 x151))))))
(define-fun x238 ((x36 (_ BitVec 256)) (x59 (_ BitVec 256))) Bool (= (bvudiv (bvmul x36 x59) x59) x36))
(define-fun x210 ((x36 (_ BitVec 256)) (x59 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x36 x59) x59) x36))
(define-fun x44 ((x36 (_ BitVec 256)) (x59 (_ BitVec 256))) Bool (= x36 (bvsdiv (bvmul x36 x59) x59)))
(define-fun x188 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x174) x6 (x221 x174)))
(define-fun x29 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv160 256)) x232 (x188 x174)))
(define-fun x153 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv192 256) x174) x61 (x29 x174)))
(define-fun x155 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv224 256)) x218 (x153 x174)))
(define-fun x40 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x174) x166 (x155 x174)))
(define-fun x12 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x174) x171 (x170 x174)))
(define-fun x172 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x174) x142 (x56 x174)))
(define-fun x66 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv192 256)) x23 (x99 x174)))
(define-fun x169 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv224 256)) x74 (x245 x174)))
(define-fun x180 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x174) x191 (x14 x174)))
(define-fun x33 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv288 256)) x183 (x43 x174)))
(define-fun x117 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv512 256)) x106 (x182 x174)))
(define-fun x235 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv544 256)) x127 (x117 x174)))
(define-fun x200 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv576 256) x174) x157 (x235 x174)))
(define-fun x37 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv608 256) x174) x161 (x200 x174)))
(define-fun x96 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv640 256) x174) x146 (x37 x174)))
(define-fun x149 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv672 256)) x102 (x96 x174)))
(define-fun x134 ((x174 x151)) (_ BitVec 256) (ite (= (x42 x85) x174) x158 (x236 x174)))
(define-fun x39 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x174) x114 (x199 x174)))
(define-fun x168 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv160 256)) x132 (x39 x174)))
(define-fun x19 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv192 256)) x87 (x168 x174)))
(define-fun x241 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv224 256) x174) x140 (x19 x174)))
(define-fun x15 ((x174 (_ BitVec 256))) (_ BitVec 256) (ite (= x174 (_ bv256 256)) x154 (x241 x174)))
(define-fun x18 ((x124 (_ BitVec 256))) Bool (=> (and (not (= x124 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639680 256))) (not (= x124 (_ bv3110348530 256))) (not (= (_ bv941780010 256) x124)) (bvugt x124 (_ bv10000 256)) (not (= x124 (_ bv1061922874 256))) (not (= x124 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (= (_ bv1084754510 256) x124)) (not (= (_ bv911855590 256) x124)) (not (= (_ bv662108492 256) x124)) (not (= x124 (_ bv340282366920938463463374607431768211455 256))) (not (= (_ bv2220280665 256) x124)) (not (= x124 (_ bv1960939212 256))) (not (= x124 (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256))) (not (= (_ bv4294967296 256) x124)) (not (= x124 (_ bv18446744073709551616 256))) (not (= (_ bv947726895 256) x124)) (not (= (_ bv3250587425 256) x124)) (not (= (_ bv1960641893 256) x124)) (not (= x124 (_ bv4294967295 256))) (not (= x124 (_ bv79228162514264337593543950336 256))) (not (= (_ bv2652930389 256) x124)) (not (= x124 (_ bv1749768213 256))) (not (= x124 (_ bv3547226261 256)))) (not ((_ is x189) (x42 x124)))))
(assert (= true x129))
(assert (= (x189 (_ bv1960939212 256)) (x42 (_ bv1960939212 256))))
(assert (=> (bvule x225 (_ bv10000 256)) (= (x189 x225) (x42 x225))))
(assert (=> (bvuge (_ bv10000 256) x72) (= (x42 x72) (x189 x72))))
(assert (= (bvadd (x78 x118) (_ bv2 256)) (x78 (x192 x118 (_ bv2 256)))))
(assert (= (x189 (_ bv3250587425 256)) (x42 (_ bv3250587425 256))))
(assert (= (bvadd (x78 x239) (_ bv1 256)) (x78 (x192 x239 (_ bv1 256)))))
(assert (x18 x225))
(assert (x18 x196))
(assert (= x240 (x78 (x42 x240))))
(assert (= (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256) (x78 (x189 (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256)))))
(assert (= (x78 (x189 (_ bv79228162514264337593543950336 256))) (_ bv79228162514264337593543950336 256)))
(assert (= x16 (x78 (x42 x16))))
(assert (x18 x16))
(assert (= (x78 (x189 (_ bv2652930389 256))) (_ bv2652930389 256)))
(assert (= (x78 (x42 x196)) x196))
(assert (= (x189 (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256)) (x42 (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256))))
(assert (= (x78 (x42 x225)) x225))
(assert (= (x189 (_ bv18446744073709551616 256)) (x42 (_ bv18446744073709551616 256))))
(assert (= (x189 (_ bv340282366920938463463374607431768211455 256)) (x42 (_ bv340282366920938463463374607431768211455 256))))
(assert (x18 x240))
(assert (= (x42 (_ bv941780010 256)) (x189 (_ bv941780010 256))))
(assert (x18 x85))
(assert (= (x42 (_ bv3547226261 256)) (x189 (_ bv3547226261 256))))
(assert (= (x78 (x189 (_ bv911855590 256))) (_ bv911855590 256)))
(assert (= (_ bv1960641893 256) (x78 (x189 (_ bv1960641893 256)))))
(assert (= (x42 (_ bv1084754510 256)) (x189 (_ bv1084754510 256))))
(assert (= (x78 (x189 (_ bv18446744073709551616 256))) (_ bv18446744073709551616 256)))
(assert (= (x78 (x189 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639680 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639680 256)))
(assert (x18 x72))
(assert (= (_ bv662108492 256) (x78 (x189 (_ bv662108492 256)))))
(assert (= (x42 (_ bv4294967296 256)) (x189 (_ bv4294967296 256))))
(assert (= (_ bv941780010 256) (x78 (x189 (_ bv941780010 256)))))
(assert (=> (bvuge (_ bv10000 256) (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256)) (= (x42 (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256)) (x189 (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256)))))
(assert (= (x42 (_ bv911855590 256)) (x189 (_ bv911855590 256))))
(assert (= (x78 (x189 (_ bv1461501637330902918203684832716283019655932542975 256))) (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x78 (x189 (_ bv1960939212 256))) (_ bv1960939212 256)))
(assert (= (_ bv340282366920938463463374607431768211455 256) (x78 (x189 (_ bv340282366920938463463374607431768211455 256)))))
(assert (= (x78 (x192 x115 (_ bv1 256))) (bvadd (_ bv1 256) (x78 x115))))
(assert (= (_ bv1749768213 256) (x78 (x189 (_ bv1749768213 256)))))
(assert (= (x78 (x42 x85)) x85))
(assert (= (x42 (_ bv4294967295 256)) (x189 (_ bv4294967295 256))))
(assert (x18 x121))
(assert (= (x78 (x189 (_ bv4294967295 256))) (_ bv4294967295 256)))
(assert (x18 x207))
(assert (= (x78 (x189 (_ bv1061922874 256))) (_ bv1061922874 256)))
(assert (=> (bvule x137 (_ bv10000 256)) (= (x42 x137) (x189 x137))))
(assert (= (=> (and (and (and (= x10 (_ bv192 256)) (not (bvult x173 (_ bv1960641893 256))) (bvuge x91 (_ bv0 256)) (= (x149 (_ bv672 256)) x125) (= (x149 (_ bv512 256)) x111) (= (x12 (_ bv128 256)) x106) (= x123 (_ bv128 256)) (= x242 (x149 (_ bv576 256))) (= x202 (_ bv256 256)) (not (bvugt (_ bv4 256) x52)) (= x67 (_ bv0 256)) (bvugt x32 (_ bv0 256)) (= (x66 (_ bv192 256)) x157) (bvule (_ bv0 256) x120) (= x71 x120) (bvult x173 (_ bv2220280665 256)) (not (bvsgt (_ bv64 256) x77)) (bvugt (_ bv2652930389 256) x173) (= x11 (x149 (_ bv544 256))) (= (_ bv256 256) x131) (= (bvadd (bvneg (_ bv68 256)) x52) x82) (= x130 x135) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x120) (not (bvslt x229 (_ bv192 256))) (= (x149 (_ bv640 256)) x223) (bvule (_ bv0 256) x97) (bvule x97 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x161 (x169 (_ bv224 256))) (= (x180 (_ bv256 256)) x146) (= (_ bv128 256) x94) (= x173 (_ bv1960939212 256)) (not (= (_ bv1960641893 256) x173)) (= x84 (_ bv192 256)) (not (bvugt (_ bv1749768213 256) x173)) (= x229 (bvadd (bvneg (_ bv4 256)) x52)) (= x107 x93) (= (x86 (x42 x137)) x32) (= x127 (x172 (_ bv160 256))) (= x77 (bvadd (bvneg (_ bv132 256)) x52)) (= x206 (x149 (_ bv608 256))) (= (x33 (_ bv288 256)) x102) (not (bvsgt (_ bv64 256) x82)) (bvsgt x52 (_ bv195 256)) (bvule x91 (_ bv1461501637330902918203684832716283019655932542975 256))) (and (and (= x203 x186) (= x79 x69) (= (= x79 x110) x213) (= x138 x110) (= x73 x219)) (and (bvugt (_ bv1084754510 256) x226) (= (not (= x45 x7)) x147) (not (bvugt (_ bv3110348530 256) x217)) (= x162 x122) (not (= x226 (_ bv941780010 256))) (= x125 x184) (= x177 (x236 (x42 x85))) (= x89 (x236 (x42 (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256)))) (= x190 x13) (= x26 x47) (= x76 x1) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x122) (bvule (_ bv0 256) x133) (= x65 (= x224 x49)) (= x223 x27) (= (= x17 x185) x220) x220 (not (bvult x52 (_ bv4 256))) (= (not (= x13 x178)) x231) x101 (= (x192 x118 (_ bv2 256)) x115) (= x178 x34) (bvuge (_ bv4294967295 256) x41) (= x108 x91) (= x140 (bvand x113 (_ bv340282366920938463463374607431768211455 256))) (bvugt x195 (_ bv0 256)) (= x195 (bvand (_ bv255 256) x177)) (= x234 x139) (= x217 (_ bv3250587425 256)) (= x34 x3) (= x26 x111) (= x190 x16) (not (bvugt (_ bv662108492 256) x226)) (= (x4 (x42 x207) (x42 x72) (_ bv0 256)) x51) x147 (bvule x104 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv4294967295 256) x83) (= x126 (x15 (_ bv192 256))) (= x71 x133) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x91) (= (bvudiv x80 (_ bv79228162514264337593543950336 256)) x113) (= (x134 x179) x197) (= (= x1 x28) x2) (= (x15 (_ bv128 256)) x73) (= (x15 (_ bv256 256)) x246) (= (x86 (x42 x137)) x148) x2 (= (_ bv1061922874 256) x226) (= x76 x206) (bvule x228 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x138 (x15 (_ bv224 256))) (not (bvult x217 (_ bv2652930389 256))) (= x49 x53) (= (x134 x179) x80) x231 x65 (= (bvand x237 (_ bv4294967295 256)) x87) (= x187 x242) (bvult (_ bv0 256) x160) (bvult (_ bv0 256) x148) (= x75 (bvudiv x92 (_ bv18446744073709551616 256))) (not (= (_ bv911855590 256) x226)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x89) x108) (bvule x176 (_ bv340282366920938463463374607431768211455 256)) (= x201 x163) x54 (= x114 (x134 x115)) (= x190 x243) (= (x134 x179) x92) (= (_ bv0 256) x67) (= (bvand x75 (_ bv4294967295 256)) x154) (bvule x133 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x41 (_ bv0 256)) (= (x86 (x42 x137)) x160) (= x132 (x134 x118)) (not (= x226 (_ bv947726895 256))) (bvuge x9 (_ bv0 256)) (= x11 x46) (not (bvult x217 (_ bv1749768213 256))) (= x224 x46) (bvule (_ bv0 256) x83) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x9) (= x28 x209) (= (x192 x115 (_ bv1 256)) x179) (= (x236 (x42 x85)) x38) (= (bvudiv x197 (_ bv4294967296 256)) x237) (= (bvand (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639680 256) x38) x158) (= x101 (= x163 x116)) (not (= x217 (_ bv3110348530 256))) (bvuge x122 (_ bv0 256)) (= (x15 (_ bv160 256)) x186) (= x208 x17) (= x227 (= x234 x47)) (= (_ bv0 256) x70) (= x27 x185) x227 (bvuge x104 (_ bv0 256)) (not (bvugt (_ bv911855590 256) x226)) (= x136 x187) (= x118 (x4 (x42 x16) x51 (_ bv0 256))) x247 (bvult x226 (_ bv1749768213 256)) (bvult x217 (_ bv3547226261 256)) (bvule (_ bv0 256) x176) (= x45 x139) (bvuge x91 (_ bv0 256)) (bvule (_ bv0 256) x228) (= x116 x184) (= x5 x208) (= (= x3 x136) x247) (= x207 x222) (= x7 x190) (= x54 (not (= x5 x243))) (bvsgt x52 (_ bv3 256))))) (and (bvule x233 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x236 x167) x232) (not (= x121 x137)) (= (_ bv3250587425 256) x175) (= x218 (bvand (_ bv340282366920938463463374607431768211455 256) x100)) (bvuge x109 (_ bv0 256)) (not (= x225 x137)) (= (x4 (x42 x196) (x42 x72) (_ bv0 256)) x152) (bvule (_ bv0 256) x145) (bvuge x233 (_ bv0 256)) (bvuge x233 (_ bv0 256)) (= x222 x196) (bvule x58 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x57 false) (= (bvugt (x86 (x42 x225)) (_ bv0 256)) x144) (= x214 (bvult (_ bv0 256) (x86 (x42 x121)))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x121) (bvuge (_ bv4294967295 256) x194) (bvuge (_ bv4294967295 256) x98) (= (x40 (_ bv256 256)) x8) (= (x86 (x42 x137)) x156) (bvule (_ bv0 256) x103) (bvuge (_ bv340282366920938463463374607431768211455 256) x145) (= x211 (_ bv0 256)) (= (x4 (x42 x240) x152 (_ bv0 256)) x167) (= x105 (x40 (_ bv192 256))) (= x21 (x60 (x42 x137))) (= x193 (x236 x150)) (not (bvugt (_ bv3110348530 256) x175)) (bvuge x164 (_ bv0 256)) x35 (= false x55) (not (bvugt (_ bv1749768213 256) x175)) (= x69 (x40 (_ bv224 256))) (= (x236 x150) x230) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x164) (= x159 false) (= (bvand x63 (_ bv4294967295 256)) x166) (= x62 (x236 x150)) (bvuge x194 (_ bv0 256)) (not (= (_ bv3110348530 256) x175)) (bvule (_ bv0 256) x104) (= false x22) (= (bvugt (x86 (x42 x137)) (_ bv0 256)) x35) (bvule (_ bv0 256) x48) (bvuge x21 (_ bv0 256)) (bvuge x64 (_ bv0 256)) (bvult (_ bv0 256) x225) (bvule x91 (_ bv1461501637330902918203684832716283019655932542975 256)) x214 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x137) (= x50 (_ bv1061922874 256)) (= x63 (bvudiv x62 (_ bv18446744073709551616 256))) (bvule x103 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x103 x81) (bvule (_ bv0 256) x91) (= x150 (x192 x239 (_ bv1 256))) (= x165 (_ bv0 256)) (bvule x233 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x225) (= (bvudiv x230 (_ bv4294967296 256)) x88) (bvule x48 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x58) (bvule x104 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x135 (x40 (_ bv160 256))) (bvule (_ bv0 256) x20) (= (x236 x239) x6) (= (x60 (x42 x225)) x20) (not (bvugt (_ bv2652930389 256) x175)) (bvult x175 (_ bv3547226261 256)) (= (x40 (_ bv128 256)) x93) (bvugt x121 (_ bv0 256)) x144 (= (x192 x167 (_ bv2 256)) x239) (bvult (_ bv0 256) x156) (= (bvand x88 (_ bv4294967295 256)) x61) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x30) (bvult (_ bv0 256) x137) (bvule (_ bv0 256) x98) (= x64 (x60 (x42 x121))) (not (= x121 x225)) (bvule (_ bv0 256) x30) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x109) (= x240 x190) (= x100 (bvudiv x193 (_ bv79228162514264337593543950336 256))))) x213) x68))
(assert (= (x189 (_ bv2652930389 256)) (x42 (_ bv2652930389 256))))
(assert (= (x189 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639680 256)) (x42 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639680 256))))
(assert (= x207 (x78 (x42 x207))))
(assert (not x68))
(assert (= (x189 (_ bv1960641893 256)) (x42 (_ bv1960641893 256))))
(assert (= (x189 (_ bv662108492 256)) (x42 (_ bv662108492 256))))
(assert (= (x78 (x192 x167 (_ bv2 256))) (bvadd (_ bv2 256) (x78 x167))))
(assert (= (_ bv2220280665 256) (x78 (x189 (_ bv2220280665 256)))))
(assert (=> (bvule x196 (_ bv10000 256)) (= (x42 x196) (x189 x196))))
(assert (= x137 (x78 (x42 x137))))
(assert (=> (bvuge (_ bv10000 256) x85) (= (x189 x85) (x42 x85))))
(assert (= (x42 (_ bv1461501637330902918203684832716283019655932542975 256)) (x189 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (x78 (x189 (_ bv1084754510 256))) (_ bv1084754510 256)))
(assert (= (x42 (_ bv2220280665 256)) (x189 (_ bv2220280665 256))))
(assert (x18 (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256)))
(assert (= (x189 (_ bv79228162514264337593543950336 256)) (x42 (_ bv79228162514264337593543950336 256))))
(assert (=> (bvuge (_ bv10000 256) x121) (= (x189 x121) (x42 x121))))
(assert (x18 x137))
(assert (= (_ bv3547226261 256) (x78 (x189 (_ bv3547226261 256)))))
(assert (= (x78 (x189 (_ bv947726895 256))) (_ bv947726895 256)))
(assert (=> (bvule x240 (_ bv10000 256)) (= (x189 x240) (x42 x240))))
(assert (= (_ bv3250587425 256) (x78 (x189 (_ bv3250587425 256)))))
(assert (= (x42 (_ bv947726895 256)) (x189 (_ bv947726895 256))))
(assert (= (_ bv4294967296 256) (x78 (x189 (_ bv4294967296 256)))))
(assert (= (x189 (_ bv1061922874 256)) (x42 (_ bv1061922874 256))))
(assert (= (x78 (x42 x121)) x121))
(assert (=> (bvule x16 (_ bv10000 256)) (= (x42 x16) (x189 x16))))
(assert (= (x78 (x42 (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256))) (_ bv81955473079516046949633743016697847541294818689821282749996681496272635257091 256)))
(assert (= (x78 (x42 x72)) x72))
(assert (= (_ bv3110348530 256) (x78 (x189 (_ bv3110348530 256)))))
(assert (= (x42 (_ bv1749768213 256)) (x189 (_ bv1749768213 256))))
(assert (= (x42 (_ bv3110348530 256)) (x189 (_ bv3110348530 256))))
(assert (=> (bvule x207 (_ bv10000 256)) (= (x42 x207) (x189 x207))))
(check-sat)
(exit)