(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x56 0)) (((x112 (x218 (_ BitVec 256))) (x15 (x166 x56) (x147 x56) (x51 (_ BitVec 256))) (x240 (x103 x56) (x206 x56) (x40 x56) (x14 x56) (x124 (_ BitVec 256))) (x74 (x113 x56) (x135 (_ BitVec 256))))))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x227 () Bool)
(declare-fun x95 (x56) (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x161 (x56) (_ BitVec 256))
(declare-fun x260 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x29 (x56) (_ BitVec 256))
(declare-fun x108 () Bool)
(declare-fun x246 () (_ BitVec 256))
(declare-fun x65 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x35 (x56) (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x125 (x56) (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x109 () x56)
(declare-fun x9 () Bool)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x237 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x72 () x56)
(declare-fun x200 () (_ BitVec 256))
(declare-fun x224 () x56)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x209 () Bool)
(declare-fun x85 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x190 () x56)
(declare-fun x28 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x115 ((_ BitVec 256)) Bool)
(declare-fun x242 () Bool)
(declare-fun x49 () x56)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x195 () Bool)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x99 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x203 (x56) (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x102 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x155 () x56)
(declare-fun x64 () (_ BitVec 256))
(declare-fun x66 () Bool)
(declare-fun x257 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x130 () (_ BitVec 256))
(declare-fun x255 ((_ BitVec 256)) x56)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x250 () Bool)
(declare-fun x163 () Bool)
(declare-fun x256 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x118 () x56)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x244 () (_ BitVec 256))
(declare-fun x121 () x56)
(declare-fun x247 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x119 (x56) (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x176 () Bool)
(declare-fun x55 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x259 () x56)
(declare-fun x158 () Bool)
(declare-fun x23 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x82 () Bool)
(declare-fun x162 () Bool)
(declare-fun x19 () Bool)
(declare-fun x194 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x25 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x47 () x56)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x75 () x56)
(declare-fun x171 () x56)
(declare-fun x188 () x56)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x221 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x222 () Bool)
(declare-fun x123 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x1 () x56)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x182 () x56)
(declare-fun x33 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x145 (x56) (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x73 () Bool)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x140 () x56)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x41 () Bool)
(declare-fun x52 () x56)
(declare-fun x3 () Bool)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x186 () Bool)
(declare-fun x179 () Bool)
(declare-fun x236 () (_ BitVec 256))
(declare-fun x201 () Bool)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x137 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x225 () Bool)
(declare-fun x116 () Bool)
(declare-fun x231 () Bool)
(declare-fun x141 () Bool)
(declare-fun x126 () x56)
(declare-fun x20 () x56)
(declare-fun x154 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x177 () x56)
(declare-fun x69 () x56)
(declare-fun x202 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x142 () Bool)
(declare-fun x71 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(define-fun x45 ((x56 x56) (x6 (_ BitVec 256))) x56 (ite ((_ is x74) x56) (x74 (x113 x56) (bvadd x6 (x135 x56))) (ite ((_ is x240) x56) (x240 (x103 x56) (x206 x56) (x40 x56) (x14 x56) (bvadd (x124 x56) x6)) (ite ((_ is x15) x56) (x15 (x166 x56) (x147 x56) (bvadd (x51 x56) x6)) (x112 (bvadd x6 (x218 x56)))))))
(define-fun x153 ((x27 (_ BitVec 256)) (x32 (_ BitVec 256))) Bool (= (bvudiv (bvmul x27 x32) x32) x27))
(define-fun x191 ((x27 (_ BitVec 256)) (x32 (_ BitVec 256))) Bool (= x27 (bvsdiv (bvmul x32 x27) x32)))
(define-fun x2 ((x27 (_ BitVec 256)) (x32 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x27 x32) x32) x27))
(define-fun x232 ((x93 (_ BitVec 256))) (_ BitVec 256) (x102 x93))
(define-fun x241 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x93) (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256) (x28 x93)))
(define-fun x183 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x93) (_ bv36 256) (x241 x93)))
(define-fun x207 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x93) x193 (x183 x93)))
(define-fun x68 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv232 256) x93) (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256) (x207 x93)))
(define-fun x26 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= x93 (_ bv196 256)) (_ bv36 256) (x68 x93)))
(define-fun x248 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv228 256) x93) x217 (x26 x93)))
(define-fun x122 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite x66 (x207 x93) (x248 x93)))
(define-fun x98 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= x93 x173) (_ bv0 256) (x122 x93)))
(define-fun x91 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= x61 x93) x11 (x98 x93)))
(define-fun x235 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= x12 x93) x83 (x91 x93)))
(define-fun x100 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite x169 (x28 x93) (ite x194 (x122 x93) (x235 x93))))
(define-fun x196 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= x93 x39) x146 (x100 x93)))
(define-fun x253 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= x170 x93) x8 (x196 x93)))
(define-fun x234 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= x58 x93) x132 (x253 x93)))
(define-fun x192 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= x93 x87) x89 (x234 x93)))
(define-fun x127 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x93 x244) (bvult x93 (bvadd x208 x244))) (x102 (bvadd (bvadd (bvneg x244) x93) x71)) (x192 x93)))
(define-fun x105 ((x93 (_ BitVec 256))) (_ BitVec 256) (ite (= x223 x93) (_ bv0 256) (x127 x93)))
(define-fun x134 ((x93 x56)) (_ BitVec 256) (ite (= x140 x93) x233 (x161 x93)))
(define-fun x94 ((x239 (_ BitVec 256))) Bool (=> (and (not (= x239 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256))) (not (= x239 (_ bv292666793 256))) (not (= (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x239)) (not (= x239 (_ bv464684736 256))) (not (= x239 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvult (_ bv10000 256) x239) (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x239)) (not (= (_ bv388749022 256) x239)) (not (= x239 (_ bv18446744073709551615 256))) (not (= (_ bv2510660263 256) x239)) (not (= x239 (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256)))) (not ((_ is x112) (x255 x239)))))
(assert (= (x112 (_ bv464684736 256)) (x255 (_ bv464684736 256))))
(assert (x94 x146))
(assert (= x41 (and x25 x242)))
(assert (= (x112 (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256)) (x255 (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256))))
(assert (x94 x172))
(assert (= (x203 (x255 x129)) x129))
(assert (x94 x197))
(assert (=> (bvule x252 (_ bv10000 256)) (= (x112 x252) (x255 x252))))
(assert (= x78 (x203 (x255 x78))))
(assert (=> (bvuge (_ bv10000 256) x81) (= (x112 x81) (x255 x81))))
(assert (= (x203 (x255 x252)) x252))
(assert (=> (bvule x181 (_ bv10000 256)) (= (x112 x181) (x255 x181))))
(assert (=> (bvuge (_ bv10000 256) x16) (= (x255 x16) (x112 x16))))
(assert (= true x205))
(assert (= (or x194 x79) x250))
(assert (=> (bvule x197 (_ bv10000 256)) (= (x112 x197) (x255 x197))))
(assert (= (_ bv388749022 256) (x203 (x112 (_ bv388749022 256)))))
(assert (x94 x144))
(assert (=> (bvule x172 (_ bv10000 256)) (= (x255 x172) (x112 x172))))
(assert (= (and (not x73) x142) x257))
(assert (=> (bvule x55 (_ bv10000 256)) (= (x255 x55) (x112 x55))))
(assert (= (or x195 x257) x99))
(assert (= (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) (x203 (x112 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))))
(assert (= (x203 (x255 x165)) x165))
(assert (x94 x16))
(assert (=> (bvuge (_ bv10000 256) x78) (= (x112 x78) (x255 x78))))
(assert (= x172 (x203 (x255 x172))))
(assert (= (x203 (x255 x160)) x160))
(assert (x94 x55))
(assert (=> (bvule x106 (_ bv10000 256)) (= (x112 x106) (x255 x106))))
(assert (= (x255 (_ bv18446744073709551615 256)) (x112 (_ bv18446744073709551615 256))))
(assert (= x138 (and x25 (not x242))))
(assert (= (x203 (x112 (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256))) (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256)))
(assert (=> (bvuge (_ bv10000 256) x165) (= (x255 x165) (x112 x165))))
(assert (= (x203 (x112 (_ bv464684736 256))) (_ bv464684736 256)))
(assert (= (bvadd (_ bv3 256) (x203 x47)) (x203 (x45 x47 (_ bv3 256)))))
(assert (= (x203 (x255 x106)) x106))
(assert (= (x255 (_ bv1461501637330902918203684832716283019655932542975 256)) (x112 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (or x138 x41) x195))
(assert (= x130 (x203 (x255 x130))))
(assert (= x197 (x203 (x255 x197))))
(assert (= x185 (x203 (x255 x185))))
(assert (= (and x152 x82) x66))
(assert (x94 x78))
(assert (= x179 (and (not x82) x152)))
(assert (=> (bvuge (_ bv10000 256) (bvlshr x8 (_ bv96 256))) (= (x255 (bvlshr x8 (_ bv96 256))) (x112 (bvlshr x8 (_ bv96 256))))))
(assert (= (bvlshr x8 (_ bv96 256)) (x203 (x255 (bvlshr x8 (_ bv96 256))))))
(assert (= (x203 (x255 x16)) x16))
(assert (= (x255 (_ bv292666793 256)) (x112 (_ bv292666793 256))))
(assert (= (=> (and (= x201 (= (_ bv0 256) x123)) (or (and (and (= x202 (bvadd (_ bv32 256) x173)) (= x211 (ite x186 (_ bv1 256) (_ bv0 256))) (= (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x151) x219) (= (_ bv1 256) x114) (= x128 (bvadd (bvneg x61) x202)) (= (x115 (_ bv0 256)) x186) (= x12 (bvadd x61 (_ bv32 256))) (= x202 x245) (= (bvadd x219 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256)) x83) (= (bvadd x61 (_ bv36 256)) x173) (= x151 (x91 x12)) (= x85 false) (= x11 (bvadd x128 (bvneg (_ bv32 256)))) (= (ite x85 x114 (ite (bvugt x211 (_ bv0 256)) (_ bv1 256) (_ bv0 256))) x230)) (not x201)) (and (and (= x61 x245) (= x230 x123)) x201))) x38) x162))
(assert (= (_ bv0 256) (x28 (_ bv228 256))))
(assert (=> (bvuge (_ bv10000 256) x144) (= (x255 x144) (x112 x144))))
(assert (= (x112 (_ bv388749022 256)) (x255 (_ bv388749022 256))))
(assert (= (or x66 x179) x176))
(assert (=> (bvuge (_ bv10000 256) x129) (= (x112 x129) (x255 x129))))
(assert (=> (bvule x130 (_ bv10000 256)) (= (x255 x130) (x112 x130))))
(assert (= (_ bv0 256) (x28 x17)))
(assert (= (bvadd (x203 x109) (_ bv1 256)) (x203 (x45 x109 (_ bv1 256)))))
(assert (x94 x106))
(assert (= (=> (and (and (bvugt x144 (_ bv0 256)) (bvule x185 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x137 (not x209)) (not (= x144 x185)) (not (= x185 x131)) (= x31 (bvand x4 x187)) (= x53 x5) (= x214 (= (_ bv0 256) x31)) (= (bvugt (x145 (x255 x185)) (_ bv0 256)) x9) x107 (= (x119 (x255 x185)) x157) (= (x119 (x255 x144)) x63) x59 (= x190 (x15 (x255 x129) (x112 (_ bv1 256)) (_ bv0 256))) (= (bvult (_ bv0 256) (x145 (x255 x144))) x59) (bvugt x131 (_ bv0 256)) (bvule x129 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x5 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x119 (x255 x131)) x175) (not (= (_ bv292666793 256) x256)) (= (bvult (_ bv0 256) (x145 (x255 x131))) x107) (= false x159) (bvuge x175 (_ bv0 256)) (bvuge x4 (_ bv0 256)) (bvugt (_ bv2510660263 256) x256) (= x187 (bvshl (_ bv1 256) x97)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x4) (= x209 (not x214)) (= (_ bv4 256) x167) (bvuge x149 (_ bv0 256)) (bvuge x210 (_ bv0 256)) (not (= x256 (_ bv388749022 256))) (bvuge x157 (_ bv0 256)) (bvule x149 (_ bv1461501637330902918203684832716283019655932542975 256)) (= false x221) x9 (= x97 (bvand x37 (_ bv255 256))) (= x36 (not x137)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x131) (= x150 x204) (= x13 (x145 (x255 x144))) (bvult (_ bv0 256) x185) (= x259 (x15 (x255 x172) x190 (_ bv0 256))) (= (x45 x259 (_ bv3 256)) x224) (= (bvlshr x37 (_ bv8 256)) x16) (bvuge x63 (_ bv0 256)) (= x37 x22) (= x210 x129) (= false x23) (not (= x144 x131)) (= x172 x164) (bvule (_ bv0 256) x150) (bvuge x5 (_ bv0 256)) (= (ite x36 (_ bv1 256) (_ bv0 256)) x249) (= (x161 x121) x4) (= x256 (_ bv464684736 256)) (bvugt x13 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x144) (= (_ bv388749022 256) x178) (= (x15 (x255 x16) x224 (_ bv0 256)) x121) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x210) (= false x222) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x150)) (and (= x228 (x125 x69)) (= (bvadd x71 x254) x104) (= x154 (bvadd (bvneg (_ bv4 256)) x246)) (= x199 (bvadd (_ bv31 256) x84)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x46) (= x64 (x145 (x255 x144))) (= x33 x120) (bvuge x237 (_ bv0 256)) (= x143 x165) (= x258 x160) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x156) (= x24 x53) (= x174 x184) (= x88 (_ bv0 256)) (= x133 x160) (= x247 x46) (= x21 x247) (bvule (_ bv0 256) x24) (= x236 x146) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x24) (bvugt x64 (_ bv0 256)) (not (bvult (_ bv18446744073709551615 256) x89)) (= x174 (not (= (_ bv0 256) x249))) (not (bvugt (_ bv4 256) x246)) (not (bvsgt (_ bv128 256) x154)) (= (x102 x84) x89) (= x71 (bvadd (_ bv32 256) x84)) (bvslt (_ bv131 256) x246) (bvult x228 (_ bv256 256)) (bvuge x228 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x237) (= (bvadd x33 (_ bv4 256)) x84) (= x254 (bvmul (_ bv32 256) x89)) (= x69 (x15 (x255 x165) (x112 (_ bv4 256)) (_ bv0 256))) (bvult x168 (_ bv2510660263 256)) (not (bvult x246 x104)) (bvuge x46 (_ bv0 256)) (= x88 x226) (bvuge x156 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x165) (not (bvugt x120 (_ bv18446744073709551615 256))) (not (= (_ bv292666793 256) x168)) (not (= (_ bv2 256) x237)) (= x165 x70) (= x48 x110) (= (_ bv388749022 256) x168) (bvuge (_ bv255 256) x228) (= (bvugt x228 (_ bv0 256)) x19) (bvslt x199 x246))) (and (=> (and (and (or (and (and (= (_ bv196 256) x61) (= x123 x18)) x82) (and (not x82) (and (= (ite x141 x117 (ite (bvugt x54 (_ bv0 256)) (_ bv1 256) (_ bv0 256))) x148) (= x117 (_ bv1 256)) (= x123 (ite x34 (_ bv1 256) (_ bv0 256))) (= x34 (= x148 (_ bv0 256))) (= (x115 (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256)) x3) (= x54 (ite x3 (_ bv1 256) (_ bv0 256))) (= (bvadd x50 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256)) x217) (= (_ bv264 256) x61) (= x50 (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x229)) (= false x141) (= (x26 (_ bv228 256)) x229)))) (and (= x193 (bvadd x139 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256))) (= (x115 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256)) x108) (= x18 (ite (bvult (_ bv0 256) (ite x108 (_ bv1 256) (_ bv0 256))) (_ bv1 256) (_ bv0 256))) (= (x183 (_ bv160 256)) x180) (= (= (_ bv0 256) x18) x82) (= (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x180) x139))) (not x19)) x162) (=> (and x19 (= x58 (_ bv128 256))) x111))) x225))
(assert (= (=> (and (bvult (_ bv0 256) x230) (= x58 x245)) x111) x38))
(assert (= (x203 (x255 x181)) x181))
(assert (= (x203 (x112 (_ bv292666793 256))) (_ bv292666793 256)))
(assert (x94 x165))
(assert (= x81 (x203 (x255 x81))))
(assert (x94 x160))
(assert (= (x255 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x112 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (=> (bvule x185 (_ bv10000 256)) (= (x255 x185) (x112 x185))))
(assert (=> (bvule x146 (_ bv10000 256)) (= (x255 x146) (x112 x146))))
(assert (x94 x129))
(assert (= (x255 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256)) (x112 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256))))
(assert (x94 x81))
(assert (x94 (bvlshr x8 (_ bv96 256))))
(assert (= (x203 (x112 (_ bv18446744073709551615 256))) (_ bv18446744073709551615 256)))
(assert (= (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256) (x203 (x112 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256)))))
(assert (= x231 (=> (and (and (= x43 (not (= (_ bv0 256) x62))) (= x158 x43) (= x163 (or (not x30) x158))) (and (= x210 x252) (bvult x238 (_ bv2510660263 256)) (= x47 (x15 (x255 x106) x118 (_ bv0 256))) (= x20 (x45 x47 (_ bv3 256))) (= x164 x106) (= (x15 (x255 x78) x182 (_ bv0 256)) x140) (= x57 x22) (bvule x189 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x251 (bvshl (_ bv1 256) x7)) (= x181 (bvlshr x57 (_ bv8 256))) (bvule (_ bv0 256) x90) (= (not x116) x216) (not (= (_ bv388749022 256) x238)) (= (not x92) x243) (= x233 (bvor x90 x76)) (bvult (_ bv0 256) x212) (= x76 (bvshl (_ bv1 256) x77)) (= x7 (bvand (_ bv255 256) x57)) (= (bvlshr x146 (_ bv8 256)) x78) (= (ite x243 (_ bv1 256) (_ bv0 256)) x62) (= (bvand x251 x189) x136) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x252) (= (x255 x55) x155) (bvuge x189 (_ bv0 256)) (= x238 (_ bv464684736 256)) (not (= x238 (_ bv292666793 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x90) (= x77 (bvand (_ bv255 256) x146)) (= x92 (not x216)) (= x189 (x134 x126)) (= x126 (x15 (x255 x181) x20 (_ bv0 256))) (= x118 (x15 (x255 x252) (x112 (_ bv1 256)) (_ bv0 256))) (= x30 x184) (= (= (_ bv0 256) x136) x116) (= x212 (x145 (x255 x144))) (= x90 (x161 x140)))) x163)))
(assert (x94 x131))
(assert (= x194 (and x176 x201)))
(assert (= x198 (=> (and (= (x105 x87) x220) (= x215 (not (bvugt x220 (_ bv1 256))))) (and (=> (= x155 x171) x231) x215))))
(assert (= (x203 (x255 x146)) x146))
(assert (= (_ bv0 256) (x28 x12)))
(assert (x94 x130))
(assert (= (bvadd (_ bv3 256) (x203 x109)) (x203 (x45 x109 (_ bv3 256)))))
(assert (= (and x73 x142) x25))
(assert (= (x203 (x45 x259 (_ bv3 256))) (bvadd (x203 x259) (_ bv3 256))))
(assert (= (x28 (_ bv160 256)) (_ bv0 256)))
(assert (= x142 (or x250 x169)))
(assert (= (x203 (x112 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x52 (x255 (x203 x52))))
(assert (= (x203 (x255 x55)) x55))
(assert (=> (bvule x131 (_ bv10000 256)) (= (x112 x131) (x255 x131))))
(assert (=> (bvule x160 (_ bv10000 256)) (= (x112 x160) (x255 x160))))
(assert (= (and x205 (not x19)) x152))
(assert (= (and x205 x19) x169))
(assert (= (x112 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) (x255 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))))
(assert (not x225))
(assert (x94 x185))
(assert (= (_ bv2510660263 256) (x203 (x112 (_ bv2510660263 256)))))
(assert (= x111 (=> (and (= x227 (= (_ bv0 256) x10)) (= x52 (x240 (x112 (_ bv52 256)) (x112 (_ bv32 256)) (x255 x146) (x255 (bvlshr x8 (_ bv96 256))) (_ bv0 256))) (= (bvadd x208 x244) x223) (bvule (_ bv0 256) x101) (= x60 (bvand x146 (_ bv255 256))) (bvuge x42 (_ bv0 256)) (bvule x86 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x87 (bvadd x170 (_ bv20 256))) (= x72 (x15 (x255 x197) (x112 (_ bv1 256)) (_ bv0 256))) (= (x15 (x255 x130) x182 (_ bv0 256)) x188) x227 (bvule x55 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (bvult x101 x48)) (= x213 (bvadd x87 (bvneg x58))) (= x244 (bvadd (_ bv32 256) x87)) (= (x45 x1 (_ bv1 256)) x75) (= x1 (x45 x109 (_ bv1 256))) (= (x35 x109) x86) (= x197 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x165)) (bvuge x86 (_ bv0 256)) (= x55 (x35 x109)) (bvugt x86 (_ bv0 256)) (= x182 (x45 x109 (_ bv3 256))) (= (bvult x48 x80) x260) (= x170 (bvadd (_ bv32 256) x39)) (= x80 (x95 x1)) (= x109 (x15 (x255 x160) x72 (_ bv0 256))) (not x260) (bvule (_ bv0 256) x80) (= x132 (bvadd (bvneg (_ bv32 256)) x213)) (= (bvshl x53 (_ bv96 256)) x8) (= x208 (bvmul (_ bv32 256) x89)) (= x39 (bvadd (_ bv32 256) x58)) (= (x161 x188) x42) (= x10 (bvand x42 x44)) (bvule x80 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvlshr x146 (_ bv8 256)) x130) (= (bvult (_ bv0 256) x96) x73) (= (x29 x75) x101) (bvule x42 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x101 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x55) (= x96 (x105 x87)) (= x44 (bvshl (_ bv1 256) x60))) (and (=> (and (not x73) (= x52 x155)) x231) (=> (and (and (or (and (not x242) (and (= (x15 (x255 x81) x52 (_ bv0 256)) x49) (= x171 x49))) (and (and (= x171 x177) (= x177 (x15 x52 (x255 x81) (_ bv0 256)))) x242)) (and (= (bvult (x203 x52) x81) x242) (bvult (_ bv0 256) x67) (= (bvadd x87 (_ bv32 256)) x17) (= x67 (x105 x87)) (= x81 (x105 x17)))) x73) x198)))))
(assert (= (x112 (_ bv2510660263 256)) (x255 (_ bv2510660263 256))))
(assert (= (and x176 (not x201)) x79))
(assert (x94 x252))
(assert (= (x203 (x255 x144)) x144))
(assert (= (bvadd (x203 x1) (_ bv1 256)) (x203 (x45 x1 (_ bv1 256)))))
(assert (= (x203 (x112 (_ bv1461501637330902918203684832716283019655932542975 256))) (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (x94 x181))
(assert (= x131 (x203 (x255 x131))))
(check-sat)
(exit)