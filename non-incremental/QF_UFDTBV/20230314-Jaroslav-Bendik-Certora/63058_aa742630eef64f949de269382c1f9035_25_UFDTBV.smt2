(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x308 0)) (((x21 (x160 (_ BitVec 256))) (x6 (x305 x308) (x212 x308) (x22 (_ BitVec 256))) (x222 (x57 x308) (x69 (_ BitVec 256))))))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x101 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x266 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x124 () x308)
(declare-fun x306 () Bool)
(declare-fun x273 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x174 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x298 () Bool)
(declare-fun x29 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x110 () Bool)
(declare-fun x133 () Bool)
(declare-fun x248 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x26 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x1 (x308) (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x258 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x295 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x307 () Bool)
(declare-fun x271 () Bool)
(declare-fun x72 () Bool)
(declare-fun x55 () (_ BitVec 256))
(declare-fun x283 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x261 () Bool)
(declare-fun x102 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x172 () Bool)
(declare-fun x245 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x58 () x308)
(declare-fun x253 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x185 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x255 () x308)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x289 () Bool)
(declare-fun x276 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x48 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x293 () Bool)
(declare-fun x236 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x173 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x303 () Bool)
(declare-fun x228 (x308) (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x88 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x96 () Bool)
(declare-fun x86 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x151 () Bool)
(declare-fun x85 () Bool)
(declare-fun x32 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x221 () Bool)
(declare-fun x244 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x77 (x308) (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x277 () Bool)
(declare-fun x194 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x274 () x308)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x125 () Bool)
(declare-fun x243 () (_ BitVec 256))
(declare-fun x285 ((_ BitVec 256)) x308)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x304 () Bool)
(declare-fun x64 () Bool)
(declare-fun x121 () Bool)
(declare-fun x104 () Bool)
(declare-fun x296 (x308) (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x235 () Bool)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x84 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x202 (x308) (_ BitVec 256))
(declare-fun x279 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x114 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x141 () x308)
(declare-fun x191 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x224 () Bool)
(declare-fun x260 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x195 (x308) (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x291 () Bool)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x282 () Bool)
(declare-fun x138 () Bool)
(declare-fun x275 () x308)
(declare-fun x157 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x65 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x237 () Bool)
(declare-fun x300 () Bool)
(declare-fun x51 () Bool)
(declare-fun x76 () Bool)
(declare-fun x71 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x265 () Bool)
(declare-fun x225 () Bool)
(declare-fun x159 () Bool)
(declare-fun x182 () Bool)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x309 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x105 () Bool)
(declare-fun x81 () x308)
(declare-fun x286 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x209 () Bool)
(declare-fun x178 (x308) (_ BitVec 256))
(declare-fun x203 () Bool)
(define-fun x153 ((x308 x308) (x278 (_ BitVec 256))) x308 (ite ((_ is x222) x308) (x222 (x57 x308) (bvadd (x69 x308) x278)) (ite ((_ is x6) x308) (x6 (x305 x308) (x212 x308) (bvadd x278 (x22 x308))) (x21 (bvadd (x160 x308) x278)))))
(define-fun x233 ((x268 (_ BitVec 256)) (x226 (_ BitVec 256))) Bool (= x268 (bvudiv (bvmul x268 x226) x226)))
(define-fun x206 ((x268 (_ BitVec 256)) (x226 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x226 x268) x226) x268))
(define-fun x34 ((x268 (_ BitVec 256)) (x226 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x268 x226) x226) x268))
(define-fun x36 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 (_ bv384 256)) x39 (x185 x42)))
(define-fun x249 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite x277 (x185 x42) (x36 x42)))
(define-fun x297 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 (_ bv384 256)) (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256) (x249 x42)))
(define-fun x230 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv388 256) x42) x142 (x297 x42)))
(define-fun x262 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 (_ bv420 256)) x31 (x230 x42)))
(define-fun x288 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv452 256) x42) x164 (x262 x42)))
(define-fun x254 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvule (_ bv384 256) x42) (bvult x42 (bvadd (_ bv384 256) (_ bv0 256)))) (x101 (bvadd (_ bv0 256) (bvadd (bvneg (_ bv384 256)) x42))) (x288 x42)))
(define-fun x14 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite x172 (x249 x42) (ite x210 (x254 x42) (x288 x42))))
(define-fun x155 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 (_ bv384 256)) x301 (x14 x42)))
(define-fun x197 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 (_ bv384 256)) x301 (x155 x42)))
(define-fun x214 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 (_ bv416 256)) x78 (x197 x42)))
(define-fun x165 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 (_ bv448 256)) x103 (x214 x42)))
(define-fun x23 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv480 256) x42) x38 (x165 x42)))
(define-fun x25 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv512 256) x42) x88 (x23 x42)))
(define-fun x30 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 (_ bv544 256)) x247 (x25 x42)))
(define-fun x192 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 (_ bv384 256)) (ite x154 (_ bv1 256) (_ bv0 256)) (x30 x42)))
(define-fun x130 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv416 256) x42) x247 (x192 x42)))
(define-fun x120 ((x42 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 (_ bv448 256)) x88 (x130 x42)))
(define-fun x232 ((x176 (_ BitVec 256))) Bool (=> (and (not (= (_ bv2432105714 256) x176)) (not (= x176 (_ bv1000000000000000000000000000 256))) (not (= x176 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x176)) (not (= x176 (_ bv404098525 256))) (bvugt x176 (_ bv10000 256)) (not (= (_ bv2976520670 256) x176)) (not (= x176 (_ bv3018967357 256))) (not (= (_ bv1000000000 256) x176)) (not (= (_ bv599290589 256) x176)) (not (= (_ bv189977944 256) x176)) (not (= (_ bv3226110480 256) x176)) (not (= (_ bv4294967296 256) x176)) (not (= (_ bv157198259 256) x176)) (not (= (_ bv340282366920938463463374607431768211455 256) x176)) (not (= x176 (_ bv1461501637330902918203684832716283019655932542976 256))) (not (= (_ bv1865579259 256) x176)) (not (= (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x176)) (not (= (_ bv340282366920938463463374607431768211456 256) x176)) (not (= (_ bv1809280292 256) x176)) (not (= (_ bv500000000000000000000000000 256) x176)) (not (= (_ bv2835717307 256) x176)) (not (= x176 (_ bv1889567281 256))) (not (= x176 (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256))) (not (= x176 (_ bv1976722451 256))) (not (= (_ bv1099511627775 256) x176)) (not (= (_ bv117300739 256) x176)) (not (= (_ bv2646777772 256) x176)) (not (= (_ bv1966461510 256) x176))) (not ((_ is x21) (x285 x176)))))
(assert (= (x195 (x21 (_ bv1809280292 256))) (_ bv1809280292 256)))
(assert (=> (bvule x140 (_ bv10000 256)) (= (x21 x140) (x285 x140))))
(assert (x232 x26))
(assert (= (x285 (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256)) (x21 (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256))))
(assert (=> (bvule x109 (_ bv10000 256)) (= (x21 x109) (x285 x109))))
(assert (= (x21 (_ bv340282366920938463463374607431768211456 256)) (x285 (_ bv340282366920938463463374607431768211456 256))))
(assert (= (or x64 x293) x295))
(assert (= (and (not x290) x224) x293))
(assert (= (x195 (x21 (_ bv2432105714 256))) (_ bv2432105714 256)))
(assert (= (x285 (_ bv1809280292 256)) (x21 (_ bv1809280292 256))))
(assert (= (x195 (x285 x149)) x149))
(assert (= (x21 (_ bv2432105714 256)) (x285 (_ bv2432105714 256))))
(assert (= (x195 (x21 (_ bv1000000000000000000000000000 256))) (_ bv1000000000000000000000000000 256)))
(assert (= x172 (and x114 x295)))
(assert (= x184 (x195 (x285 x184))))
(assert (= x279 true))
(assert (= (x195 (x21 (_ bv1099511627775 256))) (_ bv1099511627775 256)))
(assert (= (x285 (_ bv1966461510 256)) (x21 (_ bv1966461510 256))))
(assert (=> (bvule x149 (_ bv10000 256)) (= (x21 x149) (x285 x149))))
(assert (= (x285 (_ bv599290589 256)) (x21 (_ bv599290589 256))))
(assert (= x51 (=> (and (= (= (_ bv0 256) x257) x48) (or x48 (not x48))) x106)))
(assert (= (x21 (_ bv1976722451 256)) (x285 (_ bv1976722451 256))))
(assert (= (x195 (x285 x26)) x26))
(assert (= (x195 (x21 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (=> (and (= (or x18 x209) x27) (= x129 x164) (bvuge x53 (_ bv0 256)) (= x110 (not x236)) (x233 x31 (_ bv1000000000 256)) (= x173 (bvuge x3 x164)) (= (bvand (_ bv1099511627775 256) x93) x108) (= x71 x217) (x233 x247 (_ bv1000000000 256)) (= x29 (= (_ bv0 256) x260)) (= (bvudiv x198 x251) x88) (bvule x53 (_ bv340282366920938463463374607431768211455 256)) (bvuge (_ bv340282366920938463463374607431768211455 256) x269) (= x79 (ite x122 (_ bv1 256) (_ bv0 256))) (= (bvand x44 (_ bv1461501637330902918203684832716283019655932542975 256)) x135) (= x82 (ite x203 (_ bv1 256) (_ bv0 256))) (bvule x33 (bvadd x43 x33)) (= x189 (bvudiv x4 (_ bv1000000000000000000000000000 256))) (= (bvult x119 x243) x303) (= x269 (bvadd x129 x60)) (= x60 x301) (= (bvult x139 x244) x236) (= x146 (bvmul (_ bv1000000000 256) x200)) (= (bvmul x240 x215) x177) (bvule x98 (_ bv340282366920938463463374607431768211455 256)) (bvule (_ bv0 256) x98) (= (bvmul x53 x150) x246) (bvugt (_ bv340282366920938463463374607431768211456 256) x164) (= (x178 x274) x164) (= x76 (not x300)) (bvuge (bvadd x164 x301) x164) (= x86 (= x243 (_ bv0 256))) (= x147 (bvadd (_ bv500000000000000000000000000 256) x299)) (= x17 (bvudiv x263 (_ bv1000000000000000000000000000 256))) (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x240) x119) (= x71 (x178 x255)) (= x294 (bvand x93 (_ bv1099511627775 256))) (bvule x78 (bvadd x102 x78)) (bvult (_ bv0 256) x82) (not (bvult (_ bv340282366920938463463374607431768211455 256) x88)) (= x83 (bvadd x10 x131)) (= x306 (not x110)) (= x196 x43) (= x223 (bvudiv x198 x251)) (bvule (_ bv0 256) x71) (= x238 (bvadd x231 x50)) (= x211 x201) (not (bvugt x38 (_ bv340282366920938463463374607431768211455 256))) (bvult (_ bv0 256) x73) (= (bvadd x286 x99) x301) (= x70 (= x146 (_ bv0 256))) (= (x6 (x285 x149) (x21 (_ bv56 256)) (_ bv0 256)) x274) (= (bvadd (_ bv500000000000000000000000000 256) x177) x263) (= x50 (bvmul (_ bv1000000000000000000000000000 256) x244)) (= x299 (bvmul x215 x240)) (= x229 (bvadd x134 x20)) (= x166 (bvudiv x251 (_ bv2 256))) (= (or x306 x70) x97) (= x92 (ite x27 (_ bv1 256) (_ bv0 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x31) (= x96 (not x116)) (= (x6 (x285 x109) (x21 (_ bv56 256)) (_ bv0 256)) x141) (= (bvadd x31 x102) x211) (= (not x291) x304) x271 (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x260) x161) (bvuge x31 (_ bv0 256)) (= (bvmul x78 (_ bv1000000000 256)) x260) (bvuge x164 (_ bv0 256)) (= x131 x17) (= (bvugt x240 x9) x116) (bvuge (_ bv340282366920938463463374607431768211455 256) x164) (= (= x227 x267) x271) (= x73 (ite x225 (_ bv1 256) (_ bv0 256))) (= (ite x235 (_ bv1 256) (_ bv0 256)) x87) (= (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg x2)) x126) (= x251 (bvmul x247 (_ bv1000000000 256))) (= (or x125 x85) x122) (= x67 (bvmul x260 x98)) (= x90 (ite x97 (_ bv1 256) (_ bv0 256))) (bvult (_ bv0 256) x79) (= (or x86 x96) x235) (= x45 x102) (= (or x29 x76) x203) (= (= (_ bv0 256) x251) x209) (= x35 (bvadd x67 (_ bv500000000000000000000000000 256))) (= (bvadd x229 (bvneg x217)) x267) (= x38 (bvudiv x238 x146)) (not (bvult (_ bv340282366920938463463374607431768211455 256) x301)) (= (bvudiv x146 (_ bv2 256)) x2) (= x89 x33) x173 (= x85 (= (_ bv0 256) x150)) (x233 x102 (_ bv1000000000 256)) (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x150) x245) (= x80 x78) (= (= (_ bv0 256) x240) x133) (bvugt (_ bv340282366920938463463374607431768211456 256) x98) (= x18 (not x304)) (= x109 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x44)) (= (bvugt x98 x161) x300) (= (not x237) x125) (= x225 (or x133 x298)) (= x189 x10) (= (bvand x44 (_ bv1461501637330902918203684832716283019655932542975 256)) x149) (= (= x140 (_ bv0 256)) x114) (bvule (_ bv0 256) x140) (= (bvugt x83 x188) x291) (bvule x71 (_ bv340282366920938463463374607431768211455 256)) (= x211 x247) (= (bvudiv x146 (_ bv2 256)) x231) (= x198 (bvadd x166 x191)) (= x269 x20) (= (x228 x141) x98) (= x240 (bvmul x168 (_ bv1000000000 256))) (bvult x140 (_ bv1461501637330902918203684832716283019655932542976 256)) (bvuge (bvadd x103 x102) x102) (= x276 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x44)) (= x102 x99) (= (bvadd x89 x196) x244) (= (x6 (x285 x276) (x21 (_ bv56 256)) (_ bv0 256)) x255) (= x200 (bvadd x80 x45)) (= x286 x103) (bvule x189 (bvadd x17 x189)) (= (bvult x245 x53) x237) (bvuge (bvadd x102 x31) x31) (= x134 x3) (= (bvmul (_ bv1000000000000000000000000000 256) x83) x191) (= (bvudiv x147 (_ bv1000000000000000000000000000 256)) x43) (= (bvadd (bvneg x213) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x280) (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x215) x9) (= (bvudiv x126 (_ bv1000000000000000000000000000 256)) x139) (x233 x78 (_ bv1000000000 256)) (= (bvudiv x35 (_ bv1000000000000000000000000000 256)) x33) (= x213 (bvudiv x251 (_ bv2 256))) (= (bvmul x31 (_ bv1000000000 256)) x150) (= x90 (_ bv0 256)) (bvule (_ bv0 256) x53) (bvugt (_ bv340282366920938463463374607431768211456 256) x53) (= x227 x250) (= (bvadd x246 (_ bv500000000000000000000000000 256)) x4) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x140) (= x298 (not x303)) (= (bvudiv x280 (_ bv1000000000000000000000000000 256)) x188) (x233 x200 (_ bv1000000000 256)) (= (bvand x44 (_ bv1461501637330902918203684832716283019655932542975 256)) x143) (bvugt x87 (_ bv0 256)) (= x92 (_ bv0 256)) (bvult x53 (_ bv340282366920938463463374607431768211456 256)) (bvule x53 (_ bv340282366920938463463374607431768211455 256))) (and (=> (and (and (and (= x142 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x44)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x140) (= (x77 (x285 x140)) x46) (bvuge x140 (_ bv0 256)) (= x104 (bvugt x257 (_ bv0 256))) (bvugt (_ bv1461501637330902918203684832716283019655932542976 256) x140) (not (= x46 (_ bv0 256)))) (or (not x104) (and x104 (and (= (= (x202 (x285 x140)) x68) x234) x159 (= x159 (bvule x204 (x202 (x285 x26)))) (= (x296 (x285 x26)) x204) x234 (= (x296 (x285 x140)) x68) (bvult x7 (_ bv4294967296 256)))))) (not x114)) x51) (=> x114 x248))) x151))
(assert (= (_ bv1966461510 256) (x195 (x21 (_ bv1966461510 256)))))
(assert (= (x285 (_ bv500000000000000000000000000 256)) (x21 (_ bv500000000000000000000000000 256))))
(assert (=> (bvuge (_ bv10000 256) x11) (= (x285 x11) (x21 x11))))
(assert (= (x21 (_ bv1000000000000000000000000000 256)) (x285 (_ bv1000000000000000000000000000 256))))
(assert (= (x195 (x21 (_ bv1461501637330902918203684832716283019655932542976 256))) (_ bv1461501637330902918203684832716283019655932542976 256)))
(assert (= (x195 (x285 x11)) x11))
(assert (x232 x149))
(assert (= (_ bv2835717307 256) (x195 (x21 (_ bv2835717307 256)))))
(assert (= x210 (and x105 x104)))
(assert (= (x195 (x21 (_ bv3226110480 256))) (_ bv3226110480 256)))
(assert (= (_ bv4294967296 256) (x195 (x21 (_ bv4294967296 256)))))
(assert (=> (bvule x276 (_ bv10000 256)) (= (x21 x276) (x285 x276))))
(assert (= (x285 (_ bv4294967296 256)) (x21 (_ bv4294967296 256))))
(assert (x232 x276))
(assert (= (x195 (x285 x242)) x242))
(assert (= (x285 (_ bv2646777772 256)) (x21 (_ bv2646777772 256))))
(assert (= (x195 (x21 (_ bv500000000000000000000000000 256))) (_ bv500000000000000000000000000 256)))
(assert (= (and x290 x224) x64))
(assert (not x283))
(assert (= (x21 (_ bv1889567281 256)) (x285 (_ bv1889567281 256))))
(assert (= (x21 (_ bv2835717307 256)) (x285 (_ bv2835717307 256))))
(assert (= (x195 (x21 (_ bv157198259 256))) (_ bv157198259 256)))
(assert (x232 x94))
(assert (= (x195 (x21 (_ bv117300739 256))) (_ bv117300739 256)))
(assert (= (x285 (_ bv1865579259 256)) (x21 (_ bv1865579259 256))))
(assert (= (x285 (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256)) (x21 (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256))))
(assert (= x266 (and (not x104) x105)))
(assert (= (or x210 x266) x65))
(assert (= (_ bv3018967357 256) (x195 (x21 (_ bv3018967357 256)))))
(assert (= (x195 (x21 (_ bv1865579259 256))) (_ bv1865579259 256)))
(assert (= (x21 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x285 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (=> (bvuge (_ bv10000 256) x184) (= (x285 x184) (x21 x184))))
(assert (= (x195 (x21 (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256))) (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256)))
(assert (= x84 (and (not x216) x279)))
(assert (= (x285 (_ bv2976520670 256)) (x21 (_ bv2976520670 256))))
(assert (= (x285 (_ bv117300739 256)) (x21 (_ bv117300739 256))))
(assert (= (x21 (_ bv189977944 256)) (x285 (_ bv189977944 256))))
(assert (= x248 (=> (and (and (= x75 (x120 (_ bv448 256))) (= x265 (= (_ bv0 256) x78)) (= (x120 (_ bv384 256)) x113) (= x41 (x120 (_ bv416 256))) (= x154 x265)) (and (and (bvult x273 (_ bv2432105714 256)) (bvult x273 (_ bv1809280292 256)) (bvuge x95 (_ bv0 256)) (not (= (_ bv117300739 256) x273)) (bvule (_ bv0 256) x136) (not (= x273 (_ bv189977944 256))) (bvult (_ bv0 256) x193) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x95) (bvuge x74 (_ bv0 256)) (= (_ bv0 256) x19) (= (x77 (x285 x26)) x193) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x136) (= x12 x95) (bvugt (_ bv599290589 256) x273) (bvugt (_ bv340282366920938463463374607431768211456 256) x223) (= x19 x180) (not (= (_ bv157198259 256) x273)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x74) (= (_ bv404098525 256) x273) (= x272 x12) (= x174 x136) (= x201 x219) (bvule (_ bv0 256) x201) (bvule (_ bv0 256) x88) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x201) (bvule x88 (_ bv340282366920938463463374607431768211455 256))) (and (and (= x37 x307) (= (_ bv3018967357 256) x144) (= x32 true) (= x152 (_ bv3018967357 256)) (= true x282) (= (_ bv2646777772 256) x218) (= x52 (or x307 (not x261))) (= x37 (= x16 x117)) (= false x292) (= x208 (_ bv3018967357 256)) (= x16 x118)) (and (= x115 x180) (= x66 x118) (= x179 x309) (bvult (_ bv0 256) x259) (= x259 (x77 (x285 x26))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x107) (= x28 x61) (bvule x15 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x187 x169) (bvule x28 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x239) x66) (not (= x241 (_ bv1865579259 256))) (not (bvult x241 (_ bv1809280292 256))) (not (= (_ bv1889567281 256) x241)) (= (_ bv0 256) x115) (= x174 x15) (not (= (_ bv1809280292 256) x241)) (= x117 x174) (bvult x241 (_ bv2432105714 256)) (bvuge x15 (_ bv0 256)) (= x219 x169) (= x241 (_ bv1966461510 256)) (= x261 (not (= x179 x187))) (bvuge x28 (_ bv0 256)) (bvult x241 (_ bv1976722451 256)) (bvuge x107 (_ bv0 256)) (= x272 x61))))) x52)))
(assert (= x224 (or x84 x277)))
(assert (= (or x158 x172) x54))
(assert (= (x285 (_ bv157198259 256)) (x21 (_ bv157198259 256))))
(assert (= (_ bv340282366920938463463374607431768211456 256) (x195 (x21 (_ bv340282366920938463463374607431768211456 256)))))
(assert (= (x195 (x21 (_ bv340282366920938463463374607431768211455 256))) (_ bv340282366920938463463374607431768211455 256)))
(assert (=> (bvuge (_ bv10000 256) x26) (= (x285 x26) (x21 x26))))
(assert (x232 x109))
(assert (= (x195 (x21 (_ bv1461501637330902918203684832716283019655932542975 256))) (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (x232 x184))
(assert (= (x195 (x21 (_ bv2646777772 256))) (_ bv2646777772 256)))
(assert (= (_ bv2976520670 256) (x195 (x21 (_ bv2976520670 256)))))
(assert (x232 x140))
(assert (= (and x65 x48) x289))
(assert (= x106 (=> (not (= x257 (_ bv0 256))) x248)))
(assert (= (x21 (_ bv1461501637330902918203684832716283019655932542976 256)) (x285 (_ bv1461501637330902918203684832716283019655932542976 256))))
(assert (= (x21 (_ bv3226110480 256)) (x285 (_ bv3226110480 256))))
(assert (= x105 (and x295 (not x114))))
(assert (=> (bvule x94 (_ bv10000 256)) (= (x285 x94) (x21 x94))))
(assert (= (_ bv1889567281 256) (x195 (x21 (_ bv1889567281 256)))))
(assert (=> (bvule x242 (_ bv10000 256)) (= (x285 x242) (x21 x242))))
(assert (= (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256) (x195 (x21 (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256)))))
(assert (= (_ bv1976722451 256) (x195 (x21 (_ bv1976722451 256)))))
(assert (= x276 (x195 (x285 x276))))
(assert (= x140 (x195 (x285 x140))))
(assert (= x283 (=> (and (and (bvule (_ bv0 256) x53) (bvule (_ bv0 256) x5) (bvuge (_ bv340282366920938463463374607431768211455 256) x53) (bvuge x148 (_ bv0 256)) (bvule x31 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x148 (_ bv255 256)) (bvuge x123 (_ bv0 256)) (= false x182) (= false x221) (bvule x5 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x167 (_ bv0 256)) (= x72 (bvult (_ bv0 256) (x77 (x285 x26)))) (bvuge x53 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x26) (= (_ bv404098525 256) x281) (bvuge x40 (_ bv0 256)) (= (_ bv4 256) x190) (= false x121) (bvule x205 (_ bv255 256)) (= (_ bv3018967357 256) x49) (= x183 (x77 (x285 x26))) (bvule (_ bv0 256) x140) (bvule (_ bv0 256) x220) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x123) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x162) (bvule (_ bv0 256) x137) (not (= (_ bv117300739 256) x281)) (bvugt x183 (_ bv0 256)) (bvult x53 (_ bv340282366920938463463374607431768211456 256)) (bvule x132 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x281 (_ bv157198259 256))) (bvule (_ bv0 256) x252) (= x132 x186) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x140) (= x47 x272) (= (x296 (x285 x26)) x137) (bvult x281 (_ bv2432105714 256)) (bvuge (_ bv1099511627775 256) x220) (= x31 x8) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x252) (bvult x281 (_ bv599290589 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x40) (bvule (_ bv0 256) x162) (bvugt (_ bv1809280292 256) x281) (= x170 false) (bvult (_ bv0 256) x26) (= x5 x174) (= x180 x167) (= x40 x174) x72 (= x162 x47) (not (= (_ bv189977944 256) x281)) (bvule (_ bv0 256) x132) (bvule x53 (_ bv340282366920938463463374607431768211455 256)) (bvuge x205 (_ bv0 256)) (bvule (_ bv0 256) x31)) (and (or x216 (and (not x216) (and (bvult x123 (_ bv1461501637330902918203684832716283019655932542976 256)) (bvuge x123 (_ bv0 256)) (= (bvand x44 (_ bv1461501637330902918203684832716283019655932542975 256)) x270) (= x184 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x44)) (= x302 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x156)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x112) (bvule x123 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x275 (x6 (x285 x242) x81 (_ bv0 256))) (= x81 (x6 (x285 x184) (x21 (_ bv54 256)) (_ bv0 256))) (= (x1 x275) x112) (bvuge x112 (_ bv0 256)) (= x39 (bvadd x112 (bvneg x168))) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x156) x242) (not (bvult x112 x102))))) (and (bvugt (_ bv3226110480 256) x256) (= x44 x163) (not (bvult x256 (_ bv2432105714 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x91) (bvsgt x24 (_ bv131 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x156) (not (bvugt (_ bv2835717307 256) x256)) (bvuge x91 (_ bv0 256)) (bvule x128 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x243 x215) (= x309 x8) (= x111 (bvadd x24 (bvneg (_ bv4 256)))) (= x258 x156) (bvuge x181 (_ bv0 256)) (= x168 x56) (bvule (_ bv0 256) x128) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x181) (= x180 x55) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x239) x253) (= x216 (= x44 x156)) (= x264 x156) (not (bvugt (_ bv4 256) x24)) (= (_ bv0 256) x55) (= x62 x91) (not (= (_ bv2835717307 256) x256)) (= x145 (x77 (x285 x26))) (= x253 x13) (bvule x44 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x44 x127) (not (bvslt x111 (_ bv128 256))) (= x215 x287) (= x102 x168) (= x272 x62) (not (= (_ bv2976520670 256) x256)) (= x128 x174) (= x13 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x174)) (bvult (_ bv0 256) x145) (= (_ bv3018967357 256) x256)))) x63)))
(assert (= (x21 (_ bv1099511627775 256)) (x285 (_ bv1099511627775 256))))
(assert (= (x21 (_ bv3018967357 256)) (x285 (_ bv3018967357 256))))
(assert (x232 x11))
(assert (= x94 (x195 (x285 x94))))
(assert (= (x21 (_ bv1461501637330902918203684832716283019655932542975 256)) (x285 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (_ bv1000000000 256) (x195 (x21 (_ bv1000000000 256)))))
(assert (= (x285 (_ bv404098525 256)) (x21 (_ bv404098525 256))))
(assert (= (x195 (x285 x109)) x109))
(assert (= (x21 (_ bv1000000000 256)) (x285 (_ bv1000000000 256))))
(assert (= (or (and (not x48) x65) x289) x158))
(assert (= x277 (and x279 x216)))
(assert (= (=> (and (and (= x94 (bvand x44 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (x178 x124) x207) (bvule x207 (_ bv340282366920938463463374607431768211455 256)) (= x290 (= (_ bv0 256) x207)) x138 (= (x6 (x285 x94) (x21 (_ bv56 256)) (_ bv0 256)) x124) (= x138 (bvule x207 x3)) (bvule (_ bv0 256) x207) (bvugt (_ bv340282366920938463463374607431768211456 256) x207)) (or (and x290 (and (= (_ bv0 256) x194) (= x103 (_ bv0 256)) (= x78 (_ bv0 256)))) (and (not x290) (and x284 (= x199 (bvadd x100 (bvneg x207))) (bvuge (_ bv340282366920938463463374607431768211455 256) x100) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x44) x11) (not (bvult x100 x207)) (= x78 x100) (bvule (_ bv0 256) x100) (= x199 x103) (bvugt (_ bv340282366920938463463374607431768211456 256) x100) (= x100 (x178 x58)) (= (x6 (x285 x11) (x21 (_ bv56 256)) (_ bv0 256)) x58) (= (bvule x100 x3) x284) (= x194 x207))))) x151) x63))
(assert (= (_ bv599290589 256) (x195 (x21 (_ bv599290589 256)))))
(assert (= (_ bv189977944 256) (x195 (x21 (_ bv189977944 256)))))
(assert (= (x285 (_ bv340282366920938463463374607431768211455 256)) (x21 (_ bv340282366920938463463374607431768211455 256))))
(assert (x232 x242))
(assert (= (x195 (x21 (_ bv404098525 256))) (_ bv404098525 256)))
(check-sat)
(exit)