(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x242 0)) (((x47 (x330 (_ BitVec 256))) (x151 (x6 x242) (x260 x242) (x172 (_ BitVec 256))) (x149 (x243 x242) (x150 x242) (x66 x242) (x59 x242) (x69 (_ BitVec 256))) (x139 (x61 x242) (x310 (_ BitVec 256))))))
(declare-fun x128 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x254 () Bool)
(declare-fun x247 () (_ BitVec 256))
(declare-fun x143 () x242)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x175 () (_ BitVec 256))
(declare-fun x274 () Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x191 () x242)
(declare-fun x148 () x242)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x298 () Bool)
(declare-fun x271 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x312 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x320 (x242) (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x307 () Bool)
(declare-fun x277 (x242) (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x216 () x242)
(declare-fun x171 () x242)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x238 (x242) (_ BitVec 256))
(declare-fun x166 (x242) (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x313 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x323 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x19 () x242)
(declare-fun x226 (x242) (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x287 () Bool)
(declare-fun x180 () x242)
(declare-fun x282 () x242)
(declare-fun x118 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x322 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x194 (x242) (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x268 () Bool)
(declare-fun x248 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x142 () x242)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x112 () x242)
(declare-fun x170 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x125 () x242)
(declare-fun x11 () x242)
(declare-fun x10 () x242)
(declare-fun x234 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x235 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x314 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x74 () Bool)
(declare-fun x38 () x242)
(declare-fun x239 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x266 ((_ BitVec 256)) x242)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x72 () x242)
(declare-fun x300 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x12 () x242)
(declare-fun x241 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x236 () x242)
(declare-fun x109 () x242)
(declare-fun x264 (x242) (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x127 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x324 () (_ BitVec 256))
(declare-fun x246 () x242)
(declare-fun x140 () x242)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x240 () x242)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x308 () (_ BitVec 256))
(declare-fun x48 () x242)
(declare-fun x67 () (_ BitVec 256))
(declare-fun x245 () x242)
(declare-fun x326 () (_ BitVec 256))
(declare-fun x321 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x116 () x242)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x14 () x242)
(declare-fun x141 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x80 () x242)
(declare-fun x28 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x329 () x242)
(declare-fun x293 () x242)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x123 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x131 () x242)
(declare-fun x203 (x242) (_ BitVec 256))
(declare-fun x258 () Bool)
(declare-fun x256 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x316 () (_ BitVec 256))
(declare-fun x160 () x242)
(declare-fun x230 () Bool)
(declare-fun x296 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x68 () x242)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x299 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x78 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x295 () Bool)
(declare-fun x315 () Bool)
(declare-fun x257 () Bool)
(declare-fun x207 () Bool)
(declare-fun x311 () (_ BitVec 256))
(declare-fun x63 ((_ BitVec 256)) Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x233 () x242)
(declare-fun x135 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x132 () x242)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x225 () x242)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x281 () Bool)
(declare-fun x249 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x144 () Bool)
(declare-fun x265 () (_ BitVec 256))
(declare-fun x232 () x242)
(declare-fun x35 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x145 () x242)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x201 () Bool)
(declare-fun x262 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x253 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x263 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x49 () x242)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x58 () Bool)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x275 () x242)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x317 () x242)
(declare-fun x294 () (_ BitVec 256))
(declare-fun x309 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x327 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x210 () Bool)
(declare-fun x331 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x319 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x20 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x306 () x242)
(declare-fun x325 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x44 () Bool)
(declare-fun x133 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x89 () Bool)
(declare-fun x288 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x328 () (_ BitVec 256))
(declare-fun x81 () x242)
(define-fun x94 ((x242 x242) (x41 (_ BitVec 256))) x242 (ite ((_ is x139) x242) (x139 (x61 x242) (bvadd x41 (x310 x242))) (ite ((_ is x149) x242) (x149 (x243 x242) (x150 x242) (x66 x242) (x59 x242) (bvadd (x69 x242) x41)) (ite ((_ is x151) x242) (x151 (x6 x242) (x260 x242) (bvadd (x172 x242) x41)) (x47 (bvadd x41 (x330 x242)))))))
(define-fun x261 ((x102 (_ BitVec 256)) (x120 (_ BitVec 256))) Bool (= (bvudiv (bvmul x102 x120) x120) x102))
(define-fun x200 ((x102 (_ BitVec 256)) (x120 (_ BitVec 256))) Bool (= x102 (bvsdiv (bvmul x120 x102) x120)))
(define-fun x318 ((x102 (_ BitVec 256)) (x120 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x102 x120) x120) x102))
(define-fun x138 ((x304 (_ BitVec 256))) (_ BitVec 256) (x133 x304))
(define-fun x182 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x304) (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256) (x253 x304)))
(define-fun x290 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x304) (_ bv36 256) (x182 x304)))
(define-fun x129 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x304) x181 (x290 x304)))
(define-fun x273 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv232 256) x304) (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256) (x129 x304)))
(define-fun x55 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= x304 (_ bv196 256)) (_ bv36 256) (x273 x304)))
(define-fun x186 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv228 256) x304) x158 (x55 x304)))
(define-fun x39 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite x298 (x129 x304) (x186 x304)))
(define-fun x183 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= x304 x136) (_ bv0 256) (x39 x304)))
(define-fun x332 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= x262 x304) x54 (x183 x304)))
(define-fun x193 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 x304) x211 (x332 x304)))
(define-fun x291 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite x299 (x253 x304) (ite x123 (x39 x304) (x193 x304))))
(define-fun x174 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= x304 x34) x156 (x291 x304)))
(define-fun x3 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= x187 x304) x229 (x174 x304)))
(define-fun x122 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= x110 x304) x52 (x3 x304)))
(define-fun x91 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= x304 x198) x192 (x122 x304)))
(define-fun x137 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x304 x21) (bvult x304 (bvadd x29 x21))) (x133 (bvadd (bvadd (bvneg x21) x304) x197)) (x91 x304)))
(define-fun x204 ((x304 (_ BitVec 256))) (_ BitVec 256) (ite (= x221 x304) (_ bv0 256) (x137 x304)))
(define-fun x267 ((x90 (_ BitVec 256))) Bool (=> (and (not (= x90 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (not (= x90 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))) (not (= (_ bv388749022 256) x90)) (bvugt x90 (_ bv10000 256)) (not (= (_ bv1315048582 256) x90)) (not (= (_ bv2630751253 256) x90)) (not (= x90 (_ bv18446744073709551615 256))) (not (= (_ bv464684736 256) x90)) (not (= x90 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (= (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256) x90)) (not (= x90 (_ bv292666793 256))) (not (= (_ bv752823349 256) x90)) (not (= (_ bv2544733239 256) x90)) (not (= x90 (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256))) (not (= x90 (_ bv2510660263 256)))) (not ((_ is x47) (x266 x90)))))
(assert (= (x264 (x94 x68 (_ bv2 256))) (bvadd (_ bv2 256) (x264 x68))))
(assert (= x298 (and x251 x35)))
(assert (=> (bvule x316 (_ bv10000 256)) (= (x266 x316) (x47 x316))))
(assert (= (x264 (x94 x191 (_ bv1 256))) (bvadd (_ bv1 256) (x264 x191))))
(assert (=> (bvule x33 (_ bv10000 256)) (= (x47 x33) (x266 x33))))
(assert (= x327 (x264 (x266 x327))))
(assert (x267 (bvlshr x229 (_ bv96 256))))
(assert (= x258 true))
(assert (= x173 (x264 (x266 x173))))
(assert (x267 x219))
(assert (x267 x16))
(assert (x267 x269))
(assert (= (_ bv464684736 256) (x264 (x47 (_ bv464684736 256)))))
(assert (= (x264 (x94 x49 (_ bv1 256))) (bvadd (x264 x49) (_ bv1 256))))
(assert (x267 x265))
(assert (= (x264 (x266 x269)) x269))
(assert (=> (bvuge (_ bv10000 256) x156) (= (x266 x156) (x47 x156))))
(assert (= (bvadd (_ bv1 256) (x264 x125)) (x264 (x94 x125 (_ bv1 256)))))
(assert (= (x264 (x266 x104)) x104))
(assert (= x33 (x264 (x266 x33))))
(assert (=> (bvuge (_ bv10000 256) x280) (= (x47 x280) (x266 x280))))
(assert (= (=> (and (and (bvult x113 (_ bv2630751253 256)) (not (= x96 x265)) (= false x268) (= x86 (bvugt (x277 (x266 x8)) (_ bv0 256))) (= (bvugt (x277 (x266 x265)) (_ bv0 256)) x215) (= false x154) (bvule (_ bv0 256) x300) (bvuge x114 (_ bv0 256)) (= (bvult (_ bv0 256) (x277 (x266 x96))) x331) (= x114 (x166 (x266 x265))) (= (x203 x48) x37) (bvuge x108 (_ bv0 256)) (bvult (_ bv0 256) x96) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x121) (= (x94 x112 (_ bv1 256)) x48) (= x328 x255) (= x27 false) (not (= x8 x265)) (not (= x8 x96)) (= (_ bv4 256) x241) (= x116 (x151 (x266 x121) (x47 (_ bv1 256)) (_ bv0 256))) (= (x166 (x266 x8)) x300) (not (bvult x113 (_ bv2510660263 256))) (bvule (_ bv0 256) x37) (bvule x96 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x37) (= (_ bv388749022 256) x301) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x255) x215 (= (_ bv2544733239 256) x113) (not (= (_ bv2510660263 256) x113)) (bvugt x8 (_ bv0 256)) (bvuge x153 (_ bv0 256)) (= x312 false) (bvugt x265 (_ bv0 256)) (= x167 x162) (= x153 x222) (bvule x311 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x121 x294) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x153) (bvult (_ bv0 256) x190) (bvule (_ bv0 256) x311) (bvuge x294 (_ bv0 256)) x331 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x265) (= x4 x37) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x294) (bvule (_ bv0 256) x255) (= x108 (x166 (x266 x96))) (= (x277 (x266 x265)) x190) (bvule x8 (_ bv1461501637330902918203684832716283019655932542975 256)) x86 (= x112 (x151 (x266 x162) x116 (_ bv0 256)))) (and (and (= x225 (x151 (x266 x189) (x47 (_ bv1 256)) (_ bv0 256))) (= x57 x167) (= x223 x2) (not (= (_ bv388749022 256) x99)) (not (= x99 (_ bv292666793 256))) (= x87 x4) (= (x94 x216 (_ bv2 256)) x317) (not (= x99 (_ bv464684736 256))) (bvule x2 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvugt (_ bv2510660263 256) x99) (= x216 (x151 (x266 x57) x225 (_ bv0 256))) (not (= x99 (_ bv752823349 256))) (= (x320 x317) x2) (bvule x189 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvugt x93 (_ bv0 256)) (= (_ bv1315048582 256) x99) (bvule (_ bv0 256) x2) (= x93 (x277 (x266 x265))) (= x294 x189)) (and (and (and (not (= (_ bv2510660263 256) x285)) (= (x94 x125 (_ bv1 256)) x12) (bvugt x115 (_ bv0 256)) (= x248 x309) (bvule (_ bv0 256) x248) (= x248 (x203 x12)) (= x167 x17) (= x285 (_ bv2544733239 256)) (= (_ bv0 256) x30) (= x23 x117) (bvugt (_ bv2630751253 256) x285) (= x79 x294) (not (bvult x285 (_ bv2510660263 256))) (= (= (_ bv0 256) x23) x322) (= (x277 (x266 x265)) x115) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x248) (= (x151 (x266 x79) (x47 (_ bv1 256)) (_ bv0 256)) x14) (= (x151 (x266 x17) x14 (_ bv0 256)) x125) (bvule x79 (_ bv1461501637330902918203684832716283019655932542975 256))) (and (and (= x308 x309) (bvule (_ bv0 256) x28) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x244) (not (= (_ bv464684736 256) x82)) (= (x277 (x266 x265)) x175) (bvugt x175 (_ bv0 256)) (= x161 (_ bv0 256)) (= x124 x167) (= x294 x244) (= x82 (_ bv1315048582 256)) (= (x151 (x266 x244) (x47 (_ bv1 256)) (_ bv0 256)) x275) (bvugt (_ bv2510660263 256) x82) (= x180 (x94 x68 (_ bv2 256))) (= x271 (and x322 x254)) (= x254 (= x308 (_ bv0 256))) (not (= (_ bv752823349 256) x82)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x28) (not (= (_ bv292666793 256) x82)) (not (= x82 (_ bv388749022 256))) (= (x320 x180) x28) (= x28 x53) (= x68 (x151 (x266 x124) x275 (_ bv0 256)))) (and (= (_ bv0 256) x50) (= x53 x88) (= (x133 x22) x192) (= (bvmul x192 (_ bv32 256)) x319) (= x146 x46) (= (bvadd x319 x197) x178) (not (bvult x250 (_ bv4 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x218) (= x85 x326) (not (bvugt x192 (_ bv18446744073709551615 256))) (= (or x325 x263) x157) (bvuge x218 (_ bv0 256)) (bvuge x159 (_ bv0 256)) (= x218 x222) (not (= (_ bv292666793 256) x195)) (= x206 x280) (= x185 (_ bv0 256)) (= x73 (x194 x19)) (= x56 x234) (bvugt x100 (_ bv0 256)) (= x118 (bvugt x73 (_ bv0 256))) (= x146 x188) (bvule (_ bv0 256) x85) (= x284 x302) (not (bvugt x178 x250)) (= x184 (bvadd (_ bv31 256) x22)) (not (bvsgt (_ bv128 256) x60)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x280) (bvslt (_ bv131 256) x250) (not (bvult (_ bv18446744073709551615 256) x234)) (= x22 (bvadd x56 (_ bv4 256))) (= x70 x185) (bvult x195 (_ bv2510660263 256)) (bvsgt x250 x184) (= (_ bv388749022 256) x195) (= (= x88 (_ bv0 256)) x24) (= (x277 (x266 x265)) x100) (not (= x179 (_ bv2 256))) (= x199 x156) (bvule x85 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x283 x280) (bvuge x73 (_ bv0 256)) x157 (bvuge (_ bv255 256) x73) (= (bvadd x22 (_ bv32 256)) x197) (bvuge x179 (_ bv0 256)) (= x263 (and x271 x24)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x179) (= x326 x279) (bvule x159 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x151 (x266 x280) (x47 (_ bv4 256)) (_ bv0 256)) x19) (bvugt (_ bv256 256) x73) (= (bvadd x250 (bvneg (_ bv4 256))) x60)))) (and (bvule x33 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x214 (x226 x142)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x214) (= x167 x316) (= x296 (_ bv2510660263 256)) (= (x277 (x266 x265)) x324) (bvugt (_ bv2630751253 256) x296) (= (x151 (x266 x33) (x47 (_ bv1 256)) (_ bv0 256)) x11) (= x117 x214) (bvult (_ bv0 256) x324) (bvuge x214 (_ bv0 256)) (= (x151 (x266 x316) x11 (_ bv0 256)) x142) (= x325 (bvult x87 x297)) (not (bvult x296 (_ bv2510660263 256))) (= x33 x294) (= x297 x223))))) (and (=> (and (not x118) (and (and (= (= (_ bv0 256) x152) x35) (= x15 (x290 (_ bv160 256))) (= (x63 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256)) x135) (= (ite (bvult (_ bv0 256) (ite x135 (_ bv1 256) (_ bv0 256))) (_ bv1 256) (_ bv0 256)) x152) (= (bvand x15 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) x71) (= (bvadd (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256) x71) x181)) (or (and (and (= x323 x152) (= x262 (_ bv196 256))) x35) (and (not x35) (and (= (ite x210 (_ bv1 256) (_ bv0 256)) x323) (= (= x111 (_ bv0 256)) x210) (= false x126) (= x289 (x55 (_ bv228 256))) (= x158 (bvadd (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256) x169)) (= x169 (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x289)) (= (_ bv264 256) x262) (= (_ bv1 256) x305) (= (x63 (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256)) x315) (= x111 (ite x126 x305 (ite (bvult (_ bv0 256) x227) (_ bv1 256) (_ bv0 256)))) (= x227 (ite x315 (_ bv1 256) (_ bv0 256)))))))) x45) (=> (and (= x110 (_ bv128 256)) x118) x207))) x239))
(assert (= x162 (x264 (x266 x162))))
(assert (= x265 (x264 (x266 x265))))
(assert (=> (bvuge (_ bv10000 256) x244) (= (x47 x244) (x266 x244))))
(assert (= (x264 (x266 x156)) x156))
(assert (= (x264 (x266 x321)) x321))
(assert (= x44 (and (not x231) x281)))
(assert (= x144 (=> (and (and (and (= (x277 (x266 x265)) x249) (not (= x247 (_ bv292666793 256))) (not (= x247 (_ bv752823349 256))) (bvule (_ bv0 256) x130) (= x321 x167) (= x130 x106) (= x314 x43) (= x10 (x94 x329 (_ bv2 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x97) (not (= (_ bv388749022 256) x247)) (= x294 x97) (bvule x130 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvugt x249 (_ bv0 256)) (not (= x247 (_ bv464684736 256))) (= x240 (x151 (x266 x97) (x47 (_ bv1 256)) (_ bv0 256))) (= x247 (_ bv1315048582 256)) (= x130 (x320 x10)) (= x329 (x151 (x266 x321) x240 (_ bv0 256))) (bvult x247 (_ bv2510660263 256))) (and (and (= x155 x177) (not (bvult x141 (_ bv2510660263 256))) (= x274 (bvult x43 x196)) (= (_ bv2510660263 256) x141) (= (x151 (x266 x219) x72 (_ bv0 256)) x233) (= x106 x196) (= x7 (x277 (x266 x265))) (= x219 x167) (= (x226 x233) x177) (bvult x141 (_ bv2630751253 256)) (= x67 x294) (bvuge x177 (_ bv0 256)) (bvugt x7 (_ bv0 256)) (bvule x177 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x67) (= (x151 (x266 x67) (x47 (_ bv1 256)) (_ bv0 256)) x72)) (and (and (= (x277 (x266 x265)) x208) (bvugt (_ bv2630751253 256) x101) (= x167 x105) (= (x151 (x266 x18) (x47 (_ bv1 256)) (_ bv0 256)) x109) (= x224 (_ bv0 256)) (= x134 x165) (not (= (_ bv2510660263 256) x101)) (= x160 (x94 x49 (_ bv1 256))) (= (x203 x160) x165) (= x18 x294) (bvule x18 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvult (_ bv0 256) x208) (bvule x165 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x165) (= x9 x155) (not (bvugt (_ bv2510660263 256) x101)) (= (x151 (x266 x105) x109 (_ bv0 256)) x49) (= x128 (= (_ bv0 256) x9)) (= x101 (_ bv2544733239 256))) (and (and (= (= (_ bv0 256) x77) x127) (bvugt x256 (_ bv0 256)) (= x16 x167) (= x327 x294) (= x25 (x320 x236)) (not (= (_ bv388749022 256) x92)) (not (= x92 (_ bv752823349 256))) (= x220 x25) (= x134 x77) (bvule x25 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (_ bv1315048582 256) x92) (not (= x92 (_ bv464684736 256))) (bvugt (_ bv2510660263 256) x92) (= x147 (and x128 x127)) (bvuge x25 (_ bv0 256)) (= (x277 (x266 x265)) x256) (= x236 (x94 x306 (_ bv2 256))) (bvule x327 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= (_ bv292666793 256) x92)) (= (x151 (x266 x16) x143 (_ bv0 256)) x306) (= x65 (_ bv0 256)) (= (x151 (x266 x327) (x47 (_ bv1 256)) (_ bv0 256)) x143)) (and (= (or x288 x274) x51) (= (and x287 x147) x288) (= x5 x220) (= (= x5 (_ bv0 256)) x287) (= x26 (_ bv0 256))))))) (and (= x119 (x238 x140)) (= x282 (x266 x64)) (not (= x205 (_ bv2510660263 256))) (bvuge x119 (_ bv0 256)) (= x104 x167) (= (x151 (x266 x252) (x47 (_ bv1 256)) (_ bv0 256)) x80) (= x235 (bvshl (_ bv1 256) x202)) (not (bvult x205 (_ bv2510660263 256))) (= (x151 (x266 x104) x80 (_ bv0 256)) x148) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x252) (= (bvlshr x156 (_ bv8 256)) x286) (= x292 (x277 (x266 x265))) (= x294 x252) (= x303 x314) (bvult (_ bv0 256) x292) (= (bvor x119 x235) x163) (bvuge x303 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x119) (= x303 (x203 x293)) (bvule x303 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvand x156 (_ bv255 256)) x202) (bvult x205 (_ bv2630751253 256)) (= x205 (_ bv2544733239 256)) (= x293 (x94 x148 (_ bv1 256))) (= (x151 (x266 x286) x81 (_ bv0 256)) x140))) x51)))
(assert (x267 x97))
(assert (=> (bvuge (_ bv10000 256) x265) (= (x266 x265) (x47 x265))))
(assert (x267 x146))
(assert (x267 x104))
(assert (= (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256) (x264 (x47 (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256)))))
(assert (= x17 (x264 (x266 x17))))
(assert (= (_ bv2544733239 256) (x264 (x47 (_ bv2544733239 256)))))
(assert (= (x264 (x266 x64)) x64))
(assert (= (bvadd (x264 x329) (_ bv2 256)) (x264 (x94 x329 (_ bv2 256)))))
(assert (= (x266 (_ bv752823349 256)) (x47 (_ bv752823349 256))))
(assert (= x252 (x264 (x266 x252))))
(assert (= (x266 (_ bv18446744073709551615 256)) (x47 (_ bv18446744073709551615 256))))
(assert (x267 x321))
(assert (= (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) (x264 (x47 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))))
(assert (=> (bvule x8 (_ bv10000 256)) (= (x266 x8) (x47 x8))))
(assert (x267 x67))
(assert (=> (bvuge (_ bv10000 256) x146) (= (x47 x146) (x266 x146))))
(assert (=> (bvuge (_ bv10000 256) x64) (= (x266 x64) (x47 x64))))
(assert (= (x264 (x266 x42)) x42))
(assert (= (_ bv1461501637330902918203684832716283019655932542975 256) (x264 (x47 (_ bv1461501637330902918203684832716283019655932542975 256)))))
(assert (x267 x316))
(assert (= (x264 (x266 x286)) x286))
(assert (=> (bvuge (_ bv10000 256) x173) (= (x266 x173) (x47 x173))))
(assert (= (x266 (_ bv2544733239 256)) (x47 (_ bv2544733239 256))))
(assert (= (_ bv2510660263 256) (x264 (x47 (_ bv2510660263 256)))))
(assert (= (x264 (x266 x79)) x79))
(assert (= x201 (or x168 x76)))
(assert (= (_ bv388749022 256) (x264 (x47 (_ bv388749022 256)))))
(assert (= (and x258 x118) x299))
(assert (= (x47 (_ bv2630751253 256)) (x266 (_ bv2630751253 256))))
(assert (= (bvlshr x229 (_ bv96 256)) (x264 (x266 (bvlshr x229 (_ bv96 256))))))
(assert (= x67 (x264 (x266 x67))))
(assert (=> (bvule x162 (_ bv10000 256)) (= (x47 x162) (x266 x162))))
(assert (= x251 (and x258 (not x118))))
(assert (= (x264 (x47 (_ bv2630751253 256))) (_ bv2630751253 256)))
(assert (=> (bvule (bvlshr x229 (_ bv96 256)) (_ bv10000 256)) (= (x47 (bvlshr x229 (_ bv96 256))) (x266 (bvlshr x229 (_ bv96 256))))))
(assert (= (x264 (x94 x148 (_ bv1 256))) (bvadd (x264 x148) (_ bv1 256))))
(assert (= x89 (and x78 (not x36))))
(assert (= (x264 (x266 x146)) x146))
(assert (= x230 (=> (and (bvugt x103 (_ bv0 256)) (= x32 x110)) x207)))
(assert (=> (bvule x104 (_ bv10000 256)) (= (x266 x104) (x47 x104))))
(assert (= (_ bv292666793 256) (x264 (x47 (_ bv292666793 256)))))
(assert (= (x266 (x264 x145)) x145))
(assert (= (bvadd (x264 x245) (_ bv1 256)) (x264 (x94 x245 (_ bv1 256)))))
(assert (=> (bvule x16 (_ bv10000 256)) (= (x47 x16) (x266 x16))))
(assert (=> (bvuge (_ bv10000 256) x18) (= (x266 x18) (x47 x18))))
(assert (x267 x64))
(assert (= (x266 (_ bv292666793 256)) (x47 (_ bv292666793 256))))
(assert (=> (bvuge (_ bv10000 256) x321) (= (x266 x321) (x47 x321))))
(assert (x267 x33))
(assert (= (x253 (_ bv160 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x121) (= (x47 x121) (x266 x121))))
(assert (= (x266 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) (x47 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))))
(assert (x267 x42))
(assert (= (=> (and (= x246 (x151 (x266 x42) (x47 (_ bv1 256)) (_ bv0 256))) (bvule x276 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x64) (= (x226 x191) x64) (not x295) (= (bvadd x98 (bvneg (_ bv32 256))) x52) (bvule x237 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x320 x38) x1) (= (bvadd x34 (_ bv32 256)) x187) (= x232 (x151 (x266 x173) x81 (_ bv0 256))) (= x42 (bvand x280 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (x94 x245 (_ bv1 256)) x38) (= (x94 x191 (_ bv1 256)) x245) (= (bvadd (_ bv32 256) x110) x34) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x64) (= (x238 x232) x237) (= (bvlshr x156 (_ bv8 256)) x173) (= x81 (x94 x191 (_ bv3 256))) (= x36 (bvugt x84 (_ bv0 256))) (= x95 (bvand x237 x164)) (= x145 (x149 (x47 (_ bv52 256)) (x47 (_ bv32 256)) (x266 x156) (x266 (bvlshr x229 (_ bv96 256))) (_ bv0 256))) (bvule (_ bv0 256) x276) (= (bvshl (_ bv1 256) x313) x164) x62 (not (bvugt x302 x1)) (= (bvult x302 x276) x295) (= (= (_ bv0 256) x95) x62) (= x98 (bvadd (bvneg x110) x198)) (bvult (_ bv0 256) x31) (= (bvmul (_ bv32 256) x192) x29) (= (x226 x191) x31) (bvuge x237 (_ bv0 256)) (= (bvadd x29 x21) x221) (bvuge x1 (_ bv0 256)) (= x84 (x204 x198)) (= (bvand x156 (_ bv255 256)) x313) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x31) (bvule x1 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvadd x198 (_ bv32 256)) x21) (= (x151 (x266 x146) x246 (_ bv0 256)) x191) (= x198 (bvadd x187 (_ bv20 256))) (= (bvshl x222 (_ bv96 256)) x229) (bvule (_ bv0 256) x31) (= x276 (x203 x245))) (and (=> (and x36 (and (and (bvult (_ bv0 256) x209) (= x75 (bvult (x264 x145) x269)) (= x209 (x204 x198)) (= x278 (bvadd x198 (_ bv32 256))) (= x269 (x204 x278))) (or (and x75 (and (= x131 x132) (= (x151 x145 (x266 x269) (_ bv0 256)) x131))) (and (not x75) (and (= (x151 (x266 x269) x145 (_ bv0 256)) x171) (= x132 x171)))))) x270) (=> (and (= x282 x145) (not x36)) x144))) x207))
(assert (= (x264 (x266 x8)) x8))
(assert (= x121 (x264 (x266 x121))))
(assert (= (x264 (x47 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256))) (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256)))
(assert (x267 x17))
(assert (x267 x8))
(assert (= x96 (x264 (x266 x96))))
(assert (= (x264 (x94 x112 (_ bv1 256))) (bvadd (x264 x112) (_ bv1 256))))
(assert (= (x266 (_ bv464684736 256)) (x47 (_ bv464684736 256))))
(assert (= (x266 (_ bv2510660263 256)) (x47 (_ bv2510660263 256))))
(assert (=> (bvule x252 (_ bv10000 256)) (= (x266 x252) (x47 x252))))
(assert (= (x266 (_ bv388749022 256)) (x47 (_ bv388749022 256))))
(assert (= (x264 (x47 (_ bv18446744073709551615 256))) (_ bv18446744073709551615 256)))
(assert (= (x266 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x47 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (and (not x75) x74) x76))
(assert (= (and x251 (not x35)) x20))
(assert (=> (bvuge (_ bv10000 256) x67) (= (x47 x67) (x266 x67))))
(assert (= x316 (x264 (x266 x316))))
(assert (= (x253 (_ bv228 256)) (_ bv0 256)))
(assert (x267 x327))
(assert (x267 x156))
(assert (= (x47 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256)) (x266 (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256))))
(assert (x267 x162))
(assert (x267 x173))
(assert (= (x264 (x266 x57)) x57))
(assert (=> (bvule x269 (_ bv10000 256)) (= (x266 x269) (x47 x269))))
(assert (x267 x244))
(assert (x267 x57))
(assert (=> (bvuge (_ bv10000 256) x327) (= (x47 x327) (x266 x327))))
(assert (= (x264 (x47 (_ bv752823349 256))) (_ bv752823349 256)))
(assert (= x123 (and x281 x231)))
(assert (=> (bvule x57 (_ bv10000 256)) (= (x266 x57) (x47 x57))))
(assert (x267 x105))
(assert (x267 x286))
(assert (x267 x79))
(assert (= x97 (x264 (x266 x97))))
(assert (= x45 (=> (and (or (and (and (= x262 x32) (= x323 x103)) x231) (and (and (= x259 (bvadd (_ bv32 256) x136)) (= x54 (bvadd x228 (bvneg (_ bv32 256)))) (= x212 false) (= x13 (bvadd (_ bv32 256) x262)) (= x272 (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x40)) (= x211 (bvadd (_ bv904250603428552709895185118199468575982109441609966099573332780532423983104 256) x272)) (= (ite x307 (_ bv1 256) (_ bv0 256)) x217) (= (x63 (_ bv0 256)) x307) (= (x332 x13) x40) (= x259 x32) (= x136 (bvadd (_ bv36 256) x262)) (= x228 (bvadd x259 (bvneg x262))) (= (_ bv1 256) x107) (= x103 (ite x212 x107 (ite (bvugt x217 (_ bv0 256)) (_ bv1 256) (_ bv0 256))))) (not x231))) (= x231 (= (_ bv0 256) x323))) x230)))
(assert (= (_ bv0 256) (x253 x13)))
(assert (=> (bvule x219 (_ bv10000 256)) (= (x47 x219) (x266 x219))))
(assert (= x105 (x264 (x266 x105))))
(assert (= (_ bv0 256) (x253 x278)))
(assert (not x239))
(assert (x267 x252))
(assert (= (and x36 x78) x74))
(assert (= (x264 (x94 x191 (_ bv3 256))) (bvadd (x264 x191) (_ bv3 256))))
(assert (= (x264 (x94 x306 (_ bv2 256))) (bvadd (_ bv2 256) (x264 x306))))
(assert (=> (bvuge (_ bv10000 256) x286) (= (x47 x286) (x266 x286))))
(assert (= (x264 (x266 x280)) x280))
(assert (= (x47 (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256)) (x266 (_ bv115792089210356248756420345214020892766250353992003419616917011526809519390720 256))))
(assert (=> (bvuge (_ bv10000 256) x97) (= (x47 x97) (x266 x97))))
(assert (=> (bvule x189 (_ bv10000 256)) (= (x266 x189) (x47 x189))))
(assert (=> (bvule x105 (_ bv10000 256)) (= (x47 x105) (x266 x105))))
(assert (x267 x189))
(assert (= (=> (and (= x83 (x204 x198)) (= x58 (not (bvugt x83 (_ bv1 256))))) (and (=> (= x282 x132) x144) x58)) x270))
(assert (=> (bvule x79 (_ bv10000 256)) (= (x47 x79) (x266 x79))))
(assert (= x281 (or x20 x298)))
(assert (= (x264 (x94 x216 (_ bv2 256))) (bvadd (_ bv2 256) (x264 x216))))
(assert (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (x264 (x47 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))))
(assert (=> (bvuge (_ bv10000 256) x124) (= (x47 x124) (x266 x124))))
(assert (= x189 (x264 (x266 x189))))
(assert (= x18 (x264 (x266 x18))))
(assert (x267 x18))
(assert (=> (bvule x17 (_ bv10000 256)) (= (x47 x17) (x266 x17))))
(assert (= x244 (x264 (x266 x244))))
(assert (=> (bvule x42 (_ bv10000 256)) (= (x47 x42) (x266 x42))))
(assert (x267 x124))
(assert (x267 x280))
(assert (= (and x75 x74) x168))
(assert (= (or x213 x299) x78))
(assert (= x219 (x264 (x266 x219))))
(assert (x267 x121))
(assert (=> (bvuge (_ bv10000 256) x96) (= (x47 x96) (x266 x96))))
(assert (= x124 (x264 (x266 x124))))
(assert (= (or x44 x123) x213))
(assert (= (_ bv1315048582 256) (x264 (x47 (_ bv1315048582 256)))))
(assert (= (or x201 x89) x257))
(assert (x267 x96))
(assert (= (x47 (_ bv1461501637330902918203684832716283019655932542975 256)) (x266 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (x47 (_ bv1315048582 256)) (x266 (_ bv1315048582 256))))
(assert (= (x264 (x266 x16)) x16))
(check-sat)
(exit)