(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x31 0)) (((x119 (x96 x31) (x20 x31) (x30 (_ BitVec 256))) (x5 (x67 x31) (x73 (_ BitVec 256))) (x27 (x22 (_ BitVec 256))))))
(declare-fun x14 () Bool)
(declare-fun x84 () Bool)
(declare-fun x72 () Bool)
(declare-fun x57 () Bool)
(declare-fun x62 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x110 () Bool)
(declare-fun x146 () Bool)
(declare-fun x112 () Bool)
(declare-fun x106 ((_ BitVec 256)) x31)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x123 (x31) (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x93 () Bool)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x18 () Bool)
(declare-fun x131 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x108 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x90 () Bool)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x134 (x31) (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x78 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x17 (x31) (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x89 () Bool)
(declare-fun x44 () Bool)
(declare-fun x129 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x49 () Bool)
(declare-fun x142 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x71 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x143 () Bool)
(declare-fun x3 () (_ BitVec 256))
(declare-fun x66 () Bool)
(declare-fun x100 () Bool)
(declare-fun x47 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x48 () x31)
(declare-fun x56 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x76 (x31) (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x148 () Bool)
(declare-fun x37 () Bool)
(declare-fun x16 () Bool)
(declare-fun x135 () Bool)
(declare-fun x2 () Bool)
(declare-fun x42 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x105 () (_ BitVec 256))
(declare-fun x111 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x50 () Bool)
(declare-fun x65 () x31)
(declare-fun x154 () Bool)
(declare-fun x74 () Bool)
(declare-fun x60 () Bool)
(declare-fun x147 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x139 () Bool)
(declare-fun x86 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x64 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x13 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(define-fun x11 ((x31 x31) (x118 (_ BitVec 256))) x31 (ite ((_ is x119) x31) (x119 (x96 x31) (x20 x31) (bvadd x118 (x30 x31))) (ite ((_ is x5) x31) (x5 (x67 x31) (bvadd x118 (x73 x31))) (x27 (bvadd (x22 x31) x118)))))
(define-fun x10 ((x102 (_ BitVec 256)) (x45 (_ BitVec 256))) Bool (= (bvudiv (bvmul x45 x102) x45) x102))
(define-fun x145 ((x102 (_ BitVec 256)) (x45 (_ BitVec 256))) Bool (= x102 (bvsdiv (bvmul x102 x45) x45)))
(define-fun x61 ((x102 (_ BitVec 256)) (x45 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x45 x102) x45) x102))
(define-fun x103 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= x63 (_ bv128 256)) x35 (x56 x63)))
(define-fun x40 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= x63 (_ bv160 256)) x23 (x71 x63)))
(define-fun x82 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x63) x88 (x71 x63)))
(define-fun x126 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= x63 (_ bv192 256)) x59 (x40 x63)))
(define-fun x52 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite x57 (x71 x63) (ite x108 (ite x60 (x40 x63) (x126 x63)) (x82 x63))))
(define-fun x38 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= x63 x125) (_ bv32 256) (x111 x63)))
(define-fun x150 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= x63 x122) x101 (x38 x63)))
(define-fun x136 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= x80 x63) x98 (x150 x63)))
(define-fun x43 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= x1 x63) x69 (x136 x63)))
(define-fun x81 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= x63 x144) x147 (x43 x63)))
(define-fun x141 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= x63 x91) x68 (x81 x63)))
(define-fun x85 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite x18 (x81 x63) (ite x14 (x43 x63) (ite x148 (x136 x63) (ite x139 (x150 x63) (x141 x63))))))
(define-fun x130 ((x63 (_ BitVec 256))) (_ BitVec 256) (ite (= x63 x105) (_ bv0 256) (x85 x63)))
(define-fun x153 ((x140 (_ BitVec 256))) Bool (=> (and (not (= (_ bv157198259 256) x140)) (not (= x140 (_ bv2514000705 256))) (not (= x140 (_ bv3337024914 256))) (not (= (_ bv2495578189 256) x140)) (not (= (_ bv1461501637330902918203684832716283019655932542975 256) x140)) (not (= x140 (_ bv2376452955 256))) (not (= (_ bv117300739 256) x140)) (not (= (_ bv826074471 256) x140)) (bvugt x140 (_ bv10000 256)) (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x140)) (not (= (_ bv404098525 256) x140)) (not (= (_ bv3017275065 256) x140))) (not ((_ is x27) (x106 x140)))))
(assert (= (and x50 x154) x57))
(assert (= (_ bv2495578189 256) (x76 (x27 (_ bv2495578189 256)))))
(assert (= x15 (=> (and (= (x52 (_ bv256 256)) x68) (= x91 (bvadd (_ bv96 256) x80)) (= x19 (not (bvugt x101 (_ bv128 256))))) (and x19 (=> (= (_ bv128 256) x24) x112)))))
(assert (= x37 (and x135 x133)))
(assert (=> (bvule x77 (_ bv10000 256)) (= (x106 x77) (x27 x77))))
(assert (= (x76 (x27 (_ bv2514000705 256))) (_ bv2514000705 256)))
(assert (= (x27 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x106 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (=> (and (= (x123 x48) x59) (= (not (bvult (_ bv224 256) x113)) x100)) (and x100 x131)) x54))
(assert (= x64 (or x128 x146)))
(assert (= (x71 (_ bv256 256)) (_ bv0 256)))
(assert (= (x71 (_ bv224 256)) (_ bv0 256)))
(assert (= (x27 (_ bv157198259 256)) (x106 (_ bv157198259 256))))
(assert (= x142 (and x90 x44)))
(assert (= (and x142 x89) x74))
(assert (= x14 (and x37 (not x49))))
(assert (= (_ bv117300739 256) (x76 (x27 (_ bv117300739 256)))))
(assert (= (_ bv2376452955 256) (x76 (x27 (_ bv2376452955 256)))))
(assert (= x16 (or x139 x148 x18 x2 x14)))
(assert (= (x76 (x27 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x9 (=> (and (and (= x6 true) (bvugt (_ bv826074471 256) x117) (bvult (_ bv0 256) x87) (= x41 x99) (bvule (_ bv0 256) x95) (= (_ bv0 256) x109) (= (x17 (x106 x87)) x97) (= x129 x70) (bvule x95 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x34 false) (= (bvult (_ bv0 256) (x17 (x106 x77))) x143) (bvult (_ bv0 256) x97) x143 (bvule x114 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x134 (x106 x77)) x127) (= (_ bv0 256) x104) (= false x42) (bvule x114 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x33 (_ bv0 256)) (= x117 (_ bv404098525 256)) (bvule x77 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x114 (_ bv0 256)) (bvule (_ bv0 256) x41) (bvule (_ bv0 256) x114) (bvuge x62 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x70) (bvule x41 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x33 (_ bv1461501637330902918203684832716283019655932542975 256)) x72 (bvuge x70 (_ bv0 256)) (bvult (_ bv0 256) x77) (not (= (_ bv117300739 256) x117)) (= x152 (_ bv2514000705 256)) (= x72 (bvult (_ bv0 256) (x17 (x106 x87)))) (bvuge x47 (_ bv0 256)) (not (= (_ bv157198259 256) x117)) (bvule x87 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x134 (x106 x87)) x47) (not (= x87 x77)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x62) (= false x93) (bvuge x127 (_ bv0 256))) (and (bvuge x4 (_ bv0 256)) (= x79 (bvudiv x116 (_ bv32 256))) (= x4 x129) (bvult (_ bv0 256) x107) (bvsgt x138 (_ bv3 256)) (not (bvugt (_ bv4 256) x138)) (= x35 (ite (bvult (_ bv0 256) x86) x137 (bvand (_ bv127 256) x137))) (bvule x25 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x99 x7) (not (bvugt (_ bv2376452955 256) x83)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x4) (= (x17 (x106 x77)) x107) (not (= x83 (_ bv2495578189 256))) (= (_ bv2514000705 256) x83) (bvule (_ bv0 256) x114) (bvult x83 (_ bv3017275065 256)) (= (bvadd (_ bv32 256) x32) x46) (not (= x83 (_ bv2376452955 256))) (= x137 (bvudiv x28 (_ bv2 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x114) (= x32 (bvmul (_ bv32 256) x79)) (= (bvadd (_ bv128 256) x46) x125) (not (= x86 x94)) (bvult x83 (_ bv3337024914 256)) (= (bvadd (_ bv31 256) x35) x116) (bvuge x25 (_ bv0 256)) (= x109 (_ bv0 256)) (= (= (_ bv0 256) x35) x154) (= (bvand x28 (_ bv1 256)) x86) (= (ite (bvugt (_ bv32 256) x35) (_ bv1 256) (_ bv0 256)) x94))) (and (=> (and (not x154) (= x90 (bvult (_ bv31 256) x35))) (and (=> (and (and (= x89 (bvugt x113 (_ bv192 256))) (= (bvadd (_ bv160 256) x35) x113) (= (x5 (x27 (_ bv1 256)) (_ bv0 256)) x65) (= (x11 x65 (_ bv1 256)) x48) (= (x123 x65) x23)) x90) (and (=> x89 x54) (=> (not x89) x131))) (=> (and (not x90) (and (= x124 (bvudiv x28 (_ bv256 256))) (= x51 x58) (= x88 (bvmul x124 (_ bv256 256))))) x29))) (=> (and x154 (= x58 x51)) x29)))))
(assert (= (x76 (x27 (_ bv3017275065 256))) (_ bv3017275065 256)))
(assert (= true x50))
(assert (= (and x44 (not x90)) x149))
(assert (= (x27 (_ bv1461501637330902918203684832716283019655932542975 256)) (x106 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (and x115 x84) x135))
(assert (= (x27 (_ bv2514000705 256)) (x106 (_ bv2514000705 256))))
(assert (= (or x57 x149 x108) x115))
(assert (= x112 (=> (and (or (not x121) (and x121 (= (bvadd x101 x80) x105))) (= x121 (bvult x101 x24))) x66)))
(assert (x153 x87))
(assert (= (x106 (_ bv404098525 256)) (x27 (_ bv404098525 256))))
(assert (= x131 (=> (= (_ bv1 256) x51) x29)))
(assert (= x108 (or x60 x74)))
(assert (not x9))
(assert (= (x76 (x27 (_ bv3337024914 256))) (_ bv3337024914 256)))
(assert (= (x27 (_ bv117300739 256)) (x106 (_ bv117300739 256))))
(assert (= (x27 (_ bv3337024914 256)) (x106 (_ bv3337024914 256))))
(assert (= x87 (x76 (x106 x87))))
(assert (= (x71 (_ bv160 256)) (_ bv0 256)))
(assert (= (x76 (x27 (_ bv404098525 256))) (_ bv404098525 256)))
(assert (= (and x8 x110) x2))
(assert (= (x106 (_ bv2495578189 256)) (x27 (_ bv2495578189 256))))
(assert (= (and x142 (not x89)) x60))
(assert (= x66 (=> (and (and (= x41 x53) (= (_ bv404098525 256) x26) (= x151 (ite (= x125 (_ bv0 256)) x51 (ite (= (_ bv32 256) x125) x120 (ite (= x125 (_ bv64 256)) x125 (ite x146 (x85 x125) (x130 x125)))))) (not (= x26 (_ bv157198259 256))) (bvugt x55 (_ bv0 256)) (not (= (_ bv117300739 256) x26)) (bvuge x75 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x41) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x21) (bvugt (_ bv826074471 256) x26) (bvule x75 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (_ bv0 256) x109) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x114) (= x21 x129) (= (x17 (x106 x87)) x55) (bvuge x114 (_ bv0 256)) (bvuge x41 (_ bv0 256)) (bvuge x21 (_ bv0 256))) (and (= x78 (= x3 x12)) (= x7 x3) (= x132 x12) (= x132 x53))) x78)))
(assert (= x8 (and x37 x49)))
(assert (= (x76 (x27 (_ bv1461501637330902918203684832716283019655932542975 256))) (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (and (not x121) x16) x146))
(assert (= (and (not x84) x115) x139))
(assert (= x18 (and x8 (not x110))))
(assert (= (x106 (_ bv826074471 256)) (x27 (_ bv826074471 256))))
(assert (= (x76 (x27 (_ bv826074471 256))) (_ bv826074471 256)))
(assert (= (x27 (_ bv3017275065 256)) (x106 (_ bv3017275065 256))))
(assert (= x128 (and x121 x16)))
(assert (= (=> (and (= x84 (bvult (_ bv0 256) x101)) (= (bvadd x122 (_ bv32 256)) x80) (= x122 (bvadd x125 (_ bv32 256))) (= (x103 (_ bv128 256)) x101)) (and (=> (and x84 (and (= x98 (x52 (_ bv160 256))) (= x133 (bvult (_ bv32 256) x101)))) (and (=> (and (= (_ bv32 256) x24) (not x133)) x112) (=> (and x133 (and (= x1 (bvadd x80 (_ bv32 256))) (= x69 (x52 (_ bv192 256))) (= x49 (bvult (_ bv64 256) x101)))) (and (=> (and (not x49) (= (_ bv64 256) x24)) x112) (=> (and x49 (and (= (x52 (_ bv224 256)) x147) (= (bvadd x80 (_ bv64 256)) x144) (= x110 (bvugt x101 (_ bv96 256))))) (and (=> (and (not x110) (= (_ bv96 256) x24)) x112) (=> x110 x15))))))) (=> (and (= (_ bv0 256) x24) (not x84)) x112))) x29))
(assert (= (and x50 (not x154)) x44))
(assert (= (and (not x133) x135) x148))
(assert (=> (bvuge (_ bv10000 256) x87) (= (x106 x87) (x27 x87))))
(assert (= (x27 (_ bv2376452955 256)) (x106 (_ bv2376452955 256))))
(assert (= (x71 (_ bv192 256)) (_ bv0 256)))
(assert (x153 x77))
(assert (= (_ bv157198259 256) (x76 (x27 (_ bv157198259 256)))))
(assert (= x77 (x76 (x106 x77))))
(assert (= (x76 (x11 x65 (_ bv1 256))) (bvadd (_ bv1 256) (x76 x65))))
(check-sat)
(exit)