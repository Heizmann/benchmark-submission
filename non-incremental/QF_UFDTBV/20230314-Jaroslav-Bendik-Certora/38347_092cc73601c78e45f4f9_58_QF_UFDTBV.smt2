(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x118 0)) (((x263 (x414 x118) (x172 x118) (x240 x118) (x124 x118) (x362 (_ BitVec 256))) (x238 (x433 x118) (x423 (_ BitVec 256))) (x84 (x220 (_ BitVec 256))) (x10 (x277 x118) (x428 x118) (x61 x118) (x368 x118) (x445 x118) (x336 x118) (x80 x118) (x189 (_ BitVec 256))) (x289 (x276 x118) (x437 x118) (x250 x118) (x330 (_ BitVec 256))) (x9 (x145 x118) (x234 x118) (x322 x118) (x311 x118) (x357 x118) (x193 x118) (x282 (_ BitVec 256))) (x150 (x66 x118) (x381 x118) (x331 (_ BitVec 256))) (x199 (x349 x118) (x300 x118) (x245 x118) (x222 x118) (x175 x118) (x301 (_ BitVec 256))))))
(declare-fun x283 () x118)
(declare-fun x177 () Bool)
(declare-fun x257 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x15 () x118)
(declare-fun x217 () x118)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x92 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x89 () Bool)
(declare-fun x448 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x253 ((_ BitVec 256)) x118)
(declare-fun x382 () Bool)
(declare-fun x333 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x3 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x360 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x406 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x375 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x337 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x233 () x118)
(declare-fun x285 () Bool)
(declare-fun x246 () (_ BitVec 256))
(declare-fun x332 (x118) (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x353 () Bool)
(declare-fun x431 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x319 () (_ BitVec 256))
(declare-fun x446 () (_ BitVec 256))
(declare-fun x310 () (_ BitVec 256))
(declare-fun x398 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x400 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x323 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x165 () x118)
(declare-fun x284 () (_ BitVec 256))
(declare-fun x335 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x345 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x429 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x356 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x424 () (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x279 () Bool)
(declare-fun x274 () (_ BitVec 256))
(declare-fun x315 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x334 () (_ BitVec 256))
(declare-fun x402 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x343 () Bool)
(declare-fun x268 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x378 () (_ BitVec 256))
(declare-fun x444 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x373 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x248 () Bool)
(declare-fun x403 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x34 () Bool)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x412 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x321 () (_ BitVec 256))
(declare-fun x385 () Bool)
(declare-fun x158 () (_ BitVec 256))
(declare-fun x386 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x394 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x338 () (_ BitVec 256))
(declare-fun x293 () x118)
(declare-fun x191 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x76 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x127 (x118) (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x339 () (_ BitVec 256))
(declare-fun x397 () (_ BitVec 256))
(declare-fun x309 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x367 () x118)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x266 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x393 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x95 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x201 () Bool)
(declare-fun x203 () (_ BitVec 256))
(declare-fun x326 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x344 () (_ BitVec 256))
(declare-fun x366 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x413 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x404 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x103 () x118)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x113 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x287 () Bool)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x432 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x327 () (_ BitVec 256))
(declare-fun x341 () (_ BitVec 256))
(declare-fun x417 () (_ BitVec 256))
(declare-fun x317 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x415 () (_ BitVec 256))
(declare-fun x363 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x304 () (_ BitVec 256))
(declare-fun x420 () (_ BitVec 256))
(declare-fun x411 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x347 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x271 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x104 () Bool)
(declare-fun x391 () (_ BitVec 256))
(declare-fun x200 () x118)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x324 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x395 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x228 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x419 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x436 () (_ BitVec 256))
(declare-fun x369 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x206 () (_ BitVec 256))
(declare-fun x379 () (_ BitVec 256))
(declare-fun x392 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x408 () (_ BitVec 256))
(declare-fun x148 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x372 () Bool)
(declare-fun x147 () Bool)
(declare-fun x416 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x442 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x435 () x118)
(declare-fun x410 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x387 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x364 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x239 () (_ BitVec 256))
(declare-fun x405 (x118) (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x314 () (_ BitVec 256))
(declare-fun x390 () Bool)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x306 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x354 () (_ BitVec 256))
(declare-fun x384 () Bool)
(declare-fun x54 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x447 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x340 () Bool)
(declare-fun x370 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x438 () (_ BitVec 256))
(declare-fun x425 () (_ BitVec 256))
(declare-fun x329 () (_ BitVec 256))
(declare-fun x350 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x290 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x361 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x409 () x118)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x14 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x307 () (_ BitVec 256))
(declare-fun x359 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x374 () (_ BitVec 256))
(declare-fun x439 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x291 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x91 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x407 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x312 () (_ BitVec 256))
(declare-fun x380 () x118)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x383 () Bool)
(declare-fun x232 (x118) (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x123 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x195 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x320 () (_ BitVec 256))
(declare-fun x355 () (_ BitVec 256))
(declare-fun x426 () (_ BitVec 256))
(declare-fun x401 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x351 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x348 () (_ BitVec 256))
(declare-fun x87 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x365 () (_ BitVec 256))
(declare-fun x422 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x166 () x118)
(declare-fun x75 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x371 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x299 () x118)
(declare-fun x272 () Bool)
(declare-fun x71 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x396 () (_ BitVec 256))
(declare-fun x440 () (_ BitVec 256))
(declare-fun x441 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x418 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x30 () (_ BitVec 256))
(define-fun x325 ((x118 x118) (x389 (_ BitVec 256))) x118 (ite ((_ is x10) x118) (x10 (x277 x118) (x428 x118) (x61 x118) (x368 x118) (x445 x118) (x336 x118) (x80 x118) (bvadd (x189 x118) x389)) (ite ((_ is x9) x118) (x9 (x145 x118) (x234 x118) (x322 x118) (x311 x118) (x357 x118) (x193 x118) (bvadd x389 (x282 x118))) (ite ((_ is x199) x118) (x199 (x349 x118) (x300 x118) (x245 x118) (x222 x118) (x175 x118) (bvadd x389 (x301 x118))) (ite ((_ is x263) x118) (x263 (x414 x118) (x172 x118) (x240 x118) (x124 x118) (bvadd (x362 x118) x389)) (ite ((_ is x289) x118) (x289 (x276 x118) (x437 x118) (x250 x118) (bvadd x389 (x330 x118))) (ite ((_ is x238) x118) (x238 (x433 x118) (bvadd (x423 x118) x389)) (ite ((_ is x150) x118) (x150 (x66 x118) (x381 x118) (bvadd (x331 x118) x389)) (x84 (bvadd (x220 x118) x389))))))))))
(define-fun x376 ((x112 (_ BitVec 256)) (x267 (_ BitVec 256))) Bool (= (bvudiv (bvmul x267 x112) x267) x112))
(define-fun x269 ((x112 (_ BitVec 256)) (x267 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x267 x112) x267) x112))
(define-fun x210 ((x112 (_ BitVec 256)) (x267 (_ BitVec 256))) Bool (= x112 (bvsdiv (bvmul x267 x112) x267)))
(define-fun x358 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x430) x45 (x95 x430)))
(define-fun x377 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv160 256)) x288 (x358 x430)))
(define-fun x313 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv192 256) x430) x365 (x377 x430)))
(define-fun x244 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv224 256)) x280 (x313 x430)))
(define-fun x169 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x430) x216 (x244 x430)))
(define-fun x121 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x430) x275 (x416 x430)))
(define-fun x443 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv160 256)) x97 (x91 x430)))
(define-fun x111 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv192 256)) x417 (x113 x430)))
(define-fun x328 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv224 256)) x31 (x324 x430)))
(define-fun x388 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv256 256)) x241 (x54 x430)))
(define-fun x143 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv288 256)) x345 (x14 x430)))
(define-fun x302 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv512 256)) x136 (x266 x430)))
(define-fun x259 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv544 256) x430) x35 (x302 x430)))
(define-fun x434 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv576 256) x430) x178 (x259 x430)))
(define-fun x256 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv608 256) x430) x116 (x434 x430)))
(define-fun x38 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv640 256) x430) x392 (x256 x430)))
(define-fun x352 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv672 256) x430) x286 (x38 x430)))
(define-fun x421 ((x430 (_ BitVec 256))) (_ BitVec 256) (x429 x430))
(define-fun x22 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x430) x162 (x431 x430)))
(define-fun x308 ((x430 x118)) (_ BitVec 256) (ite (= x430 x367) (x232 x165) (x127 x430)))
(define-fun x8 ((x430 x118)) (_ BitVec 256) (ite x309 (x127 x430) (x308 x430)))
(define-fun x342 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x430) x273 (x3 x430)))
(define-fun x229 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x430) x297 (x342 x430)))
(define-fun x346 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv192 256) x430) x18 (x229 x430)))
(define-fun x204 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 (_ bv224 256)) x274 (x346 x430)))
(define-fun x254 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x430) x110 (x204 x430)))
(define-fun x96 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x430) x42 (x87 x430)))
(define-fun x167 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite x170 (x87 x430) (x96 x430)))
(define-fun x427 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 x430) x12 (x306 x430)))
(define-fun x174 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite x170 (x306 x430) (x427 x430)))
(define-fun x159 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x221 x430) (_ bv32 256) (x76 x430)))
(define-fun x399 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x36 x430) x227 (x159 x430)))
(define-fun x59 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 x48) x396 (x399 x430)))
(define-fun x37 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 x418) x228 (x386 x430)))
(define-fun x296 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite x170 (x386 x430) (x37 x430)))
(define-fun x6 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x258 x430) x155 (x59 x430)))
(define-fun x316 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite x340 (x399 x430) (x6 x430)))
(define-fun x249 ((x430 (_ BitVec 256))) (_ BitVec 256) (ite (= x430 x355) x135 (x398 x430)))
(define-fun x261 ((x43 (_ BitVec 256))) Bool (=> (and (bvugt x43 (_ bv10000 256)) (not (= (_ bv1000000 256) x43)) (not (= x43 (_ bv2652930389 256))) (not (= (_ bv3547226261 256) x43)) (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256) x43)) (not (= x43 (_ bv662108492 256))) (not (= (_ bv1960641893 256) x43)) (not (= x43 (_ bv18446744073709551616 256))) (not (= x43 (_ bv18446744073709551615 256))) (not (= x43 (_ bv2220280665 256))) (not (= (_ bv396482575 256) x43)) (not (= x43 (_ bv4294967295 256))) (not (= x43 (_ bv79228162514264337593543950336 256))) (not (= x43 (_ bv1084754510 256))) (not (= (_ bv4294967296 256) x43)) (not (= (_ bv47171411 256) x43)) (not (= (_ bv3110348530 256) x43)) (not (= (_ bv4534642 256) x43)) (not (= (_ bv3250587425 256) x43)) (not (= (_ bv1749768213 256) x43)) (not (= (_ bv340282366920938463463374607431768211455 256) x43)) (not (= x43 (_ bv1960939212 256))) (not (= x43 (_ bv1461501637330902918203684832716283019655932542975 256)))) (not ((_ is x84) (x253 x43)))))
(assert (=> (bvule (x316 (bvadd (_ bv96 256) x158)) (_ bv10000 256)) (= (x253 (x316 (bvadd (_ bv96 256) x158))) (x84 (x316 (bvadd (_ bv96 256) x158))))))
(assert (= (and x225 (not x27)) x364))
(assert (= x184 (x232 (x253 x184))))
(assert (= (=> (and (= x158 (bvadd x355 (_ bv32 256))) (= x157 x51) (= x135 (bvadd (bvneg (_ bv32 256)) x163)) (= x318 (x249 x355)) (= x163 (bvadd x108 (bvneg x355))) (= (_ bv0 256) x425) (= x425 (bvurem x318 (_ bv32 256))) (= x108 x16) (= (bvadd x265 x403) x16) (= (x249 x355) x46) (= x227 x186) (= (bvmul x227 (_ bv64 256)) x265) (= (bvadd (_ bv160 256) x361) x157) (= (bvmul (_ bv32 256) x227) x361) (= (bvule x46 (_ bv224 256)) x67)) (and x67 (=> (= x165 (ite (bvuge (_ bv32 256) x46) (x238 (x253 (x316 x158)) (_ bv0 256)) (ite (bvule x46 (_ bv64 256)) (x150 (x253 (x316 x158)) (x253 (x316 (bvadd x158 (_ bv32 256)))) (_ bv0 256)) (ite (bvuge (_ bv96 256) x46) (x289 (x253 (x316 x158)) (x253 (x316 (bvadd (_ bv32 256) x158))) (x253 (x316 (bvadd (_ bv64 256) x158))) (_ bv0 256)) (ite (bvule x46 (_ bv128 256)) (x263 (x253 (x316 x158)) (x253 (x316 (bvadd (_ bv32 256) x158))) (x253 (x316 (bvadd x158 (_ bv64 256)))) (x253 (x316 (bvadd x158 (_ bv96 256)))) (_ bv0 256)) (ite (bvule x46 (_ bv160 256)) (x199 (x253 (x316 x158)) (x253 (x316 (bvadd (_ bv32 256) x158))) (x253 (x316 (bvadd (_ bv64 256) x158))) (x253 (x316 (bvadd x158 (_ bv96 256)))) (x253 (x316 (bvadd x158 (_ bv128 256)))) (_ bv0 256)) (ite (bvule x46 (_ bv192 256)) (x9 (x253 (x316 x158)) (x253 (x316 (bvadd x158 (_ bv32 256)))) (x253 (x316 (bvadd (_ bv64 256) x158))) (x253 (x316 (bvadd x158 (_ bv96 256)))) (x253 (x316 (bvadd (_ bv128 256) x158))) (x253 (x316 (bvadd x158 (_ bv160 256)))) (_ bv0 256)) (ite (bvuge (_ bv224 256) x46) (x10 (x253 (x316 x158)) (x253 (x316 (bvadd (_ bv32 256) x158))) (x253 (x316 (bvadd x158 (_ bv64 256)))) (x253 (x316 (bvadd x158 (_ bv96 256)))) (x253 (x316 (bvadd x158 (_ bv128 256)))) (x253 (x316 (bvadd x158 (_ bv160 256)))) (x253 (x316 (bvadd x158 (_ bv192 256)))) (_ bv0 256)) (x253 x79))))))))) x34))) x72))
(assert (= (x84 (_ bv18446744073709551616 256)) (x253 (_ bv18446744073709551616 256))))
(assert (= x34 (=> (and (= x103 x367) (= (x127 x367) x85) (= (= (x253 x85) x165) x107)) (and (=> x107 x126) (=> (and (and (= x247 (x22 (_ bv128 256))) (not (bvult (_ bv200 256) x247)) (= (x22 (_ bv128 256)) x73) (= (bvult (_ bv0 256) x73) x383)) (not x107)) (and (=> (and (not x383) (= x415 (_ bv0 256))) x248) (=> x383 x413)))))))
(assert (= (x84 (_ bv340282366920938463463374607431768211455 256)) (x253 (_ bv340282366920938463463374607431768211455 256))))
(assert (x261 x79))
(assert (x261 (x316 (bvadd (_ bv192 256) x158))))
(assert (= (x232 (x84 (_ bv1749768213 256))) (_ bv1749768213 256)))
(assert (=> (bvule x218 (_ bv10000 256)) (= (x84 x218) (x253 x218))))
(assert (= (bvadd (x232 x217) (_ bv2 256)) (x232 (x325 x217 (_ bv2 256)))))
(assert (= x69 (=> (and (and (and (= (bvadd x181 (_ bv31 256)) x294) (= x279 (not (= x105 x394))) (= x213 (_ bv0 256)) (= x86 x310) (not (bvult x319 x432)) (= x374 x257) (= x295 x81) (bvuge x123 (_ bv0 256)) (= (bvadd (_ bv32 256) x17) x130) (= x350 x60) (= (x332 (x253 x203)) x422) (= x347 (= x77 x137)) (= (bvmul (_ bv64 256) x162) x13) (= x93 x23) (= (or x372 x32) x89) (= (bvadd (bvneg (_ bv4 256)) x319) x21) x74 (= x198 x60) (= x32 (bvult (_ bv18446744073709551615 256) x42)) (= x446 x105) (bvugt (_ bv1749768213 256) x4) (= x181 (bvadd x401 (_ bv32 256))) (= x281 x133) (= x17 (bvadd x207 (_ bv4 256))) (= x125 x23) (bvslt (_ bv67 256) x319) (= x213 x99) (bvule (_ bv0 256) x310) (= x382 (= x198 x1)) (= x94 x440) (= x359 x339) (= x281 x410) (bvugt (_ bv662108492 256) x4) (not (= (_ bv4534642 256) x4)) (= x68 (= x440 x202)) (= x128 x55) x279 (= x446 x77) (= (not (= x93 x98)) x268) x272 (bvugt (_ bv1084754510 256) x4) x382 (= x44 x397) (= (not (= x5 x133)) x326) (= (bvadd x13 x130) x432) (= x401 (bvmul (_ bv32 256) x162)) (not (bvsgt (_ bv64 256) x21)) (= x439 x447) (= x211 x5) (= (bvadd (_ bv31 256) x17) x152) (= (ite x89 (_ bv1 256) (_ bv0 256)) x395) (not (bvult (_ bv18446744073709551615 256) x162)) (bvult (_ bv0 256) x422) (= x114 x7) (= x439 x402) x68 (= x335 x86) (= (bvugt x432 x130) x49) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x123) (= x372 (bvult x42 (_ bv128 256))) (= x369 x1) (= x257 x278) x268 (bvult x4 (_ bv396482575 256)) (= x74 (= x410 x47)) (= (_ bv0 256) x395) (= x162 (x429 x17)) (= x202 x397) (= x47 x339) (= x33 x123) (= (= x278 x114) x231) (= x338 (_ bv128 256)) (= (bvand x294 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)) x356) (= x394 x211) (not (bvult x319 (_ bv4 256))) (= x137 x295) x231 (not (bvult (_ bv18446744073709551615 256) x207)) x347 x326 (= x98 x211) (bvule x310 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x366 x55) (bvslt x152 x319) (= (bvadd x356 (_ bv128 256)) x42) (= x272 (= x128 x125)) (bvule (_ bv0 256) x264) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x264) (= x4 (_ bv47171411 256))) (and (not (bvslt x420 (_ bv64 256))) (= x420 (bvadd x319 (bvneg (_ bv132 256)))) (= x136 (x121 (_ bv128 256))) (= (x352 (_ bv576 256)) x81) (= (x143 (_ bv288 256)) x286) (not (bvugt (_ bv1960641893 256) x185)) (= (_ bv0 256) x57) (= x246 (_ bv192 256)) (not (bvugt (_ bv1749768213 256) x185)) (= x99 x57) (= x11 (_ bv128 256)) (= x178 (x111 (_ bv192 256))) (= (x352 (_ bv512 256)) x366) (bvule x242 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= (_ bv1960641893 256) x185)) (= (x332 (x253 x203)) x100) (= x304 x129) (= (x443 (_ bv160 256)) x35) (= x314 (_ bv192 256)) (= x141 x242) (= (x352 (_ bv544 256)) x374) (= (_ bv1960939212 256) x185) (= x329 x378) (= (x352 (_ bv672 256)) x44) (bvult (_ bv0 256) x100) (bvule x149 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x141 x335) (= x373 (bvadd x319 (bvneg (_ bv68 256)))) (not (bvult x319 (_ bv4 256))) (= x196 x33) (bvuge x149 (_ bv0 256)) (bvugt (_ bv2652930389 256) x185) (bvuge x196 (_ bv0 256)) (bvule x196 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (bvsgt (_ bv192 256) x404)) (= (x352 (_ bv608 256)) x350) (bvugt (_ bv2220280665 256) x185) (bvsgt x319 (_ bv195 256)) (= x419 (_ bv256 256)) (bvule (_ bv0 256) x242) (= x404 (bvadd (bvneg (_ bv4 256)) x319)) (not (bvsgt (_ bv64 256) x373)) (= x392 (x388 (_ bv256 256))) (= x116 (x328 (_ bv224 256))) (= x359 (x352 (_ bv640 256))) (= x271 (_ bv256 256)) (= (_ bv128 256) x109))) (and (= x317 x19) (= x307 (x405 (x253 x312))) (= (bvugt (x332 (x253 x327)) (_ bv0 256)) x104) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x122) (bvule x151 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x212 (_ bv0 256)) (= (bvugt (x332 (x253 x203)) (_ bv0 256)) x140) (= x363 (x127 x409)) (= x101 (_ bv47171411 256)) (= (x150 (x253 x208) (x253 x218) (_ bv0 256)) x380) (= (bvand x146 (_ bv4294967295 256)) x216) (= x156 (bvudiv x70 (_ bv4294967296 256))) (bvule x203 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x33 x117) (= (x405 (x253 x327)) x212) (= (x169 (_ bv128 256)) x378) (bvult x153 (_ bv3547226261 256)) (bvule (_ bv0 256) x215) (not (bvult x153 (_ bv2652930389 256))) (bvule (_ bv0 256) x192) (= x217 x299) (= (x127 x409) x70) (= x208 x424) (bvult (_ bv0 256) x219) (= (_ bv3250587425 256) x153) (= x219 (x332 (x253 x203))) (bvuge x291 (_ bv0 256)) (= x195 false) (bvule (_ bv0 256) x40) x177 (= x441 x218) (= (x405 (x253 x203)) x56) (not (bvugt (_ bv3110348530 256) x153)) (= (x150 (x253 x290) x380 (_ bv0 256)) x217) (not (= (_ bv3110348530 256) x153)) (bvult (_ bv0 256) x312) (bvule (_ bv0 256) x284) (not (= x312 x203)) (bvuge x307 (_ bv0 256)) (= x177 (bvult (_ bv0 256) (x332 (x253 x312)))) (bvuge x151 (_ bv0 256)) (bvule x164 (_ bv1461501637330902918203684832716283019655932542975 256)) (= false x148) (bvule x317 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (_ bv0 256) x188) (= (x169 (_ bv160 256)) x129) (= x83 (_ bv2 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x291) (= (bvand x156 (_ bv4294967295 256)) x365) (= x280 (bvand x78 (_ bv340282366920938463463374607431768211455 256))) (bvule x192 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x164 x132) (= x211 x290) (bvuge x387 (_ bv0 256)) (bvule (_ bv0 256) x26) x104 (bvule x284 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x164 (_ bv0 256)) (= (x169 (_ bv192 256)) x180) (bvule (_ bv0 256) x317) (not (bvult x153 (_ bv1749768213 256))) (bvule (_ bv0 256) x411) (= false x448) (not (= x327 x312)) (= x52 x370) (= (x127 x409) x206) (bvuge x117 (_ bv0 256)) (bvult (_ bv0 256) x327) (= x160 x188) (= x192 x400) (not (= x203 x327)) (bvule (_ bv0 256) x56) (bvule x312 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x327) (= (x325 x435 (_ bv1 256)) x409) (= x45 (x127 x435)) x140 (bvuge x122 (_ bv0 256)) (= x122 x161) (bvugt x203 (_ bv0 256)) (= x151 x400) (bvuge (_ bv4294967295 256) x411) (= x370 x284) (= (x127 x299) x288) (bvuge (_ bv4294967295 256) x387) (= x26 x39) (= (bvudiv x363 (_ bv79228162514264337593543950336 256)) x78) (= x435 (x325 x217 (_ bv2 256))) (= (x169 (_ bv256 256)) x226) (bvule x26 (_ bv1461501637330902918203684832716283019655932542975 256)) (= false x385) (= x146 (bvudiv x206 (_ bv18446744073709551616 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x117) (= (x169 (_ bv224 256)) x298) (bvuge (_ bv340282366920938463463374607431768211455 256) x40) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x215))) (and (=> (and (not x49) (= x355 x42)) x75) (=> x49 x287)))))
(assert (not x69))
(assert (=> (bvule x203 (_ bv10000 256)) (= (x253 x203) (x84 x203))))
(assert (= (x232 (x253 (x316 (bvadd (_ bv128 256) x158)))) (x316 (bvadd (_ bv128 256) x158))))
(assert (=> (bvule x79 (_ bv10000 256)) (= (x253 x79) (x84 x79))))
(assert (=> (bvuge (_ bv10000 256) (x316 (bvadd x158 (_ bv128 256)))) (= (x253 (x316 (bvadd (_ bv128 256) x158))) (x84 (x316 (bvadd (_ bv128 256) x158))))))
(assert (= (_ bv3547226261 256) (x232 (x84 (_ bv3547226261 256)))))
(assert (= (x232 (x84 (_ bv2220280665 256))) (_ bv2220280665 256)))
(assert (= (x232 (x253 x79)) x79))
(assert (= (x253 (_ bv3250587425 256)) (x84 (_ bv3250587425 256))))
(assert (x261 x218))
(assert (=> (bvule x85 (_ bv10000 256)) (= (x84 x85) (x253 x85))))
(assert (= (x253 (_ bv3547226261 256)) (x84 (_ bv3547226261 256))))
(assert (= (x232 (x253 (x316 (bvadd (_ bv160 256) x158)))) (x316 (bvadd x158 (_ bv160 256)))))
(assert (= (x232 (x253 x439)) x439))
(assert (= (bvadd (x232 x15) (_ bv2 256)) (x232 (x325 x15 (_ bv2 256)))))
(assert (= (or x343 x29) x393))
(assert (= (and x393 (not x107)) x147))
(assert (= (x253 (x232 x165)) x165))
(assert (= (x84 (_ bv79228162514264337593543950336 256)) (x253 (_ bv79228162514264337593543950336 256))))
(assert (= (x253 (_ bv1084754510 256)) (x84 (_ bv1084754510 256))))
(assert (= (x76 (bvadd x158 (_ bv32 256))) (_ bv0 256)))
(assert (x261 (x316 (bvadd (_ bv128 256) x158))))
(assert (= (x316 (bvadd x158 (_ bv32 256))) (x232 (x253 (x316 (bvadd (_ bv32 256) x158))))))
(assert (= (x84 (_ bv1960939212 256)) (x253 (_ bv1960939212 256))))
(assert (= (and x27 x225) x343))
(assert (= (x84 (_ bv1960641893 256)) (x253 (_ bv1960641893 256))))
(assert (= (_ bv0 256) (x76 (bvadd (_ bv64 256) x158))))
(assert (= x327 (x232 (x253 x327))))
(assert (= (_ bv2652930389 256) (x232 (x84 (_ bv2652930389 256)))))
(assert (= (_ bv1000000 256) (x232 (x84 (_ bv1000000 256)))))
(assert (= (x84 (_ bv3110348530 256)) (x253 (_ bv3110348530 256))))
(assert (= (=> (and (= x230 (bvadd (_ bv32 256) x64)) (= x120 x179) (not (= x303 (_ bv0 256))) (= x442 (x22 (_ bv128 256))) (not (bvugt (_ bv0 256) x292)) (= (x22 (_ bv128 256)) x334) (= (bvadd (bvneg x120) (_ bv18446744073709551615 256)) x292) (= x120 (bvand x239 (_ bv4294967295 256))) (bvult (_ bv0 256) x442) (= x64 (x167 (_ bv160 256))) (= (not (bvugt x334 (_ bv1 256))) x134) (= (x296 x230) x239) (= x303 (bvand x239 (_ bv4294967295 256)))) (and (=> (= x179 x415) x248) x134)) x413))
(assert (= (and x49 x201) x102))
(assert (= (x232 (x84 (_ bv1461501637330902918203684832716283019655932542975 256))) (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x84 (_ bv396482575 256)) (x253 (_ bv396482575 256))))
(assert (= x154 (x232 (x253 x154))))
(assert (= x391 (x232 (x253 x391))))
(assert (= (and (not x49) x201) x170))
(assert (= (bvadd (x232 x435) (_ bv1 256)) (x232 (x325 x435 (_ bv1 256)))))
(assert (=> (bvuge (_ bv10000 256) (x316 (bvadd (_ bv160 256) x158))) (= (x253 (x316 (bvadd (_ bv160 256) x158))) (x84 (x316 (bvadd x158 (_ bv160 256)))))))
(assert (=> (bvuge (_ bv10000 256) (x316 (bvadd (_ bv64 256) x158))) (= (x253 (x316 (bvadd (_ bv64 256) x158))) (x84 (x316 (bvadd x158 (_ bv64 256)))))))
(assert (= x309 (and x107 x393)))
(assert (= (x232 (x84 (_ bv3110348530 256))) (_ bv3110348530 256)))
(assert (= (_ bv0 256) (x76 (bvadd x158 (_ bv160 256)))))
(assert (=> (bvule x327 (_ bv10000 256)) (= (x253 x327) (x84 x327))))
(assert (x261 x290))
(assert (= (_ bv4534642 256) (x232 (x84 (_ bv4534642 256)))))
(assert (=> (bvule x208 (_ bv10000 256)) (= (x84 x208) (x253 x208))))
(assert (= (x232 (x84 (_ bv47171411 256))) (_ bv47171411 256)))
(assert (= (or x340 x205) x29))
(assert (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256) (x232 (x84 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)))))
(assert (= (x232 (x253 (x316 (bvadd (_ bv96 256) x158)))) (x316 (bvadd (_ bv96 256) x158))))
(assert (= (x232 (x253 x203)) x203))
(assert (= (x84 (_ bv1461501637330902918203684832716283019655932542975 256)) (x253 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (=> (bvuge (_ bv10000 256) (x316 x158)) (= (x84 (x316 x158)) (x253 (x316 x158)))))
(assert (= x218 (x232 (x253 x218))))
(assert (= (_ bv0 256) (x306 x115)))
(assert (x261 x327))
(assert (= (and x383 x147) x142))
(assert (x261 x208))
(assert (= (or x309 x90) x53))
(assert (= (x232 (x253 x176)) x176))
(assert (= x208 (x232 (x253 x208))))
(assert (= (x232 (x253 x312)) x312))
(assert (= (x87 (_ bv160 256)) (_ bv0 256)))
(assert (x261 x391))
(assert (= (x253 (_ bv662108492 256)) (x84 (_ bv662108492 256))))
(assert (= (_ bv4294967295 256) (x232 (x84 (_ bv4294967295 256)))))
(assert (= (x232 (x253 x412)) x412))
(assert (x261 (x316 (bvadd (_ bv32 256) x158))))
(assert (x261 x203))
(assert (x261 (x316 (bvadd (_ bv160 256) x158))))
(assert (= (x232 (x84 (_ bv18446744073709551615 256))) (_ bv18446744073709551615 256)))
(assert (x261 x439))
(assert (x261 (x316 x158)))
(assert (= (_ bv0 256) (x76 (bvadd x158 (_ bv128 256)))))
(assert (= (=> (and (= (bvand x197 (_ bv1461501637330902918203684832716283019655932542975 256)) x260) (= x103 (x150 (x253 x439) (x253 x412) (_ bv0 256))) (= (x127 (x253 x176)) x187) (= x176 x106) (= (x22 (_ bv128 256)) x88) (= x194 (bvand (_ bv255 256) x187)) (= (x150 (x253 x144) (x253 x154) (_ bv0 256)) x200) (= (x127 x200) x197) (= (bvadd (_ bv1 256) x305) x154) (= x144 (bvlshr x439 (_ bv224 256))) (= (_ bv0 256) x194) (= x412 x20) (= x260 x123) (= (= x88 (_ bv0 256)) x27)) (and (=> (and (and (= x36 (bvadd (_ bv64 256) x355)) (= (bvult (_ bv0 256) x227) x138) (= (bvadd (_ bv32 256) x355) x221) (= x227 (x22 (_ bv128 256))) (= x403 (bvadd (_ bv32 256) x36))) (not x27)) (and (=> x138 x285) (=> (and (not x138) (and (= (_ bv0 256) x186) (= x403 x108) (= (_ bv160 256) x51))) x72))) (=> (and (= x165 (x84 (_ bv0 256))) x27) x34))) x75))
(assert (= (_ bv1960939212 256) (x232 (x84 (_ bv1960939212 256)))))
(assert (x261 x412))
(assert (= (x76 (bvadd (_ bv96 256) x158)) (_ bv0 256)))
(assert (= (x232 (x325 x293 (_ bv1 256))) (bvadd (x232 x293) (_ bv1 256))))
(assert (= (x232 (x253 x214)) x214))
(assert (= (_ bv1084754510 256) (x232 (x84 (_ bv1084754510 256)))))
(assert (= (x253 (_ bv4534642 256)) (x84 (_ bv4534642 256))))
(assert (= (_ bv4294967296 256) (x232 (x84 (_ bv4294967296 256)))))
(assert (x261 x184))
(assert (= x126 (=> (and (and (= x173 x63) (= x348 x438) (= x139 x41) (= (= x63 x119) x190) (= x298 x119)) (and (= (x332 (x253 x203)) x354) (= x2 x161) (= (x8 x283) x209) (= (bvand x236 (_ bv4294967295 256)) x18) (= x323 (x8 x283)) (= x211 x184) (bvuge x2 (_ bv0 256)) (= x233 (x150 (x253 x391) (x253 x214) (_ bv0 256))) (= x214 x441) (bvule x426 (_ bv4294967295 256)) (= x348 (x254 (_ bv160 256))) (= (x254 (_ bv256 256)) x360) (= x139 (x254 (_ bv128 256))) (= x166 x15) (bvuge x426 (_ bv0 256)) (= x65 x50) (= x406 (x254 (_ bv192 256))) (not (bvult x375 (_ bv2652930389 256))) (bvult (_ bv0 256) x354) (not (bvugt (_ bv1749768213 256) x375)) (bvugt (_ bv3547226261 256) x375) (bvuge (_ bv4294967295 256) x321) (= (bvudiv x171 (_ bv79228162514264337593543950336 256)) x24) (not (bvult x375 (_ bv3110348530 256))) (= x274 (bvand (_ bv340282366920938463463374607431768211455 256) x24)) (= x375 (_ bv3250587425 256)) (= x173 (x254 (_ bv224 256))) (bvule (_ bv0 256) x183) (= x15 (x150 (x253 x184) x233 (_ bv0 256))) (= (x8 x283) x171) (bvuge x182 (_ bv0 256)) (bvule x183 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x182 (_ bv340282366920938463463374607431768211455 256)) (= x62 x235) (= (x8 x166) x297) (= (_ bv0 256) x62) (= x293 (x325 x15 (_ bv2 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x2) (= (bvudiv x209 (_ bv18446744073709551616 256)) x371) (= x236 (bvudiv x323 (_ bv4294967296 256))) (not (= (_ bv3110348530 256) x375)) (= (bvand x371 (_ bv4294967295 256)) x110) (bvuge x321 (_ bv0 256)) (bvuge x50 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x50) (= x391 x424) (= x273 (x8 x293)) (= x58 x65) (= x283 (x325 x293 (_ bv1 256))))) x190)))
(assert (=> (bvuge (_ bv10000 256) (x316 (bvadd (_ bv192 256) x158))) (= (x84 (x316 (bvadd (_ bv192 256) x158))) (x253 (x316 (bvadd (_ bv192 256) x158))))))
(assert (x261 x144))
(assert (=> (bvule x412 (_ bv10000 256)) (= (x253 x412) (x84 x412))))
(assert (= x285 (=> (and (= x341 (x167 (_ bv160 256))) (= x403 x48) (= (bvadd x258 (_ bv32 256)) x344) (= x353 (not (bvugt x227 (_ bv1 256)))) (= (bvadd x403 (_ bv32 256)) x258) (= x436 (x296 x407)) (= x155 (bvand (_ bv4294967295 256) x436)) (= x115 x341) (= (bvadd x341 (_ bv32 256)) x407) (= x396 (x174 x115))) (and (=> (and (= x344 x108) (= x51 (_ bv192 256)) (= (_ bv1 256) x186)) x72) x353))))
(assert (= (x232 (x253 (x316 x158))) (x316 x158)))
(assert (=> (bvule x290 (_ bv10000 256)) (= (x253 x290) (x84 x290))))
(assert (=> (bvuge (_ bv10000 256) x312) (= (x84 x312) (x253 x312))))
(assert (= x85 (x232 (x253 x85))))
(assert (= (_ bv3250587425 256) (x232 (x84 (_ bv3250587425 256)))))
(assert (x261 x154))
(assert (= (x84 (_ bv1000000 256)) (x253 (_ bv1000000 256))))
(assert (= x205 (and x364 x138)))
(assert (= (x84 (_ bv2652930389 256)) (x253 (_ bv2652930389 256))))
(assert (x261 x85))
(assert (= (or x142 x270) x90))
(assert (=> (bvule x184 (_ bv10000 256)) (= (x84 x184) (x253 x184))))
(assert (= (x386 x407) (_ bv0 256)))
(assert (= (x84 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)) (x253 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))))
(assert (= (=> (and (= x42 x82) (= (bvadd x130 (_ bv32 256)) x333) (= x262 (bvadd x42 (_ bv64 256))) (= (bvadd x333 (_ bv32 256)) x28) (= (not (bvult x28 x432)) x251) (= x223 (ite x384 (_ bv1 256) (_ bv0 256))) (= x12 (x429 x320)) (= x390 (bvult (_ bv18446744073709551615 256) x262)) (= (x429 x333) x228) (= x243 (bvugt x42 x262)) (= (bvadd (bvneg x130) x319) x315) (= (_ bv0 256) x223) (not (bvslt x315 (_ bv64 256))) (bvuge (_ bv4294967295 256) x228) (= x384 (or x243 x390)) (= x418 (bvadd x42 (_ bv32 256))) (= x130 x320)) (and (=> (= x262 x355) x75) x251)) x287))
(assert (= (_ bv0 256) (x76 (bvadd (_ bv192 256) x158))))
(assert (= (and x364 (not x138)) x340))
(assert (=> (bvuge (_ bv10000 256) (x316 (bvadd x158 (_ bv32 256)))) (= (x84 (x316 (bvadd (_ bv32 256) x158))) (x253 (x316 (bvadd x158 (_ bv32 256)))))))
(assert (= x270 (and x147 (not x383))))
(assert (= (_ bv662108492 256) (x232 (x84 (_ bv662108492 256)))))
(assert (x261 (x316 (bvadd (_ bv96 256) x158))))
(assert (= x144 (x232 (x253 x144))))
(assert (= (_ bv396482575 256) (x232 (x84 (_ bv396482575 256)))))
(assert (= (x84 (_ bv47171411 256)) (x253 (_ bv47171411 256))))
(assert (=> (bvule x214 (_ bv10000 256)) (= (x84 x214) (x253 x214))))
(assert (= (x232 (x84 (_ bv340282366920938463463374607431768211455 256))) (_ bv340282366920938463463374607431768211455 256)))
(assert (= (x386 x230) (_ bv0 256)))
(assert (=> (bvule x439 (_ bv10000 256)) (= (x84 x439) (x253 x439))))
(assert (=> (bvuge (_ bv10000 256) x154) (= (x84 x154) (x253 x154))))
(assert (x261 (x316 (bvadd (_ bv64 256) x158))))
(assert (x261 x214))
(assert (= (x316 (bvadd x158 (_ bv64 256))) (x232 (x253 (x316 (bvadd (_ bv64 256) x158))))))
(assert (= (_ bv18446744073709551616 256) (x232 (x84 (_ bv18446744073709551616 256)))))
(assert (= (x84 (_ bv2220280665 256)) (x253 (_ bv2220280665 256))))
(assert (=> (bvuge (_ bv10000 256) x176) (= (x253 x176) (x84 x176))))
(assert (= (x232 (x84 (_ bv79228162514264337593543950336 256))) (_ bv79228162514264337593543950336 256)))
(assert (= (x232 (x253 x290)) x290))
(assert (= (_ bv1960641893 256) (x232 (x84 (_ bv1960641893 256)))))
(assert (= x225 (or x170 x102)))
(assert (=> (bvule x144 (_ bv10000 256)) (= (x253 x144) (x84 x144))))
(assert (=> (bvuge (_ bv10000 256) x391) (= (x253 x391) (x84 x391))))
(assert (= (x253 (_ bv4294967295 256)) (x84 (_ bv4294967295 256))))
(assert (x261 x312))
(assert (= (x84 (_ bv1749768213 256)) (x253 (_ bv1749768213 256))))
(assert (= (=> (not (bvugt x415 (_ bv1000000 256))) x126) x248))
(assert (= true x201))
(assert (= (x76 x158) (_ bv0 256)))
(assert (x261 x176))
(assert (= (x253 (_ bv4294967296 256)) (x84 (_ bv4294967296 256))))
(assert (= (x84 (_ bv18446744073709551615 256)) (x253 (_ bv18446744073709551615 256))))
(assert (= (x316 (bvadd x158 (_ bv192 256))) (x232 (x253 (x316 (bvadd (_ bv192 256) x158))))))
(check-sat)
(exit)