(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x20 0)) (((x52 (x64 (_ BitVec 256))) (x69 (x91 x20) (x73 (_ BitVec 256))) (x51 (x36 x20) (x6 x20) (x75 (_ BitVec 256))))))
(declare-fun x44 () Bool)
(declare-fun x104 () Bool)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x82 ((_ BitVec 256)) x20)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x107 () Bool)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x61 (x20) (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x99 (x20) (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x80 () Bool)
(declare-fun x49 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x83 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x45 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x96 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x77 (x20) (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(define-fun x28 ((x20 x20) (x93 (_ BitVec 256))) x20 (ite ((_ is x51) x20) (x51 (x36 x20) (x6 x20) (bvadd (x75 x20) x93)) (ite ((_ is x69) x20) (x69 (x91 x20) (bvadd x93 (x73 x20))) (x52 (bvadd (x64 x20) x93)))))
(define-fun x105 ((x88 (_ BitVec 256)) (x35 (_ BitVec 256))) Bool (= x88 (bvudiv (bvmul x88 x35) x35)))
(define-fun x25 ((x88 (_ BitVec 256)) (x35 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x35 x88) x35) x88))
(define-fun x3 ((x88 (_ BitVec 256)) (x35 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x88 x35) x35) x88))
(define-fun x66 ((x85 (_ BitVec 256))) Bool (=> (and (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x85)) (bvult (_ bv10000 256) x85) (not (= x85 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (= x85 (_ bv1415856751 256)))) (not ((_ is x52) (x82 x85)))))
(assert (= (_ bv1415856751 256) (x61 (x52 (_ bv1415856751 256)))))
(assert (= (or x5 x49) x30))
(assert (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (x61 (x52 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))))
(assert (= true x109))
(assert (= (x82 (_ bv1461501637330902918203684832716283019655932542975 256)) (x52 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (x82 (_ bv1415856751 256)) (x52 (_ bv1415856751 256))))
(assert (= x80 (=> (and (= x11 x2) (and (= x22 x1) (= x39 x68) (= (bvudiv x46 x9) x22) (= x54 x19) (= x48 x9) (= x107 (= x41 x53)) (= x41 x19) (= x62 x48) (= x63 x76) (= x26 x53) (= x15 x106) (= x32 x106) (= x96 x32) (= x26 x1) (= x84 x40) (= x76 x40) (= x68 x62) (= x90 x96) (= x23 (bvmul x84 x15)) (= x11 x54) (= x46 x23) (= x63 x16))) x107)))
(assert (=> (bvule x59 (_ bv10000 256)) (= (x52 x59) (x82 x59))))
(assert (= x49 (and x109 (not x104))))
(assert (= (x82 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x52 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (not x44))
(assert (= x44 (=> (and (or (and x104 (and (bvugt x8 (_ bv0 256)) (= x2 x12) (= (bvudiv x13 x43) x12))) (and (not x104) (and (= (bvmul x72 x31) x100) (= x38 (bvmul x29 x56)) (= x2 x33) (= x4 (bvadd (_ bv1 256) (bvnot x8))) (= (bvadd (_ bv2 256) (bvneg x94)) x101) (= (bvmul x65 x100) x94) (= ((_ extract 255 0) (bvurem (bvmul (concat (_ bv0 256) x92) (concat (_ bv0 256) x57)) (concat (_ bv0 256) x43))) x74) (= (bvadd (bvneg x78) (_ bv2 256)) x29) (bvult x102 x8) (= (bvudiv x43 x87) x65) (= x27 (bvadd (bvneg x55) (_ bv2 256))) (= (bvmul x65 x56) x78) (= x24 (bvmul x47 x67)) (= (bvmul x98 x65) x50) (= x97 (bvudiv x71 x87)) (= (bvadd (_ bv2 256) (bvneg x50)) x42) (= x86 (bvadd (bvneg x10) (_ bv2 256))) (= x10 (bvmul x65 x38)) (= x31 (bvmul x27 x21)) (= (bvmul x89 (bvor x97 x24)) x33) (= (bvadd (_ bv2 256) (bvneg x81)) x72) (= (bvadd x102 (bvneg (ite (bvugt x74 x13) (_ bv1 256) (_ bv0 256)))) x67) (= (bvmul x21 x65) x55) (= x87 (bvand x4 x43)) (= x71 (bvadd (bvneg x74) x13)) (= (bvadd x108 (_ bv1 256)) x47) (= x81 (bvmul x65 x31)) (= (bvmul x42 x98) x21) (= x79 (bvmul (_ bv3 256) x65)) (= x89 (bvmul x38 x86)) (= (bvxor x79 (_ bv2 256)) x98) (= (bvudiv x58 x87) x108) (= (bvadd (bvneg x87) (_ bv0 256)) x58) (= (bvmul x100 x101) x56)))) (and (= x18 (bvadd (bvneg x13) x60)) (bvult (_ bv0 256) x34) (= x8 x14) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x59) x83 (= x16 x57) (= x103 x95) (= x102 (bvadd (bvneg (ite (bvult x60 x13) (_ bv1 256) (_ bv0 256))) x18)) (= x92 x70) (= x104 (= x102 (_ bv0 256))) (= x95 x57) (bvult (_ bv0 256) x59) (= x17 x70) (= x83 (bvult (_ bv0 256) (x77 (x82 x59)))) (= x39 x43) (= (_ bv1415856751 256) x7) (= x60 ((_ extract 255 0) (bvurem (bvmul (concat (_ bv0 256) x92) (concat (_ bv0 256) x57)) (concat (_ bv0 256) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))) (= x90 x92) (bvuge x37 (_ bv0 256)) (= (bvmul x92 x57) x13) (= x37 (x99 (x82 x59))) (= x34 (x77 (x82 x59))) (= x8 x43))) x80)))
(assert (= x5 (and x109 x104)))
(assert (= (x61 (x52 (_ bv1461501637330902918203684832716283019655932542975 256))) (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x59 (x61 (x82 x59))))
(assert (x66 x59))
(check-sat)
(exit)