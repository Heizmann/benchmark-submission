(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x12 0)) (((x267 (x162 x12) (x169 (_ BitVec 256))) (x129 (x154 x12) (x292 x12) (x64 (_ BitVec 256))) (x50 (x223 (_ BitVec 256))))))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x139 () x12)
(declare-fun x173 () Bool)
(declare-fun x234 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x190 () (_ BitVec 256))
(declare-fun x69 (x12) (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x44 (x12) (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x186 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x275 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x201 () Bool)
(declare-fun x270 () Bool)
(declare-fun x268 () (_ BitVec 256))
(declare-fun x289 () Bool)
(declare-fun x171 () Bool)
(declare-fun x244 () (_ BitVec 256))
(declare-fun x227 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x95 () Bool)
(declare-fun x146 () Bool)
(declare-fun x148 () Bool)
(declare-fun x256 () Bool)
(declare-fun x273 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x216 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x252 () Bool)
(declare-fun x84 () Bool)
(declare-fun x276 () Bool)
(declare-fun x202 () (_ BitVec 256))
(declare-fun x91 () x12)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x194 () (_ BitVec 256))
(declare-fun x277 ((_ BitVec 256)) x12)
(declare-fun x82 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x1 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x185 () x12)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x165 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x48 () Bool)
(declare-fun x29 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x163 () Bool)
(declare-fun x47 () (_ BitVec 256))
(declare-fun x123 () Bool)
(declare-fun x172 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x260 () x12)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x253 () Bool)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x19 () x12)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x271 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x42 () Bool)
(declare-fun x112 () Bool)
(declare-fun x108 () Bool)
(declare-fun x92 () x12)
(declare-fun x257 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x118 () Bool)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x266 () Bool)
(declare-fun x105 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x284 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x245 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x189 () x12)
(declare-fun x294 () (_ BitVec 256))
(declare-fun x71 () Bool)
(declare-fun x137 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x70 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x111 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x65 () x12)
(declare-fun x16 () Bool)
(declare-fun x38 () Bool)
(declare-fun x110 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x46 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x199 () Bool)
(declare-fun x166 () (_ BitVec 256))
(declare-fun x195 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x57 (x12) (_ BitVec 256))
(declare-fun x196 () x12)
(declare-fun x203 () Bool)
(declare-fun x98 (x12) (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x226 () (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x39 () Bool)
(declare-fun x232 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x237 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x236 () x12)
(declare-fun x103 () x12)
(declare-fun x212 () Bool)
(declare-fun x243 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x176 () Bool)
(declare-fun x28 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x117 () Bool)
(declare-fun x127 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x150 () Bool)
(declare-fun x280 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x88 () Bool)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x233 () Bool)
(declare-fun x218 () Bool)
(declare-fun x261 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x285 () Bool)
(declare-fun x149 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x290 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x281 () Bool)
(declare-fun x138 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x278 () (_ BitVec 256))
(declare-fun x152 (x12) (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x141 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x282 (x12) (_ BitVec 256))
(declare-fun x100 () Bool)
(declare-fun x35 () (_ BitVec 256))
(declare-fun x258 () Bool)
(declare-fun x296 () Bool)
(declare-fun x49 () Bool)
(declare-fun x187 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x23 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x161 () x12)
(declare-fun x43 () Bool)
(declare-fun x109 () Bool)
(declare-fun x198 () Bool)
(declare-fun x59 (x12) (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x248 () Bool)
(declare-fun x97 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x241 () x12)
(declare-fun x295 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x235 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x174 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x37 () Bool)
(declare-fun x83 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x153 () Bool)
(declare-fun x238 () (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x121 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(define-fun x144 ((x12 x12) (x131 (_ BitVec 256))) x12 (ite ((_ is x267) x12) (x267 (x162 x12) (bvadd x131 (x169 x12))) (ite ((_ is x129) x12) (x129 (x154 x12) (x292 x12) (bvadd x131 (x64 x12))) (x50 (bvadd (x223 x12) x131)))))
(define-fun x86 ((x22 (_ BitVec 256)) (x262 (_ BitVec 256))) Bool (= (bvudiv (bvmul x262 x22) x262) x22))
(define-fun x204 ((x22 (_ BitVec 256)) (x262 (_ BitVec 256))) Bool (= x22 (bvsdiv (bvmul x22 x262) x262)))
(define-fun x55 ((x22 (_ BitVec 256)) (x262 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x262 x22) x262) x22))
(define-fun x291 ((x113 x12)) (_ BitVec 256) (x98 x113))
(define-fun x159 ((x113 x12)) (_ BitVec 256) (ite (= x113 x189) x158 (x57 x113)))
(define-fun x247 ((x113 x12)) (_ BitVec 256) (ite (= x19 x113) x297 (x159 x113)))
(define-fun x136 ((x113 x12)) (_ BitVec 256) (ite x272 (x57 x113) (x247 x113)))
(define-fun x240 ((x113 x12)) (_ BitVec 256) (x152 x113))
(define-fun x89 ((x113 x12)) (_ BitVec 256) (ite (= x103 x113) x143 (x240 x113)))
(define-fun x73 ((x113 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x113) x192 (x111 x113)))
(define-fun x250 ((x113 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x113) x56 (x73 x113)))
(define-fun x208 ((x113 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x113) x192 (x250 x113)))
(define-fun x239 ((x113 (_ BitVec 256))) (_ BitVec 256) (ite (= x113 (_ bv128 256)) (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256) (x208 x113)))
(define-fun x5 ((x113 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv132 256) x113) x1 (x239 x113)))
(define-fun x24 ((x113 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x113) x56 (x5 x113)))
(define-fun x179 ((x113 x12)) (_ BitVec 256) (ite (= x113 x236) x130 (x136 x113)))
(define-fun x25 ((x113 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x113) (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) (x245 x113)))
(define-fun x53 ((x113 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv132 256) x113) x121 (x25 x113)))
(define-fun x181 ((x113 (_ BitVec 256))) (_ BitVec 256) (ite (= x113 (_ bv164 256)) x17 (x53 x113)))
(define-fun x21 ((x113 (_ BitVec 256))) (_ BitVec 256) (ite (= x113 (_ bv196 256)) x115 (x181 x113)))
(define-fun x62 ((x215 (_ BitVec 256))) Bool (=> (and (not (= x215 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256))) (not (= (_ bv1889567281 256) x215)) (not (= x215 (_ bv117300739 256))) (not (= (_ bv170435703 256) x215)) (not (= (_ bv3026235284 256) x215)) (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x215)) (not (= (_ bv3121116754 256) x215)) (not (= (_ bv599290589 256) x215)) (not (= x215 (_ bv1851080549 256))) (not (= x215 (_ bv3337024914 256))) (not (= x215 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))) (bvugt x215 (_ bv10000 256)) (not (= (_ bv1289409798 256) x215)) (not (= (_ bv157198259 256) x215)) (not (= (_ bv2835717307 256) x215)) (not (= (_ bv826074471 256) x215)) (not (= (_ bv330252341 256) x215)) (not (= (_ bv2514000705 256) x215)) (not (= (_ bv404098525 256) x215)) (not (= x215 (_ bv3017275065 256))) (not (= (_ bv1461501637330902918203684832716283019655932542975 256) x215)) (not (= x215 (_ bv2376452955 256)))) (not ((_ is x50) (x277 x215)))))
(assert (= x83 (and x138 x252)))
(assert (= x114 (x282 (x277 x114))))
(assert (= x49 (and x163 x72)))
(assert (= x171 (or x70 (and (not x296) x97))))
(assert (= (x277 (_ bv404098525 256)) (x50 (_ bv404098525 256))))
(assert (x62 x114))
(assert (= (_ bv117300739 256) (x282 (x50 (_ bv117300739 256)))))
(assert (= (or x117 x16) x61))
(assert (= (and x173 (not x184)) x52))
(assert (= (_ bv404098525 256) (x282 (x50 (_ bv404098525 256)))))
(assert (= (x50 (_ bv3337024914 256)) (x277 (_ bv3337024914 256))))
(assert (= (=> (and (= x190 x278) (= x269 x183)) x32) x60))
(assert (= (x282 (x50 (_ bv1851080549 256))) (_ bv1851080549 256)))
(assert (= x132 (and x18 (not x237))))
(assert (= (_ bv1889567281 256) (x282 (x50 (_ bv1889567281 256)))))
(assert (= (_ bv157198259 256) (x282 (x50 (_ bv157198259 256)))))
(assert (= (and (not x199) x67) x100))
(assert (= (or x153 x272) x72))
(assert (not x15))
(assert (x62 x134))
(assert (= (=> (and (and (= (bvadd x265 x182) x156) (= x299 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x224)) (bvuge (bvadd x182 x265) x265) (bvule (_ bv0 256) x8) (= x34 x216) (= x156 x9) (bvult (_ bv0 256) x206) (= x8 (x240 x103)) (= (bvadd x8 x182) x143) (bvule (_ bv0 256) x265) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x8) (= x23 (ite (= x254 (_ bv0 256)) (_ bv1 256) (_ bv0 256))) (= (bvor x23 x77) x128) (= x279 (ite (bvult (_ bv31 256) x254) (_ bv1 256) (_ bv0 256))) (= x103 (x129 (x277 x299) (x50 (_ bv3 256)) (_ bv0 256))) (= (bvand x279 x105) x77) (= (ite (= (_ bv1 256) x149) (_ bv1 256) (_ bv0 256)) x105) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x265) (= x155 x156) (= (bvand x166 x128) x206) (bvule (_ bv0 256) x76) (bvule x76 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (bvadd x76 x115) x76) (= x157 x182) (= x216 (bvadd x115 x76)) (= x216 x135)) (and (= x197 x2) (not (= (_ bv3017275065 256) x242)) (= x209 x197) (= x119 x209) (bvugt x246 (_ bv0 256)) (= x261 x284) (= x242 (_ bv3121116754 256)) (= x31 x157) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x268) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x288) (bvule (_ bv0 256) x268) (= (= x197 x121) x170) (= x192 x31) (= x268 x82) (= (x59 (x277 x17)) x246) (bvule x197 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x288) (bvule x1 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x261 (_ bv0 256)) (= x230 x121) (not (= (_ bv3026235284 256) x242)) (= x1 x290) (not (bvugt (_ bv2376452955 256) x242)) (not (bvugt (_ bv3017275065 256) x242)) (bvult x242 (_ bv3337024914 256)) (bvule (_ bv0 256) x230) (bvule x230 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x82 x99))) (and (=> x170 x253) (=> (and (not x170) (and (or x39 (and (not x39) (and (= (bvadd (bvneg x192) x194) x202) (not (bvult x194 x192)) (= (bvand x197 (_ bv1461501637330902918203684832716283019655932542975 256)) x13)))) (and (= (x129 (x277 x121) x241 (_ bv0 256)) x161) (= x39 (= x194 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (bvule x194 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x241 (x129 (x277 x114) (x50 (_ bv4 256)) (_ bv0 256))) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x197) x114) (= x194 (x291 x161)) (bvuge x194 (_ bv0 256))))) x276))) x218))
(assert (= (or x83 x227 x84) x97))
(assert (= x3 (and x252 (not x138))))
(assert (=> (bvule x299 (_ bv10000 256)) (= (x50 x299) (x277 x299))))
(assert (= x150 (=> (and (= x298 x254) (= x66 x76) (= x166 (_ bv0 256)) (= x167 x265)) x212)))
(assert (= (x50 (_ bv157198259 256)) (x277 (_ bv157198259 256))))
(assert (= (x277 (_ bv599290589 256)) (x50 (_ bv599290589 256))))
(assert (= (and x141 x100) x198))
(assert (x62 x299))
(assert (= (_ bv2514000705 256) (x282 (x50 (_ bv2514000705 256)))))
(assert (= (x50 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)) (x277 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256))))
(assert (= (and x258 x42) x16))
(assert (= (=> (and (and (= x123 (bvuge x175 x287)) (= x20 x33) (= (_ bv2 256) x10) (= x238 x287) (= x14 x20) (= x175 (bvmul x14 (_ bv2 256)))) (and (= x273 (ite (bvult (_ bv31 256) x183) (_ bv1 256) (_ bv0 256))) (= x33 x56) (= x280 (bvand x273 x27)) (= x27 (ite (= (_ bv1 256) x257) (_ bv1 256) (_ bv0 256))) (= x228 (bvor x280 x107)) (= x106 (bvand x228 x190)) (= (ite (= (_ bv0 256) x183) (_ bv1 256) (_ bv0 256)) x107) (bvult (_ bv0 256) x106))) (and (=> (and (= (_ bv2 256) x293) (= x151 x238) (= (bvmul (_ bv2 256) x151) x180) (= (bvule x210 x180) x195) (= x210 x20)) x195) x123)) x187))
(assert (= x173 (and (not x63) x112)))
(assert (= (and x110 x52) x90))
(assert (= (x50 (_ bv2376452955 256)) (x277 (_ bv2376452955 256))))
(assert (= x118 (=> (and (= (bvadd (bvneg x192) x155) x7) (= (bvadd (bvneg x192) x104) x207) (= (x89 x65) x104) (not (bvult x34 x56)) (bvule x34 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (_ bv68 256) x164) (= x26 (bvadd x164 (bvneg (_ bv4 256)))) (= x56 x259) (= x1 x29) (not (bvult x164 (_ bv4 256))) (= (x129 (x277 x257) (x50 (_ bv3 256)) (_ bv0 256)) x65) (not (bvugt x192 x104)) (bvule (_ bv0 256) x155) (= (_ bv2835717307 256) x4) (not (= x56 (_ bv0 256))) (bvule x104 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x222 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)) (= x271 (x59 (x277 x145))) (bvugt x271 (_ bv0 256)) (bvule x155 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x4 (_ bv826074471 256))) (not (= (_ bv1889567281 256) x4)) (= x138 (bvsgt (_ bv64 256) x26)) (bvule (_ bv0 256) x104) (= (bvadd (bvneg x56) x34) x193) (not (bvult x4 (_ bv826074471 256))) (not (= x4 (_ bv2514000705 256))) (= (bvand x197 (_ bv1461501637330902918203684832716283019655932542975 256)) x257) (= x30 (_ bv128 256)) (bvuge x34 (_ bv0 256))) (and (=> (and x138 (and (= x269 x183) (= (_ bv0 256) x190))) x32) (=> (and (not x138) (and (= x243 x29) (= (= x29 x1) x266))) (and (=> (and (and (= (x129 (x277 x17) (x50 (_ bv1 256)) (_ bv0 256)) x91) (bvule (_ bv0 256) x244) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x244) (= x244 (x136 x91)) (= x88 (bvugt x56 x244)) (= x259 x213)) x266) (and (=> (and (= x278 (_ bv0 256)) x88) x60) (=> (and (= (bvugt x259 x244) x199) (not x88)) (and (=> (and (= x278 (_ bv0 256)) x199) x60) (=> (and (not x199) (and (= (bvadd (bvneg x259) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x294) (= (x129 (x277 x29) (x50 (_ bv1 256)) (_ bv0 256)) x92) (bvule x295 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x130 (bvadd x244 (bvneg x259))) (= (x179 x92) x295) (bvule (_ bv0 256) x295) (= (x129 (x277 x17) (x50 (_ bv1 256)) (_ bv0 256)) x236) (= x141 (bvult x294 x295)))) (and (=> (and x141 (= (_ bv0 256) x278)) x60) (=> (and (and (= x102 (bvadd x295 x259)) (= x165 (bvugt x295 x102))) (not x141)) (and (=> (and (and (= (_ bv32 256) x183) (= (_ bv1 256) x190)) (not x165)) x32) (=> (and x165 (= (_ bv0 256) x278)) x60))))))))) (=> (and (not x266) (= (_ bv0 256) x278)) x60)))))))
(assert (x62 x125))
(assert (= (x282 (x50 (_ bv1289409798 256))) (_ bv1289409798 256)))
(assert (= (x50 (_ bv2835717307 256)) (x277 (_ bv2835717307 256))))
(assert (= (and x18 x237) x43))
(assert (= (x282 (x277 x29)) x29))
(assert (= (or x220 x256) x18))
(assert (=> (bvuge (_ bv10000 256) x257) (= (x50 x257) (x277 x257))))
(assert (= (_ bv170435703 256) (x282 (x50 (_ bv170435703 256)))))
(assert (= x70 (and x97 x296)))
(assert (= x133 (and (not x170) x174)))
(assert (= (and (not x42) x258) x117))
(assert (= x108 (and (not x110) x52)))
(assert (=> (bvuge (_ bv10000 256) x134) (= (x277 x134) (x50 x134))))
(assert (= x233 (and (not x39) x133)))
(assert (=> (bvuge (_ bv10000 256) x29) (= (x277 x29) (x50 x29))))
(assert (=> (bvuge (_ bv10000 256) x121) (= (x277 x121) (x50 x121))))
(assert (= (x277 (_ bv3026235284 256)) (x50 (_ bv3026235284 256))))
(assert (= x84 (or x198 x142 x251 x109 x101)))
(assert (= x112 (and x147 x201)))
(assert (= x248 (and x184 x173)))
(assert (= x125 (x282 (x277 x125))))
(assert (= (x50 (_ bv1289409798 256)) (x277 (_ bv1289409798 256))))
(assert (= x28 (and x108 (not x122))))
(assert (= (x50 (_ bv2514000705 256)) (x277 (_ bv2514000705 256))))
(assert (= (x277 (_ bv1851080549 256)) (x50 (_ bv1851080549 256))))
(assert (= (and x148 (not x281)) x153))
(assert (= x17 (x282 (x277 x17))))
(assert (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (x282 (x50 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))))
(assert (= (x282 (x50 (_ bv2376452955 256))) (_ bv2376452955 256)))
(assert (= (x50 (_ bv117300739 256)) (x277 (_ bv117300739 256))))
(assert (= (x277 (_ bv1889567281 256)) (x50 (_ bv1889567281 256))))
(assert (= (x282 (x277 x134)) x134))
(assert (= (x50 (_ bv170435703 256)) (x277 (_ bv170435703 256))))
(assert (= (x50 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (x277 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))))
(assert (x62 x17))
(assert (x62 x29))
(assert (x62 x257))
(assert (= (x282 (x50 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256))) (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)))
(assert (= (x50 (_ bv1461501637330902918203684832716283019655932542975 256)) (x277 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= x174 (or (and x72 (not x163)) x49)))
(assert (=> (bvuge (_ bv10000 256) x17) (= (x277 x17) (x50 x17))))
(assert (= (x277 (_ bv3121116754 256)) (x50 (_ bv3121116754 256))))
(assert (= (x282 (x277 x121)) x121))
(assert (= (_ bv826074471 256) (x282 (x50 (_ bv826074471 256)))))
(assert (= x253 (=> (and (and (bvuge x155 (_ bv0 256)) (bvule x155 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (= (_ bv0 256) x155) x237)) (or (and x237 (= x56 x192)) (and (not x237) (and (bvule x34 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x255 (ite (or x48 x168) (_ bv1 256) (_ bv0 256))) (= (bvudiv x85 x192) x235) (= (ite (not x95) (_ bv1 256) (_ bv0 256)) x40) (bvuge x34 (_ bv0 256)) (bvult (_ bv0 256) x41) (= x95 (= (_ bv0 256) x155)) (= (bvudiv x85 x155) x191) (= (bvmul x34 x192) x85) (= x191 x56) (= (= x34 x235) x48) (= x41 (bvand x255 x40)) (= (= x192 (_ bv0 256)) x168))))) x118)))
(assert (= x145 (x282 (x277 x145))))
(assert (= x212 (=> (and (or (not x163) x163) (= (= x166 (_ bv0 256)) x163)) x218)))
(assert (= x101 (and x88 x140)))
(assert (= (and (not x266) x3) x142))
(assert (=> (bvule x114 (_ bv10000 256)) (= (x277 x114) (x50 x114))))
(assert (= (x277 (_ bv330252341 256)) (x50 (_ bv330252341 256))))
(assert (= true x258))
(assert (= (_ bv2835717307 256) (x282 (x50 (_ bv2835717307 256)))))
(assert (=> (bvule x125 (_ bv10000 256)) (= (x277 x125) (x50 x125))))
(assert (= (and x3 x266) x140))
(assert (= x109 (and x67 x199)))
(assert (= (_ bv3026235284 256) (x282 (x50 (_ bv3026235284 256)))))
(assert (= (x277 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x50 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (and x38 x146) x147))
(assert (= (_ bv599290589 256) (x282 (x50 (_ bv599290589 256)))))
(assert (= x256 (or x270 x233)))
(assert (= x227 (and x203 (not x165))))
(assert (= (and x203 x165) x251))
(assert (= (_ bv3017275065 256) (x282 (x50 (_ bv3017275065 256)))))
(assert (=> (bvule x145 (_ bv10000 256)) (= (x50 x145) (x277 x145))))
(assert (= (and (not x141) x100) x203))
(assert (= x257 (x282 (x277 x257))))
(assert (= x253 x276))
(assert (= (x277 (_ bv3017275065 256)) (x50 (_ bv3017275065 256))))
(assert (= (x277 (_ bv826074471 256)) (x50 (_ bv826074471 256))))
(assert (= (and x281 x148) x116))
(assert (= (x282 (x277 x299)) x299))
(assert (= (or (and x108 x122) x248 (and x63 x112) (and x38 (not x146)) x90 x116 (and x289 x28) (and x147 (not x201)) (and x61 x74)) x272))
(assert (x62 x145))
(assert (= (x282 (x50 (_ bv3337024914 256))) (_ bv3337024914 256)))
(assert (= x220 (and x174 x170)))
(assert (= (_ bv330252341 256) (x282 (x50 (_ bv330252341 256)))))
(assert (= (and (not x74) x61) x38))
(assert (x62 x121))
(assert (= (and (not x289) x28) x148))
(assert (= (and (not x88) x140) x67))
(assert (= (=> (and (not (= x54 (_ bv157198259 256))) (= x74 (bvslt x96 (_ bv96 256))) (= x115 x286) (bvult (_ bv0 256) x249) (= x54 (_ bv599290589 256)) (= (bvadd (bvneg (_ bv4 256)) x211) x96) (= x125 x160) (not (= (_ bv0 256) x182)) (not (= x54 (_ bv117300739 256))) (not (= (_ bv404098525 256) x54)) (= x126 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (= (_ bv100 256) x211) (= x134 x17) (= (x59 (x277 x145)) x249) (= x274 (_ bv128 256)) (bvult x54 (_ bv826074471 256)) (not (bvugt (_ bv4 256) x211))) (and (=> x74 x150) (=> (and (and (= x146 true) (= x125 x231)) (not x74)) (and (=> (not x146) x150) (=> (and (and (= x201 true) (= x217 x134)) x146) (and (=> (and (and (= x63 (bvult x45 x115)) (bvuge x45 (_ bv0 256)) (= x45 (x57 x139)) (bvule x45 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x139 (x129 (x277 x125) (x50 (_ bv1 256)) (_ bv0 256))) (= x177 x286)) x201) (and (=> (and (not x63) (= (bvult x45 x286) x184)) (and (=> (and (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x178) (= (x129 (x277 x125) (x50 (_ bv1 256)) (_ bv0 256)) x189) (= x178 (x159 x260)) (bvule (_ bv0 256) x178) (= x260 (x129 (x277 x134) (x50 (_ bv1 256)) (_ bv0 256))) (= (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg x286)) x226) (= x158 (bvadd x45 (bvneg x286))) (= x110 (bvult x226 x178))) (not x184)) (and (=> x110 x150) (=> (and (not x110) (and (= (bvugt x178 x297) x122) (= (bvadd x286 x178) x297))) (and (=> x122 x150) (=> (and (not x122) (and (= (x44 x185) x51) (= x289 (bvugt x286 x51)) (bvule (_ bv0 256) x51) (= x196 (x129 (x277 x125) (x50 (_ bv2 256)) (_ bv0 256))) (= (x129 (x277 x17) x196 (_ bv0 256)) x185) (bvule x51 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x129 (x277 x134) (x50 (_ bv1 256)) (_ bv0 256)) x19))) (and (=> (and (not x289) (= (bvugt x286 x51) x281)) (and (=> (and (not x281) (and (= x66 x76) (= (_ bv1 256) x166) (= x167 x265) (= (_ bv32 256) x254) (= (bvadd (bvneg x286) x51) x225))) x212) (=> x281 x150))) (=> x289 x150))))))) (=> x184 x150))) (=> x63 x150))) (=> (not x201) x150))))))) x94))
(assert (= (x282 (x50 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))) (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (= (_ bv1461501637330902918203684832716283019655932542975 256) (x282 (x50 (_ bv1461501637330902918203684832716283019655932542975 256)))))
(assert (= x252 (or x43 x132)))
(assert (= (=> (and (= (= x190 (_ bv0 256)) x296) (or (not x296) x296)) x187) x32))
(assert (= x270 (and x39 x133)))
(assert (= x15 (=> (and (and x37 (= x214 (x69 (x277 x145))) (bvule x167 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x172) (bvule x80 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x145 x17)) (bvule (_ bv0 256) x80) (bvule x172 (_ bv1461501637330902918203684832716283019655932542975 256)) x46 (= x17 x81) (bvule x290 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x17) (not (= (_ bv170435703 256) x93)) (bvuge x214 (_ bv0 256)) (bvule (_ bv0 256) x119) (= x234 (x59 (x277 x17))) (= (not (= x81 x36)) x37) (bvult x93 (_ bv2376452955 256)) (= x172 x35) (bvule x145 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x188) (bvuge x290 (_ bv0 256)) (= x121 x80) (bvugt x234 (_ bv0 256)) (= (_ bv1000 256) x75) (bvugt x17 (_ bv0 256)) (bvult (_ bv0 256) x145) (not (bvult x93 (_ bv170435703 256))) (= x186 (bvugt (x59 (x277 x17)) (_ bv0 256))) (= (bvule (_ bv1000 256) x264) x46) (= (x69 (x277 x17)) x68) x6 (bvuge x188 (_ bv0 256)) (bvule (_ bv0 256) x167) (bvult x93 (_ bv826074471 256)) (bvule (_ bv0 256) x68) (= (_ bv404098525 256) x93) (= x36 x121) x186 (= x238 x264) (bvule x119 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x93 (_ bv330252341 256))) (= x167 x221) (= x6 (bvult (_ bv0 256) (x59 (x277 x145))))) (and (and (bvugt (_ bv2376452955 256) x200) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x160) (not (bvult x200 (_ bv826074471 256))) (= x263 (x59 (x277 x17))) (bvule x232 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= (_ bv1289409798 256) x200)) x176 (= (_ bv1851080549 256) x200) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x224) (= x99 x47) (bvule (_ bv0 256) x79) (= x290 x224) (bvule (_ bv0 256) x232) (= x42 (= (_ bv0 256) x167)) (= (_ bv0 256) x78) (bvule x79 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x137 (_ bv0 256)) (bvuge x160 (_ bv0 256)) (= x79 x47) (bvuge x167 (_ bv0 256)) (bvult (_ bv0 256) x263) (= x137 x284) (= x176 (not (= x283 (_ bv0 256)))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x167) (= x238 x115) (not (bvugt (_ bv1289409798 256) x200)) (= x283 x221) (= x160 x121)) (or (and (not x42) (and (= x71 (= x66 (_ bv0 256))) (= x285 (= x115 (_ bv0 256))) (= (bvmul x167 x115) x120) (bvuge x66 (_ bv0 256)) (= x275 (= x229 x167)) (bvult (_ bv0 256) x11) (= x87 (bvudiv x120 x66)) (= x182 x87) (= x11 (bvand x58 x205)) (= (ite (or x285 x275) (_ bv1 256) (_ bv0 256)) x58) (= x229 (bvudiv x120 x115)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x66) (= x205 (ite (not x71) (_ bv1 256) (_ bv0 256))))) (and x42 (= x115 x182))))) x94)))
(assert (= (x282 (x50 (_ bv3121116754 256))) (_ bv3121116754 256)))
(check-sat)
(exit)