(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x73 0)) (((x366 (x353 x73) (x176 (_ BitVec 256))) (x335 (x289 (_ BitVec 256))) (x253 (x102 x73) (x114 x73) (x224 (_ BitVec 256))))))
(declare-fun x373 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x337 () x73)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x140 () (_ BitVec 256))
(declare-fun x281 () Bool)
(declare-fun x1 () (_ BitVec 256))
(declare-fun x320 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x377 () (_ BitVec 256))
(declare-fun x15 (x73) (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x311 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x234 () x73)
(declare-fun x276 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x123 () Bool)
(declare-fun x106 () x73)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x244 () x73)
(declare-fun x93 () (_ BitVec 256))
(declare-fun x261 () x73)
(declare-fun x179 () Bool)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x282 () Bool)
(declare-fun x108 () x73)
(declare-fun x19 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x390 (x73) (_ BitVec 256))
(declare-fun x339 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x375 () x73)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x110 (x73) (_ BitVec 256))
(declare-fun x380 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x315 () x73)
(declare-fun x344 () (_ BitVec 256))
(declare-fun x57 () x73)
(declare-fun x299 () Bool)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x221 () x73)
(declare-fun x405 () (_ BitVec 256))
(declare-fun x22 () x73)
(declare-fun x202 () Bool)
(declare-fun x24 (x73) (_ BitVec 256))
(declare-fun x47 () Bool)
(declare-fun x54 () Bool)
(declare-fun x2 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x340 () x73)
(declare-fun x55 () (_ BitVec 256))
(declare-fun x144 () Bool)
(declare-fun x91 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x302 () Bool)
(declare-fun x416 () Bool)
(declare-fun x23 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x402 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x364 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x388 () Bool)
(declare-fun x145 () x73)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x296 () x73)
(declare-fun x160 () x73)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x346 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x352 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x304 () (_ BitVec 256))
(declare-fun x368 () Bool)
(declare-fun x410 () x73)
(declare-fun x131 () x73)
(declare-fun x277 () (_ BitVec 256))
(declare-fun x139 () x73)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x293 () Bool)
(declare-fun x235 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x187 () x73)
(declare-fun x94 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x400 (x73) (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x379 () x73)
(declare-fun x150 (x73) (_ BitVec 256))
(declare-fun x367 () x73)
(declare-fun x331 () Bool)
(declare-fun x312 () (_ BitVec 256))
(declare-fun x34 () x73)
(declare-fun x372 () x73)
(declare-fun x287 () (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x88 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x310 () (_ BitVec 256))
(declare-fun x125 () x73)
(declare-fun x362 () x73)
(declare-fun x408 (x73) (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x394 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x365 () x73)
(declare-fun x26 (x73) (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x303 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x163 () Bool)
(declare-fun x387 () x73)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x291 () (_ BitVec 256))
(declare-fun x333 () x73)
(declare-fun x147 () x73)
(declare-fun x138 () x73)
(declare-fun x406 () (_ BitVec 256))
(declare-fun x325 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x409 () (_ BitVec 256))
(declare-fun x297 () x73)
(declare-fun x247 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x208 () x73)
(declare-fun x336 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x182 () x73)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x290 (x73) (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x196 () x73)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x40 () x73)
(declare-fun x242 () Bool)
(declare-fun x3 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x354 () Bool)
(declare-fun x198 () x73)
(declare-fun x317 () x73)
(declare-fun x399 () Bool)
(declare-fun x414 () x73)
(declare-fun x228 () (_ BitVec 256))
(declare-fun x252 () Bool)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x137 () Bool)
(declare-fun x324 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x239 (x73) (_ BitVec 256))
(declare-fun x356 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x37 (x73) (_ BitVec 256))
(declare-fun x330 () x73)
(declare-fun x260 () Bool)
(declare-fun x119 () x73)
(declare-fun x308 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x374 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x322 () Bool)
(declare-fun x199 () x73)
(declare-fun x262 () x73)
(declare-fun x46 () Bool)
(declare-fun x136 () x73)
(declare-fun x113 () Bool)
(declare-fun x371 () Bool)
(declare-fun x370 () Bool)
(declare-fun x95 () Bool)
(declare-fun x318 () x73)
(declare-fun x412 () x73)
(declare-fun x28 () x73)
(declare-fun x154 () Bool)
(declare-fun x391 () (_ BitVec 256))
(declare-fun x316 () (_ BitVec 256))
(declare-fun x27 () x73)
(declare-fun x169 () x73)
(declare-fun x363 () (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x392 () (_ BitVec 256))
(declare-fun x415 () (_ BitVec 256))
(declare-fun x398 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x241 () (_ BitVec 256))
(declare-fun x52 () x73)
(declare-fun x321 () x73)
(declare-fun x223 () Bool)
(declare-fun x68 () x73)
(declare-fun x285 () x73)
(declare-fun x305 () Bool)
(declare-fun x389 () Bool)
(declare-fun x13 () x73)
(declare-fun x212 () Bool)
(declare-fun x51 () Bool)
(declare-fun x393 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x403 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x413 () (_ BitVec 256))
(declare-fun x343 () Bool)
(declare-fun x41 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x211 () x73)
(declare-fun x248 () x73)
(declare-fun x64 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x334 () Bool)
(declare-fun x5 (x73) (_ BitVec 256))
(declare-fun x395 () (_ BitVec 256))
(declare-fun x382 () (_ BitVec 256))
(declare-fun x332 () x73)
(declare-fun x65 () x73)
(declare-fun x157 () (_ BitVec 256))
(declare-fun x360 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x165 () Bool)
(declare-fun x191 () Bool)
(declare-fun x278 () x73)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x265 () Bool)
(declare-fun x112 () x73)
(declare-fun x175 () Bool)
(declare-fun x361 () x73)
(declare-fun x115 () Bool)
(declare-fun x74 () Bool)
(declare-fun x205 () Bool)
(declare-fun x256 () (_ BitVec 256))
(declare-fun x222 () x73)
(declare-fun x328 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x347 () Bool)
(declare-fun x29 () x73)
(declare-fun x386 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x178 () x73)
(declare-fun x120 () x73)
(declare-fun x314 () (_ BitVec 256))
(declare-fun x181 () x73)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x349 () Bool)
(declare-fun x257 () Bool)
(declare-fun x397 ((_ BitVec 256)) x73)
(declare-fun x226 (x73) (_ BitVec 256))
(declare-fun x220 () x73)
(declare-fun x38 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x143 () x73)
(declare-fun x82 () x73)
(declare-fun x53 () x73)
(declare-fun x348 () (_ BitVec 256))
(declare-fun x99 () x73)
(declare-fun x78 () x73)
(declare-fun x121 () x73)
(declare-fun x338 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x284 () x73)
(declare-fun x79 () x73)
(declare-fun x258 (x73) (_ BitVec 256))
(declare-fun x230 () x73)
(declare-fun x127 () (_ BitVec 256))
(declare-fun x351 () x73)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x97 () x73)
(declare-fun x45 () Bool)
(declare-fun x378 () Bool)
(declare-fun x341 (x73) (_ BitVec 256))
(declare-fun x319 () (_ BitVec 256))
(declare-fun x376 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x288 () Bool)
(declare-fun x280 () x73)
(declare-fun x174 () (_ BitVec 256))
(declare-fun x401 () Bool)
(declare-fun x118 () (_ BitVec 256))
(declare-fun x184 () x73)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x135 () x73)
(declare-fun x313 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x186 () x73)
(declare-fun x286 () Bool)
(declare-fun x404 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x177 () Bool)
(declare-fun x101 () x73)
(declare-fun x407 () x73)
(declare-fun x77 () (_ BitVec 256))
(declare-fun x238 () x73)
(declare-fun x44 (x73) (_ BitVec 256))
(declare-fun x355 () (_ BitVec 256))
(declare-fun x327 () x73)
(declare-fun x188 () x73)
(declare-fun x283 () Bool)
(declare-fun x122 () x73)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x214 () x73)
(declare-fun x168 () Bool)
(declare-fun x250 () Bool)
(declare-fun x292 () x73)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x189 () Bool)
(declare-fun x264 () Bool)
(declare-fun x158 () Bool)
(declare-fun x92 () x73)
(declare-fun x85 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x329 () (_ BitVec 256))
(declare-fun x269 () Bool)
(declare-fun x396 () (_ BitVec 256))
(declare-fun x130 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x134 () x73)
(declare-fun x358 () Bool)
(declare-fun x350 () (_ BitVec 256))
(declare-fun x342 () x73)
(declare-fun x180 () Bool)
(declare-fun x25 () Bool)
(declare-fun x357 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x326 () (_ BitVec 256))
(declare-fun x246 (x73) (_ BitVec 256))
(declare-fun x104 () x73)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x385 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x204 () x73)
(declare-fun x245 (x73) (_ BitVec 256))
(declare-fun x384 () (_ BitVec 256))
(declare-fun x383 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x359 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x307 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x323 () x73)
(declare-fun x21 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x411 () x73)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x270 () x73)
(declare-fun x301 () x73)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x306 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x129 () x73)
(declare-fun x197 () Bool)
(define-fun x255 ((x73 x73) (x273 (_ BitVec 256))) x73 (ite ((_ is x366) x73) (x366 (x353 x73) (bvadd x273 (x176 x73))) (ite ((_ is x253) x73) (x253 (x102 x73) (x114 x73) (bvadd (x224 x73) x273)) (x335 (bvadd x273 (x289 x73))))))
(define-fun x70 ((x345 (_ BitVec 256)) (x381 (_ BitVec 256))) Bool (= (bvudiv (bvmul x345 x381) x381) x345))
(define-fun x268 ((x345 (_ BitVec 256)) (x381 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x345 x381) x381) x345))
(define-fun x309 ((x345 (_ BitVec 256)) (x381 (_ BitVec 256))) Bool (= x345 (bvsdiv (bvmul x345 x381) x381)))
(define-fun x87 ((x146 x73)) (_ BitVec 256) (ite (= x208 x146) x7 (x226 x146)))
(define-fun x173 ((x146 x73)) (_ BitVec 256) (ite (= x146 x198) x100 (x24 x146)))
(define-fun x195 ((x146 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x146) (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256) (x130 x146)))
(define-fun x233 ((x146 (_ BitVec 256))) (_ BitVec 256) (ite (= x146 (_ bv132 256)) x249 (x195 x146)))
(define-fun x369 ((x146 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x146) x140 (x233 x146)))
(define-fun x126 ((x146 x73)) (_ BitVec 256) (ite (= x121 x146) x10 (x44 x146)))
(define-fun x32 ((x146 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x146) (_ bv1 256) (x398 x146)))
(define-fun x117 ((x146 x73)) (_ BitVec 256) (ite (= x146 x323) x91 (x26 x146)))
(define-fun x294 ((x146 (_ BitVec 256))) (_ BitVec 256) (ite (= x146 (_ bv0 256)) (_ bv1 256) (x398 x146)))
(define-fun x132 ((x300 (_ BitVec 256))) Bool (=> (and (not (= x300 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (= x300 (_ bv3265688288 256))) (not (= x300 (_ bv3569331386 256))) (not (= (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256) x300)) (not (= (_ bv544138160 256) x300)) (not (= x300 (_ bv2172364862 256))) (not (= x300 (_ bv1013646637 256))) (not (= (_ bv616825448 256) x300)) (not (= (_ bv1889567281 256) x300)) (not (= x300 (_ bv2835717307 256))) (not (= (_ bv1086394137 256) x300)) (not (= x300 (_ bv2514000705 256))) (not (= x300 (_ bv2646777772 256))) (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x300)) (bvugt x300 (_ bv10000 256)) (not (= (_ bv1461501637330902918203684832716283019655932542976 256) x300)) (not (= x300 (_ bv529866654 256))) (not (= x300 (_ bv1000000000000000000 256)))) (not ((_ is x335) (x397 x300)))))
(assert (= (bvadd (x150 x375) (_ bv3 256)) (x150 (x255 x375 (_ bv3 256)))))
(assert (= x191 (and x371 (not x250))))
(assert (x132 x193))
(assert (x132 x58))
(assert (= (x150 (x397 x382)) x382))
(assert (not x74))
(assert (= (_ bv1000000000000000000 256) (x150 (x335 (_ bv1000000000000000000 256)))))
(assert (= (x397 (_ bv3569331386 256)) (x335 (_ bv3569331386 256))))
(assert (= (and (not x281) x378) x371))
(assert (= (x150 (x397 x313)) x313))
(assert (x132 x107))
(assert (=> (bvule x89 (_ bv10000 256)) (= (x335 x89) (x397 x89))))
(assert (= (or x399 (and x324 (not x358))) x242))
(assert (= (x150 (x397 x355)) x355))
(assert (= x189 (and x212 (not x163))))
(assert (=> (bvule x406 (_ bv10000 256)) (= (x397 x406) (x335 x406))))
(assert (= x264 (or x223 x368)))
(assert (= x247 (and x236 x111)))
(assert (= (bvadd (_ bv4 256) (x150 x106)) (x150 (x255 x106 (_ bv4 256)))))
(assert (= x165 true))
(assert (= (x335 (_ bv2514000705 256)) (x397 (_ bv2514000705 256))))
(assert (= (x397 (_ bv1086394137 256)) (x335 (_ bv1086394137 256))))
(assert (x132 x308))
(assert (x132 x64))
(assert (= (bvadd (x150 x270) (_ bv4 256)) (x150 (x255 x270 (_ bv4 256)))))
(assert (= x60 (x150 (x397 x60))))
(assert (= (_ bv3569331386 256) (x150 (x335 (_ bv3569331386 256)))))
(assert (x132 x355))
(assert (= (x150 (x255 x22 (_ bv4 256))) (bvadd (_ bv4 256) (x150 x22))))
(assert (=> (bvuge (_ bv10000 256) x241) (= (x335 x241) (x397 x241))))
(assert (x132 x383))
(assert (= (_ bv2514000705 256) (x150 (x335 (_ bv2514000705 256)))))
(assert (= (x150 (x255 x262 (_ bv4 256))) (bvadd (x150 x262) (_ bv4 256))))
(assert (= (x150 (x397 x75)) x75))
(assert (x132 x71))
(assert (= (bvadd (x150 x297) (_ bv1 256)) (x150 (x255 x297 (_ bv1 256)))))
(assert (= (x397 (_ bv1889567281 256)) (x335 (_ bv1889567281 256))))
(assert (x132 x161))
(assert (= (or (and (not x299) x165) x242) x212))
(assert (= x287 (x150 (x397 x287))))
(assert (=> (bvule x271 (_ bv10000 256)) (= (x397 x271) (x335 x271))))
(assert (x132 x313))
(assert (x132 x406))
(assert (x132 x394))
(assert (= x74 (=> (and (and (bvule x50 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x39 x166) (= x404 (_ bv0 256)) (= x350 x61) (= x185 x50) (= x76 x348) (= x249 x328) (bvule x328 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x320) (bvule (_ bv0 256) x39) (= x308 x304) (= x140 x152) (bvult (_ bv0 256) x279) (bvugt (_ bv3569331386 256) x352) (bvuge x274 (_ bv0 256)) (not (bvult x35 (_ bv4 256))) (bvsgt x35 (_ bv67 256)) (not (= (_ bv2 256) x20)) (= x76 (_ bv0 256)) (bvule x20 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x308 x263) (not (bvsgt (_ bv64 256) x393)) x202 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x274) (not (bvugt (_ bv3265688288 256) x352)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x308) (not (bvugt (_ bv2172364862 256) x352)) (= (not (= (_ bv0 256) x291)) x202) (= x279 (x290 (x397 x344))) (= x274 x249) (bvule x320 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (bvadd (bvneg (_ bv4 256)) x35) x393) (bvule (_ bv0 256) x328) (bvule (_ bv0 256) x20) (= x166 x336) (= x259 x140) (= x299 (bvugt x210 (_ bv0 256))) (= (x5 x136) x210) (bvule x39 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x352 (_ bv3265688288 256)) (= (x253 (x397 x308) (x335 (_ bv3 256)) (_ bv0 256)) x136) (bvule (_ bv0 256) x50)) (and (= x161 x200) (= x334 false) x401 (bvult x272 (_ bv1013646637 256)) (= x104 (x253 (x397 x406) x68 (_ bv0 256))) (= (ite x305 (_ bv1 256) (_ bv0 256)) x291) (= x68 (x255 x278 (_ bv1 256))) (= x203 false) (bvule x42 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x344) (bvugt x344 (_ bv0 256)) (= x34 (x253 (x397 x161) (x335 (_ bv4 256)) (_ bv0 256))) (bvuge x72 (_ bv0 256)) (bvugt x241 (_ bv0 256)) (= (bvult (_ bv0 256) (x290 (x397 x241))) x401) (= (x408 (x397 x344)) x72) (bvult (_ bv0 256) x148) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x396) (= (bvugt (x290 (x397 x396)) (_ bv0 256)) x46) (= x193 x77) (= (x253 (x397 x193) x34 (_ bv0 256)) x278) (bvule (_ bv0 256) x83) (bvule x193 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvugt x396 (_ bv0 256)) (bvule x77 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x157) x46 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x200) (not (= (_ bv529866654 256) x272)) (bvule x161 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x213 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x290 (x397 x344)) x148) (= x213 x406) (bvuge x77 (_ bv0 256)) (not (= x344 x241)) x197 (= (not (= x42 (_ bv0 256))) x257) (bvuge (_ bv255 256) x14) (not (= x344 x396)) (= x98 (x408 (x397 x396))) (bvule (_ bv0 256) x14) (= x83 (x408 (x397 x241))) (= (not x257) x21) (= x228 (_ bv3265688288 256)) (bvuge x157 (_ bv0 256)) (not (= (_ bv544138160 256) x272)) (= x272 (_ bv616825448 256)) (bvuge x42 (_ bv0 256)) (bvugt (_ bv2172364862 256) x272) (bvuge x200 (_ bv0 256)) (= x305 (not x21)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x241) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x406) (= (_ bv2 256) x403) (= x252 false) (= x11 false) (not (= x241 x396)) (= (x400 x104) x42) (bvuge x213 (_ bv0 256)) (bvule (_ bv0 256) x98) (= (bvugt (x290 (x397 x344)) (_ bv0 256)) x197) (not (bvugt (_ bv529866654 256) x272)))) (and (=> (and x299 (and (= x75 (x239 x119)) (= x358 (bvugt x118 (_ bv0 256))) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308) x271) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x75) (= x275 (x5 x79)) (bvugt (_ bv1461501637330902918203684832716283019655932542976 256) x75) (= (x253 (x397 x271) (x335 (_ bv4 256)) (_ bv0 256)) x186) (= (x341 x292) x118) (= x57 x119) (= x79 (x253 (x397 x16) (x335 (_ bv3 256)) (_ bv0 256))) (= (x253 (x397 x75) x186 (_ bv0 256)) x292) (bvule (_ bv0 256) x75) (bvult (_ bv0 256) x275) (= x9 (_ bv0 256)) (= (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256)) x16) (= (x366 x79 (_ bv0 256)) x57))) (and (=> (and (and (= x318 (x253 (x397 x75) x147 (_ bv0 256))) (= x338 (x258 x301)) (= x147 (x253 (x397 x183) (x335 (_ bv4 256)) (_ bv0 256))) (= x301 (x253 (x397 x217) (x335 (_ bv8 256)) (_ bv0 256))) (= (x37 x187) x325) (bvule (_ bv0 256) x338) (= (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256)) x183) (bvult x325 (_ bv1461501637330902918203684832716283019655932542976 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x325) (bvult (_ bv0 256) x103) (= x236 (= x338 (_ bv0 256))) (= x321 (x366 x318 (_ bv0 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x338) (= x217 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvuge x325 (_ bv0 256)) (= x103 (x341 x318)) (= x187 x321)) x358) (and (=> (and (not x236) (and (and (= x306 (ite (bvugt x201 x61) x350 x201)) (= x218 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308)) (bvule (_ bv0 256) x48) (= (x258 x342) x314) (bvuge x201 (_ bv0 256)) (= x127 (bvadd (bvneg x151) x306)) (= (x255 x134 (_ bv2 256)) x317) (= (x253 (x397 x75) x97 (_ bv0 256)) x135) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x201) (bvuge x151 (_ bv0 256)) (= x201 (x390 x178)) (ite x30 x30 (= (bvudiv x162 x127) x48)) (bvule x151 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x178 (x255 x135 (_ bv1 256))) (= (x253 (x397 x325) x327 (_ bv0 256)) x131) (= (= x127 (_ bv0 256)) x30) (bvule x314 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x372 (x253 (x397 x325) x160 (_ bv0 256))) (= x342 (x253 (x397 x355) (x335 (_ bv8 256)) (_ bv0 256))) (= x129 (x253 (x397 x75) x131 (_ bv0 256))) (= x343 (= x162 (_ bv0 256))) (= (x253 (x397 x60) (x335 (_ bv2 256)) (_ bv0 256)) x108) (not (= x314 (_ bv0 256))) (bvule (_ bv0 256) x314) (= (x253 (x397 x325) x108 (_ bv0 256)) x97) (bvule x48 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (bvmul x48 x127) x162) (= x112 (x255 x129 (_ bv3 256))) (= x327 (x253 (x397 x218) (x335 (_ bv2 256)) (_ bv0 256))) (= x60 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308)) (= x355 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (bvugt x151 x306)) (= (x245 x317) x48) (= (x24 x112) x151) (= x160 (x253 (x397 x12) (x335 (_ bv2 256)) (_ bv0 256))) (= (x253 (x397 x75) x372 (_ bv0 256)) x134) (= x12 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308))) (or (and (and (= (bvudiv x359 x314) x266) (x70 x162 (_ bv1000000000000000000 256)) (= x86 x266) (= (bvmul x162 (_ bv1000000000000000000 256)) x359)) (not x343)) (and (= (_ bv0 256) x86) x343)))) x269) (=> (and x236 (and (= x262 (x253 (x397 x75) x248 (_ bv0 256))) (= x169 (x255 x262 (_ bv4 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x93) (= x387 (x253 (x397 x156) (x335 (_ bv2 256)) (_ bv0 256))) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308) x156) (bvule (_ bv0 256) x93) (= x93 (x226 x169)) (= x93 x7) (= (x253 (x397 x325) x387 (_ bv0 256)) x248))) x307))) (=> (not x358) x144))) (=> (not x299) x85)))))
(assert (=> (bvuge (_ bv10000 256) x217) (= (x335 x217) (x397 x217))))
(assert (x132 x217))
(assert (= x2 (and (not x113) x67)))
(assert (=> (bvuge (_ bv10000 256) x12) (= (x397 x12) (x335 x12))))
(assert (= (=> (and (= x229 x3) (= x66 (_ bv0 256))) x116) x177))
(assert (x132 x215))
(assert (=> (bvule x355 (_ bv10000 256)) (= (x397 x355) (x335 x355))))
(assert (= x95 (or (and x378 x281) (and x371 x250) (and x265 (not x23)) (and x346 x192))))
(assert (= (x150 (x255 x278 (_ bv1 256))) (bvadd (x150 x278) (_ bv1 256))))
(assert (= (or x247 x302) x172))
(assert (=> (bvule x183 (_ bv10000 256)) (= (x397 x183) (x335 x183))))
(assert (=> (bvuge (_ bv10000 256) x218) (= (x397 x218) (x335 x218))))
(assert (= (and x165 x299) x324))
(assert (= (x150 (x397 x55)) x55))
(assert (=> (bvule x344 (_ bv10000 256)) (= (x335 x344) (x397 x344))))
(assert (= (x335 (_ bv1461501637330902918203684832716283019655932542976 256)) (x397 (_ bv1461501637330902918203684832716283019655932542976 256))))
(assert (= (=> (and (= x207 x231) (= x413 x164)) x49) x47))
(assert (x132 x249))
(assert (= (x150 (x335 (_ bv616825448 256))) (_ bv616825448 256)))
(assert (= (x335 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)) (x397 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256))))
(assert (x132 x59))
(assert (=> (bvuge (_ bv10000 256) x60) (= (x397 x60) (x335 x60))))
(assert (x132 x156))
(assert (= (and x331 x189) x347))
(assert (= x25 (=> (and (= (x253 (x397 x380) (x335 (_ bv4 256)) (_ bv0 256)) x221) (= x380 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (not (bvult (_ bv1 256) x4)) x168) (= (x341 x145) x4) (= x145 (x253 (x397 x75) x221 (_ bv0 256)))) (and x144 x168))))
(assert (= x218 (x150 (x397 x218))))
(assert (x132 x344))
(assert (= (=> (and (or x54 (not x54)) (= (= (_ bv0 256) x207) x54)) x293) x49))
(assert (= x293 (=> (and (and (= x356 (not x416)) (= x243 (_ bv616825448 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x194) (not (= (_ bv544138160 256) x243)) (= x254 (ite x175 (_ bv1 256) (_ bv0 256))) (= x65 (x255 x196 (_ bv1 256))) (bvult x243 (_ bv1013646637 256)) (bvule (_ bv0 256) x56) (bvult x243 (_ bv2172364862 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x415) (bvugt x6 (_ bv0 256)) (= x340 (x253 (x397 x71) (x335 (_ bv4 256)) (_ bv0 256))) (= (not x356) x175) (= x71 x200) (not (bvult x243 (_ bv529866654 256))) (= x213 x194) (bvule x56 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= (_ bv529866654 256) x243)) (= x415 x77) (not (= (_ bv0 256) x207)) (= x416 (not (= (_ bv0 256) x56))) (= x196 (x253 (x397 x415) x340 (_ bv0 256))) (= x56 (x400 x78)) (= (x290 (x397 x344)) x6) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x71) (= x78 (x253 (x397 x194) x65 (_ bv0 256))) (not (bvsgt (_ bv32 256) x413))) (= x322 (not (= (_ bv0 256) x254)))) x322)))
(assert (= (x150 (x397 x71)) x71))
(assert (= (x150 (x335 (_ bv2172364862 256))) (_ bv2172364862 256)))
(assert (= (x150 (x397 x386)) x386))
(assert (x132 x133))
(assert (=> (bvuge (_ bv10000 256) x55) (= (x335 x55) (x397 x55))))
(assert (= (x150 (x255 x244 (_ bv1 256))) (bvadd (_ bv1 256) (x150 x244))))
(assert (= x399 (or x51 (and x172 x303))))
(assert (= (x150 (x397 x344)) x344))
(assert (x132 x89))
(assert (= (and x282 (not x343)) x123))
(assert (= (x150 (x397 x360)) x360))
(assert (= (x335 (_ bv1461501637330902918203684832716283019655932542975 256)) (x397 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= x85 (=> (and (= x64 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x219) (= x120 (x253 (x397 x394) (x335 (_ bv9 256)) (_ bv0 256))) (= (x253 (x397 x249) x120 (_ bv0 256)) x222) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308) x267) (bvuge x219 (_ bv0 256)) (bvugt x259 (_ bv0 256)) (not (= x363 (_ bv0 256))) (not (bvugt x259 x219)) (= (x253 (x397 x64) (x335 (_ bv8 256)) (_ bv0 256)) x184) (= x298 (bvadd (bvneg x140) x219)) (bvuge x90 (_ bv0 256)) (= (x258 x184) x90) (= (bvadd (bvneg x140) x90) x81) (= x219 (x110 x222)) (not (bvugt x259 x90)) (= x287 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256)) x159) (bvule x90 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x394 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (_ bv128 256) x170) (= (= x241 x287) x163) (= x363 (x290 (x397 x287)))) (and (=> (and (not x163) (and (= x331 (= x287 x396)) (and x331 (and (= (_ bv68 256) x153) (not (= x402 (_ bv1889567281 256))) (= x259 x63) (not (= (_ bv2514000705 256) x402)) (not (= x402 (_ bv1086394137 256))) (not (= (_ bv2646777772 256) x402)) (= x374 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)) (not (bvugt (_ bv1086394137 256) x402)) (= (_ bv2835717307 256) x402) (= (bvslt x277 (_ bv64 256)) x154) (not (bvugt (_ bv4 256) x153)) (= x36 (x290 (x397 x396))) (= x153 (_ bv68 256)) (= x277 (bvadd x153 (bvneg (_ bv4 256)))) (= x109 x274) (bvugt x36 (_ bv0 256)))))) (and (=> (and (not x154) (and (= (= x155 x274) x260) (= x155 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x274)))) (and (=> (and x260 (and (= x113 (bvult x392 x259)) (= (x253 (x397 x344) (x335 (_ bv1 256)) (_ bv0 256)) x28) (= x1 x63) (bvule x392 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x392 (x26 x28)) (bvule (_ bv0 256) x392))) (and (=> (and (and (= x339 (bvugt x376 x84)) (= x376 (x117 x280)) (= x323 (x253 (x397 x344) (x335 (_ bv1 256)) (_ bv0 256))) (= (x253 (x397 x360) (x335 (_ bv1 256)) (_ bv0 256)) x280) (= x84 (bvadd x63 x376)) (bvuge x376 (_ bv0 256)) (= (bvand x109 (_ bv1461501637330902918203684832716283019655932542975 256)) x360) (bvule x376 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x91 (bvadd (bvneg x63) x392))) (not x113)) (and (=> (and (and (= x231 (_ bv1 256)) (= (bvand x109 (_ bv1461501637330902918203684832716283019655932542975 256)) x235) (= (_ bv32 256) x164)) (not x339)) x47) (=> x339 x158))) (=> x113 x158))) (=> (not x260) x158))) (=> x154 x158))) (=> (and (and (= (_ bv68 256) x409) (not (= x329 (_ bv1889567281 256))) (= x329 (_ bv2835717307 256)) (= (_ bv68 256) x409) (= x274 x256) (not (= (_ bv2514000705 256) x329)) (= (bvsgt (_ bv64 256) x405) x346) (= (bvadd x409 (bvneg (_ bv4 256))) x405) (not (= (_ bv2646777772 256) x329)) (bvult (_ bv0 256) x391) (not (bvugt (_ bv4 256) x409)) (= x259 x373) (= x391 (x290 (x397 x241))) (not (bvult x329 (_ bv1086394137 256))) (not (= x329 (_ bv1086394137 256))) (= x43 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256))) x163) (and (=> (and (and (= x23 (= x274 x80)) (= x80 (bvand x274 (_ bv1461501637330902918203684832716283019655932542975 256)))) (not x346)) (and (=> (and (and (= x234 (x253 (x397 x344) (x335 (_ bv1 256)) (_ bv0 256))) (= (bvult x385 x259) x281) (= x373 x128) (bvule (_ bv0 256) x385) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x385) (= x385 (x44 x234))) x23) (and (=> x281 x177) (=> (and (and (= x133 (bvand x256 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvule x227 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x253 (x397 x344) (x335 (_ bv1 256)) (_ bv0 256)) x121) (= (x126 x261) x227) (= (bvult x237 x227) x250) (= (bvadd (bvneg x373) x385) x10) (bvule (_ bv0 256) x227) (= x237 (bvadd x227 x373)) (= x261 (x253 (x397 x133) (x335 (_ bv1 256)) (_ bv0 256)))) (not x281)) (and (=> x250 x177) (=> (and (not x250) (and (= x3 (_ bv32 256)) (= x66 (_ bv1 256)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x256) x377))) x116))))) (=> (not x23) x177))) (=> x346 x177)))))))
(assert (= (and x192 (not x346)) x265))
(assert (= (and x172 (not x303)) x283))
(assert (x132 x183))
(assert (= (x150 (x397 x308)) x308))
(assert (=> (bvule x64 (_ bv10000 256)) (= (x397 x64) (x335 x64))))
(assert (= x192 (and x163 x212)))
(assert (= (x397 (_ bv2172364862 256)) (x335 (_ bv2172364862 256))))
(assert (= (x150 (x397 x310)) x310))
(assert (= (and x282 x343) x205))
(assert (= x394 (x150 (x397 x394))))
(assert (= (or x354 x264) x45))
(assert (x132 x360))
(assert (=> (bvuge (_ bv10000 256) x107) (= (x397 x107) (x335 x107))))
(assert (= x415 (x150 (x397 x415))))
(assert (=> (bvule x161 (_ bv10000 256)) (= (x335 x161) (x397 x161))))
(assert (= (or x191 x95) x354))
(assert (= x249 (x150 (x397 x249))))
(assert (=> (bvuge (_ bv10000 256) x310) (= (x335 x310) (x397 x310))))
(assert (= (_ bv544138160 256) (x150 (x335 (_ bv544138160 256)))))
(assert (= (x397 (_ bv2835717307 256)) (x335 (_ bv2835717307 256))))
(assert (= (x150 (x397 x271)) x271))
(assert (= (x150 (x255 x196 (_ bv1 256))) (bvadd (x150 x196) (_ bv1 256))))
(assert (x132 x386))
(assert (= x194 (x150 (x397 x194))))
(assert (=> (bvule x360 (_ bv10000 256)) (= (x397 x360) (x335 x360))))
(assert (= x223 (or (and (not x260) x349) (and x339 x2) (and x67 x113) (and x154 x347))))
(assert (= x17 (x150 (x397 x17))))
(assert (= x383 (x150 (x397 x383))))
(assert (x132 x55))
(assert (=> (bvule x287 (_ bv10000 256)) (= (x397 x287) (x335 x287))))
(assert (= (bvadd (x150 x134) (_ bv2 256)) (x150 (x255 x134 (_ bv2 256)))))
(assert (= (_ bv1461501637330902918203684832716283019655932542975 256) (x150 (x335 (_ bv1461501637330902918203684832716283019655932542975 256)))))
(assert (x132 x12))
(assert (=> (bvuge (_ bv10000 256) x382) (= (x397 x382) (x335 x382))))
(assert (x132 x310))
(assert (=> (bvuge (_ bv10000 256) x75) (= (x397 x75) (x335 x75))))
(assert (=> (bvule x386 (_ bv10000 256)) (= (x335 x386) (x397 x386))))
(assert (= (=> (and (bvuge x225 (_ bv0 256)) (= x198 (x255 x333 (_ bv3 256))) (= x208 (x255 x270 (_ bv4 256))) (= x211 (x253 (x397 x325) x414 (_ bv0 256))) (= (x255 x244 (_ bv1 256)) x410) (= x225 (x390 x410)) (= (= (_ bv0 256) x249) x303) (= (x253 (x397 x325) x351 (_ bv0 256)) x367) (= (x253 (x397 x75) x367 (_ bv0 256)) x270) (= x244 (x253 (x397 x75) x214 (_ bv0 256))) (= x284 (x253 (x397 x310) (x335 (_ bv2 256)) (_ bv0 256))) (= (x253 (x397 x59) (x335 (_ bv2 256)) (_ bv0 256)) x351) (= (ite (bvugt x225 x61) x350 x225) x100) (= (x253 (x397 x89) (x335 (_ bv2 256)) (_ bv0 256)) x414) (= (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256)) x89) (= x310 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x214 (x253 (x397 x325) x284 (_ bv0 256))) (= x59 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x225) (= (x253 (x397 x75) x211 (_ bv0 256)) x333)) (and (=> (and (not x303) (and (bvule x94 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x206) (= (x246 x101) x206) (= (x253 (x397 x325) x220 (_ bv0 256)) x199) (= (= x94 (_ bv0 256)) x149) (= x94 (x258 x230)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x167) (bvule (_ bv0 256) x167) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x206) (= (x253 (x397 x325) x181 (_ bv0 256)) x332) (= x101 (x253 (x397 x75) x82 (_ bv0 256))) (= x285 (x253 (x397 x75) x143 (_ bv0 256))) (= x316 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvuge x94 (_ bv0 256)) (= (x253 (x397 x58) (x335 (_ bv7 256)) (_ bv0 256)) x181) (= x313 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x82 (x253 (x397 x249) x199 (_ bv0 256))) (= (x253 (x397 x313) (x335 (_ bv6 256)) (_ bv0 256)) x220) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308) x58) (= (x15 x285) x167) (= (x253 (x397 x249) x332 (_ bv0 256)) x143) (= (x253 (x397 x316) (x335 (_ bv8 256)) (_ bv0 256)) x230))) (and (=> (and (and (or (and (= x62 (_ bv0 256)) x286) (and (not x286) (and (x70 x295 (_ bv1000000000000000000 256)) (= x31 (bvudiv x326 x174)) (= x31 x62) (= x326 (bvmul (_ bv1000000000000000000 256) x295))))) (and (= (x245 x361) x96) (bvule (_ bv0 256) x96) (= x33 (x173 x122)) (bvuge x33 (_ bv0 256)) (= (x253 (x397 x55) (x335 (_ bv2 256)) (_ bv0 256)) x53) (bvule (_ bv0 256) x171) (= (x253 (x397 x75) x52 (_ bv0 256)) x375) (= x382 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x297 (x253 (x397 x75) x337 (_ bv0 256))) (= (x258 x296) x174) (bvuge x174 (_ bv0 256)) (bvule x96 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (bvult x124 x33)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308) x319) (= (x255 x375 (_ bv3 256)) x122) (= x55 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308)) (= x296 (x253 (x397 x319) (x335 (_ bv8 256)) (_ bv0 256))) (= x19 (= (_ bv0 256) x384)) (= x107 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (bvadd (bvneg x33) x124) x384) (= x171 (x390 x204)) (= x27 (x253 (x397 x382) (x335 (_ bv2 256)) (_ bv0 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x171) (= x361 (x255 x29 (_ bv2 256))) (= (x253 (x397 x325) x53 (_ bv0 256)) x337) (= (= x295 (_ bv0 256)) x286) (= x29 (x253 (x397 x75) x139 (_ bv0 256))) (= x295 (bvmul x96 x384)) (= (x253 (x397 x325) x27 (_ bv0 256)) x52) (= (ite (bvugt x171 x61) x350 x171) x124) (ite x19 x19 (= x96 (bvudiv x295 x384))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x174) (= x139 (x253 (x397 x325) x407 (_ bv0 256))) (= x407 (x253 (x397 x107) (x335 (_ bv2 256)) (_ bv0 256))) (bvule x33 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x255 x297 (_ bv1 256)) x204) (not (= x174 (_ bv0 256))))) (not x149)) x388) (=> (and x149 (and (bvule (_ bv0 256) x41) (= x41 (x87 x182)) (= x41 x312) (= (x253 (x397 x386) (x335 (_ bv2 256)) (_ bv0 256)) x188) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308) x386) (= x330 (x253 (x397 x325) x188 (_ bv0 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x41) (= (x253 (x397 x75) x330 (_ bv0 256)) x106) (= (x255 x106 (_ bv4 256)) x182))) x180))) (=> x303 x25))) x307))
(assert (= (_ bv1086394137 256) (x150 (x335 (_ bv1086394137 256)))))
(assert (= (x397 (_ bv2646777772 256)) (x335 (_ bv2646777772 256))))
(assert (=> (bvuge (_ bv10000 256) x156) (= (x397 x156) (x335 x156))))
(assert (=> (bvuge (_ bv10000 256) x415) (= (x397 x415) (x335 x415))))
(assert (=> (bvule x16 (_ bv10000 256)) (= (x335 x16) (x397 x16))))
(assert (= x183 (x150 (x397 x183))))
(assert (= (_ bv2835717307 256) (x150 (x335 (_ bv2835717307 256)))))
(assert (= (x150 (x397 x215)) x215))
(assert (=> (bvule x249 (_ bv10000 256)) (= (x335 x249) (x397 x249))))
(assert (= (and x265 x23) x378))
(assert (= (x150 (x397 x16)) x16))
(assert (= (x397 (_ bv544138160 256)) (x335 (_ bv544138160 256))))
(assert (= x380 (x150 (x397 x380))))
(assert (= x302 (or x123 x205)))
(assert (= (and (not x286) x137) x88))
(assert (= x12 (x150 (x397 x12))))
(assert (= (x150 (x255 x129 (_ bv3 256))) (bvadd (_ bv3 256) (x150 x129))))
(assert (= x161 (x150 (x397 x161))))
(assert (=> (bvule x58 (_ bv10000 256)) (= (x397 x58) (x335 x58))))
(assert (= (x397 (_ bv616825448 256)) (x335 (_ bv616825448 256))))
(assert (= (x150 (x335 (_ bv1461501637330902918203684832716283019655932542976 256))) (_ bv1461501637330902918203684832716283019655932542976 256)))
(assert (= (bvadd (_ bv1 256) (x150 x135)) (x150 (x255 x135 (_ bv1 256)))))
(assert (=> (bvule x394 (_ bv10000 256)) (= (x335 x394) (x397 x394))))
(assert (x132 x75))
(assert (=> (bvuge (_ bv10000 256) x69) (= (x397 x69) (x335 x69))))
(assert (x132 x382))
(assert (= (x150 (x397 x58)) x58))
(assert (= x137 (and (not x149) x283)))
(assert (= (x150 (x397 x325)) x325))
(assert (= (x150 (x255 x99 (_ bv4 256))) (bvadd (_ bv4 256) (x150 x99))))
(assert (= (x150 (x255 x365 (_ bv4 256))) (bvadd (_ bv4 256) (x150 x365))))
(assert (= x269 (=> (and (= x125 (x253 (x397 x17) (x335 (_ bv2 256)) (_ bv0 256))) (= (x226 x315) x209) (= (x255 x365 (_ bv4 256)) x315) (= x395 (bvadd x209 x86)) (bvule x209 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x253 (x397 x75) x238 (_ bv0 256)) x365) (= x7 x395) (= x238 (x253 (x397 x325) x125 (_ bv0 256))) (not (bvugt x209 (bvadd x209 x86))) (bvuge x209 (_ bv0 256)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308) x17)) x307)))
(assert (= x116 (=> (and (= x66 x207) (= x3 x413)) x49)))
(assert (= (x335 (_ bv3265688288 256)) (x397 (_ bv3265688288 256))))
(assert (x132 x325))
(assert (= (x397 (_ bv1013646637 256)) (x335 (_ bv1013646637 256))))
(assert (= x67 (and x349 x260)))
(assert (=> (bvule x316 (_ bv10000 256)) (= (x335 x316) (x397 x316))))
(assert (x132 x69))
(assert (= x389 (and x189 (not x331))))
(assert (= x107 (x150 (x397 x107))))
(assert (= (x397 (_ bv529866654 256)) (x335 (_ bv529866654 256))))
(assert (= x388 (=> (and (= x141 (x87 x92)) (= x99 (x253 (x397 x75) x411 (_ bv0 256))) (= x8 (bvadd x141 x62)) (= x92 (x255 x99 (_ bv4 256))) (= x411 (x253 (x397 x325) x412 (_ bv0 256))) (bvule x141 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x69 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308)) (= x412 (x253 (x397 x69) (x335 (_ bv2 256)) (_ bv0 256))) (= x312 x8) (bvuge x141 (_ bv0 256)) (not (bvult (bvadd x62 x141) x141))) x180)))
(assert (=> (bvule x319 (_ bv10000 256)) (= (x335 x319) (x397 x319))))
(assert (= (x335 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x397 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (x150 (x397 x316)) x316))
(assert (= (x150 (x335 (_ bv1889567281 256))) (_ bv1889567281 256)))
(assert (x132 x16))
(assert (= (x150 (x335 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256))) (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)))
(assert (= (x150 (x335 (_ bv1013646637 256))) (_ bv1013646637 256)))
(assert (= x111 (and x324 x358)))
(assert (x132 x194))
(assert (=> (bvuge (_ bv10000 256) x383) (= (x397 x383) (x335 x383))))
(assert (= (x150 (x397 x59)) x59))
(assert (= (x150 (x255 x29 (_ bv2 256))) (bvadd (x150 x29) (_ bv2 256))))
(assert (x132 x218))
(assert (=> (bvuge (_ bv10000 256) x325) (= (x335 x325) (x397 x325))))
(assert (= (x150 (x335 (_ bv529866654 256))) (_ bv529866654 256)))
(assert (= (x150 (x397 x89)) x89))
(assert (=> (bvule x59 (_ bv10000 256)) (= (x397 x59) (x335 x59))))
(assert (x132 x415))
(assert (= x144 (=> (= (not (bvugt x210 (_ bv1 256))) x364) (and x85 x364))))
(assert (x132 x271))
(assert (=> (bvule x215 (_ bv10000 256)) (= (x335 x215) (x397 x215))))
(assert (= (or x216 (and (not x54) x45)) x179))
(assert (x132 x287))
(assert (= (x150 (x255 x333 (_ bv3 256))) (bvadd (x150 x333) (_ bv3 256))))
(assert (=> (bvule x193 (_ bv10000 256)) (= (x335 x193) (x397 x193))))
(assert (= (x150 (x335 (_ bv2646777772 256))) (_ bv2646777772 256)))
(assert (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (x150 (x335 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))))
(assert (= (x150 (x397 x396)) x396))
(assert (=> (bvule x396 (_ bv10000 256)) (= (x335 x396) (x397 x396))))
(assert (= (x150 (x397 x69)) x69))
(assert (x132 x17))
(assert (= x217 (x150 (x397 x217))))
(assert (= x241 (x150 (x397 x241))))
(assert (= x156 (x150 (x397 x156))))
(assert (= x368 (and x2 (not x339))))
(assert (= x180 (=> (and (= (x253 (x397 x215) (x335 (_ bv9 256)) (_ bv0 256)) x40) (not (bvugt x311 (bvadd x167 x311))) (= (x253 (x397 x75) x362 (_ bv0 256)) x22) (= x357 (x87 x13)) (bvuge x142 (_ bv0 256)) (= x311 (bvudiv x105 (_ bv1000000000000000000 256))) (bvule x142 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x253 (x397 x325) x138 (_ bv0 256)) x362) (bvule (_ bv0 256) x357) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x357) (= (bvmul x240 x142) x105) (= x215 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308)) (= x18 (bvadd x311 x167)) (= x115 (= (_ bv0 256) x142)) (= (bvadd (bvneg x206) x312) x240) (= x138 (x253 (x397 x383) (x335 (_ bv2 256)) (_ bv0 256))) (= (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256)) x383) (= (x110 x379) x142) (= x13 (x255 x22 (_ bv4 256))) (not (bvugt x206 x312)) (ite x115 x115 (= x240 (bvudiv x105 x142))) (= x190 (bvand x308 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x232 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x308)) (= x379 (x253 (x397 x249) x40 (_ bv0 256)))) x25)))
(assert (= (or x370 x88) x288))
(assert (x132 x60))
(assert (=> (bvuge (_ bv10000 256) x380) (= (x335 x380) (x397 x380))))
(assert (= (x150 (x397 x406)) x406))
(assert (=> (bvule x133 (_ bv10000 256)) (= (x335 x133) (x397 x133))))
(assert (x132 x316))
(assert (=> (bvule x17 (_ bv10000 256)) (= (x335 x17) (x397 x17))))
(assert (= (_ bv3265688288 256) (x150 (x335 (_ bv3265688288 256)))))
(assert (= (and x347 (not x154)) x349))
(assert (= x251 (and x283 x149)))
(assert (= (x150 (x397 x193)) x193))
(assert (= x370 (and x286 x137)))
(assert (= x64 (x150 (x397 x64))))
(assert (= (x335 (_ bv1000000000000000000 256)) (x397 (_ bv1000000000000000000 256))))
(assert (=> (bvule x71 (_ bv10000 256)) (= (x335 x71) (x397 x71))))
(assert (=> (bvule x308 (_ bv10000 256)) (= (x335 x308) (x397 x308))))
(assert (= x133 (x150 (x397 x133))))
(assert (x132 x396))
(assert (= x216 (and x45 x54)))
(assert (= (and x111 (not x236)) x282))
(assert (= (x150 (x397 x319)) x319))
(assert (= (=> (and (= (_ bv0 256) x231) (= x229 x164)) x47) x158))
(assert (=> (bvule x194 (_ bv10000 256)) (= (x397 x194) (x335 x194))))
(assert (=> (bvuge (_ bv10000 256) x313) (= (x397 x313) (x335 x313))))
(assert (x132 x319))
(assert (x132 x241))
(assert (x132 x380))
(assert (= x51 (or x288 x251)))
(check-sat)
(exit)