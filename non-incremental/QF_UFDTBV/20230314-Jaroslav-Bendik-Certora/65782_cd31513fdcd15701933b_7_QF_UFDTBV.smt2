(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x213 0)) (((x155 (x126 x213) (x195 (_ BitVec 256))) (x273 (x154 (_ BitVec 256))) (x237 (x256 x213) (x31 x213) (x137 (_ BitVec 256))))))
(declare-fun x151 () Bool)
(declare-fun x246 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x294 () x213)
(declare-fun x199 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x9 () x213)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x300 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x238 () Bool)
(declare-fun x129 () Bool)
(declare-fun x66 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x254 () x213)
(declare-fun x217 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x164 () x213)
(declare-fun x198 (x213) (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x144 () Bool)
(declare-fun x107 (x213) (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x56 () Bool)
(declare-fun x17 () Bool)
(declare-fun x115 () x213)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x81 () x213)
(declare-fun x283 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x75 () x213)
(declare-fun x6 () Bool)
(declare-fun x263 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x85 () x213)
(declare-fun x93 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x105 () Bool)
(declare-fun x162 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x135 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x167 () Bool)
(declare-fun x99 () x213)
(declare-fun x251 () Bool)
(declare-fun x204 () Bool)
(declare-fun x264 () Bool)
(declare-fun x266 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x257 () Bool)
(declare-fun x299 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x218 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x295 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x219 () Bool)
(declare-fun x234 () Bool)
(declare-fun x158 () Bool)
(declare-fun x40 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x282 () Bool)
(declare-fun x95 (x213) (_ BitVec 256))
(declare-fun x54 (x213) (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x51 () Bool)
(declare-fun x236 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x83 ((_ BitVec 256)) x213)
(declare-fun x216 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x123 () Bool)
(declare-fun x117 () Bool)
(declare-fun x186 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x80 () Bool)
(declare-fun x25 () Bool)
(declare-fun x112 () Bool)
(declare-fun x12 () Bool)
(declare-fun x210 () Bool)
(declare-fun x181 () Bool)
(declare-fun x248 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x235 () Bool)
(declare-fun x232 () x213)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x183 () Bool)
(declare-fun x111 () Bool)
(declare-fun x24 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x76 (x213) (_ BitVec 256))
(declare-fun x202 () Bool)
(declare-fun x33 () Bool)
(declare-fun x43 () Bool)
(declare-fun x91 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x302 () Bool)
(declare-fun x172 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x139 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x268 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x26 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x298 () Bool)
(declare-fun x240 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x277 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x30 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x286 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x21 () Bool)
(declare-fun x272 () (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x301 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x278 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x189 () x213)
(declare-fun x243 () x213)
(declare-fun x171 () (_ BitVec 256))
(declare-fun x274 () Bool)
(declare-fun x279 () Bool)
(declare-fun x18 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x100 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x208 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x258 () Bool)
(declare-fun x109 () x213)
(declare-fun x188 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x166 () x213)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x44 () Bool)
(declare-fun x174 (x213) (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x140 () (_ BitVec 256))
(declare-fun x28 () Bool)
(declare-fun x136 () Bool)
(declare-fun x146 () (_ BitVec 256))
(declare-fun x297 () Bool)
(declare-fun x200 () x213)
(declare-fun x47 () Bool)
(declare-fun x142 () x213)
(declare-fun x159 () (_ BitVec 256))
(declare-fun x233 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x64 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x284 () Bool)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x303 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x52 (x213) (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(define-fun x285 ((x213 x213) (x291 (_ BitVec 256))) x213 (ite ((_ is x155) x213) (x155 (x126 x213) (bvadd x291 (x195 x213))) (ite ((_ is x237) x213) (x237 (x256 x213) (x31 x213) (bvadd (x137 x213) x291)) (x273 (bvadd x291 (x154 x213))))))
(define-fun x55 ((x168 (_ BitVec 256)) (x39 (_ BitVec 256))) Bool (= (bvudiv (bvmul x168 x39) x39) x168))
(define-fun x62 ((x168 (_ BitVec 256)) (x39 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x168 x39) x39) x168))
(define-fun x143 ((x168 (_ BitVec 256)) (x39 (_ BitVec 256))) Bool (= x168 (bvsdiv (bvmul x168 x39) x39)))
(define-fun x124 ((x169 x213)) (_ BitVec 256) (ite (= x166 x169) x48 (x107 x169)))
(define-fun x65 ((x169 x213)) (_ BitVec 256) (ite (= x169 x232) x57 (x124 x169)))
(define-fun x292 ((x169 x213)) (_ BitVec 256) (ite x194 (x107 x169) (x65 x169)))
(define-fun x230 ((x169 x213)) (_ BitVec 256) (ite (= x169 x142) x110 (x292 x169)))
(define-fun x179 ((x169 x213)) (_ BitVec 256) (ite (= x99 x169) x77 (x230 x169)))
(define-fun x147 ((x169 x213)) (_ BitVec 256) (ite x30 (x292 x169) (ite x157 (x292 x169) (x179 x169))))
(define-fun x178 ((x169 x213)) (_ BitVec 256) (x174 x169))
(define-fun x96 ((x169 x213)) (_ BitVec 256) (x95 x169))
(define-fun x148 ((x169 x213)) (_ BitVec 256) (ite (= x75 x169) x229 (x178 x169)))
(define-fun x46 ((x169 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x169) x209 (x217 x169)))
(define-fun x120 ((x169 (_ BitVec 256))) (_ BitVec 256) (ite (= x169 (_ bv128 256)) x295 (x46 x169)))
(define-fun x260 ((x169 (_ BitVec 256))) (_ BitVec 256) (ite (= x169 (_ bv160 256)) x209 (x120 x169)))
(define-fun x130 ((x169 (_ BitVec 256))) (_ BitVec 256) (ite (= x169 (_ bv128 256)) (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256) (x260 x169)))
(define-fun x173 ((x169 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv132 256) x169) x27 (x130 x169)))
(define-fun x176 ((x169 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x169) x295 (x173 x169)))
(define-fun x228 ((x169 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x169) (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) (x266 x169)))
(define-fun x63 ((x169 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv132 256) x169) x161 (x228 x169)))
(define-fun x11 ((x169 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x169) x58 (x63 x169)))
(define-fun x211 ((x169 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv196 256) x169) x149 (x11 x169)))
(define-fun x128 ((x220 (_ BitVec 256))) Bool (=> (and (not (= (_ bv1889567281 256) x220)) (not (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x220)) (not (= x220 (_ bv117300739 256))) (not (= (_ bv2835717307 256) x220)) (not (= (_ bv404098525 256) x220)) (not (= x220 (_ bv3337024914 256))) (not (= x220 (_ bv3017275065 256))) (not (= x220 (_ bv2514000705 256))) (not (= (_ bv3121116754 256) x220)) (not (= x220 (_ bv157198259 256))) (not (= x220 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (= x220 (_ bv1289409798 256))) (not (= x220 (_ bv170435703 256))) (not (= x220 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256))) (not (= x220 (_ bv599290589 256))) (bvugt x220 (_ bv10000 256)) (not (= x220 (_ bv1851080549 256))) (not (= x220 (_ bv3026235284 256))) (not (= x220 (_ bv826074471 256))) (not (= x220 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))) (not (= (_ bv330252341 256) x220)) (not (= x220 (_ bv2376452955 256)))) (not ((_ is x273) (x83 x220)))))
(assert (= (and x43 x8) x157))
(assert (=> (bvuge (_ bv10000 256) x303) (= (x273 x303) (x83 x303))))
(assert (= (=> (and (= x214 (_ bv0 256)) (= x16 x133)) x290) x152))
(assert (= (x273 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (x83 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))))
(assert (=> (bvuge (_ bv10000 256) x262) (= (x273 x262) (x83 x262))))
(assert (= (x83 (_ bv1851080549 256)) (x273 (_ bv1851080549 256))))
(assert (= (=> (and (= x92 (= (_ bv0 256) x53)) (or x92 (not x92))) x64) x25))
(assert (= (and x22 x92) x26))
(assert (= (x83 (_ bv826074471 256)) (x273 (_ bv826074471 256))))
(assert (= (x83 (_ bv157198259 256)) (x273 (_ bv157198259 256))))
(assert (= (or x30 x157 x56) x12))
(assert (= (and x151 (not x283)) x100))
(assert (= (x52 (x273 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))) (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (= x158 (and x80 x1)))
(assert (= (and x297 x172) x282))
(assert (= (or x284 x32) x8))
(assert (= (x273 (_ bv3026235284 256)) (x83 (_ bv3026235284 256))))
(assert (= (and x283 x151) x251))
(assert (x128 x161))
(assert (= x21 (and x302 (not x246))))
(assert (= (x83 (_ bv1461501637330902918203684832716283019655932542975 256)) (x273 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (_ bv404098525 256) (x52 (x273 (_ bv404098525 256)))))
(assert (= (x52 (x273 (_ bv3026235284 256))) (_ bv3026235284 256)))
(assert (= (_ bv3121116754 256) (x52 (x273 (_ bv3121116754 256)))))
(assert (= (x273 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x83 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= x238 (or x158 x111)))
(assert (= (and (not x80) x1) x17))
(assert (= (and x94 (not x3)) x151))
(assert (= (x52 (x83 x161)) x161))
(assert (= (x83 (_ bv404098525 256)) (x273 (_ bv404098525 256))))
(assert (= (=> (and (and (= x156 x37) (bvule x27 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x37) (bvule x37 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x14 (_ bv3026235284 256))) (= x263 x138) (= (_ bv3121116754 256) x14) (= x4 x74) (= x185 x27) (not (bvult x14 (_ bv2376452955 256))) (= x156 x270) (= x80 (= x138 x161)) (= x249 (x54 (x83 x58))) (bvule (_ bv0 256) x231) (= x5 x70) (not (bvugt (_ bv3017275065 256) x14)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x138) (= x4 x138) (bvule x231 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x102) (= (_ bv0 256) x242) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x102) (= x242 x287) (bvult (_ bv0 256) x249) (= x209 x70) (bvult x14 (_ bv3337024914 256)) (= x102 x161) (not (= x14 (_ bv3017275065 256)))) (and (= x78 (bvadd x73 x259)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x241) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x267) x216) (bvule (_ bv0 256) x241) (bvule (_ bv0 256) x275) (bvule x275 (bvadd x149 x275)) (= x201 (ite (= x93 (_ bv0 256)) (_ bv1 256) (_ bv0 256))) (= x78 x29) (= x241 (x178 x75)) (= (bvadd x259 x241) x229) (= x38 (bvand x7 x188)) (bvuge x73 (_ bv0 256)) (= (ite (bvult (_ bv31 256) x93) (_ bv1 256) (_ bv0 256)) x188) (bvule x275 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x187 x78) (= x140 (bvor x38 x201)) (= x259 x5) (bvule x73 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x299 (bvadd x275 x149)) (= (x237 (x83 x216) (x273 (_ bv3 256)) (_ bv0 256)) x75) (= x299 x253) (= (bvand x53 x140) x89) (= (ite (= (_ bv1 256) x289) (_ bv1 256) (_ bv0 256)) x7) (bvult (_ bv0 256) x89) (bvuge (bvadd x73 x259) x73) (= x86 x299))) (and (=> (and (not x80) (and (or (and (and (not (bvult x301 x209)) (= x71 (bvadd x301 (bvneg x209))) (= (bvand x138 (_ bv1461501637330902918203684832716283019655932542975 256)) x15)) (not x118)) x118) (and (= (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x301) x118) (= x301 (x96 x294)) (= (x237 (x83 x161) x109 (_ bv0 256)) x294) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x301) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x138) x60) (= (x237 (x83 x60) (x273 (_ bv4 256)) (_ bv0 256)) x109) (bvule (_ bv0 256) x301)))) x191) (=> x80 x66))) x64))
(assert (= (x83 (_ bv2514000705 256)) (x273 (_ bv2514000705 256))))
(assert (= (and x223 x51) x79))
(assert (= x50 (x52 (x83 x50))))
(assert (= (x83 (_ bv3017275065 256)) (x273 (_ bv3017275065 256))))
(assert (= x111 (or x67 x44)))
(assert (= (and x238 (not x264)) x284))
(assert (= (x83 (_ bv117300739 256)) (x273 (_ bv117300739 256))))
(assert (= (=> (and (and (and (not (bvugt (_ bv826074471 256) x236)) (bvule x58 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (not (= (_ bv0 256) x141)) x219) (bvult (_ bv0 256) x69) (bvule (_ bv0 256) x225) (= x141 x19) x219 (= x236 (_ bv1889567281 256)) (= x153 x225) (bvule x225 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x237 (x83 x58) (x273 (_ bv1 256)) (_ bv0 256)) x200) (not (= x236 (_ bv826074471 256))) (= (x54 (x83 x262)) x69) (= (_ bv0 256) x127) (= (x107 x200) x225)) (and (or (and (and (bvugt x175 (_ bv0 256)) (= (bvand x36 x247) x175) (= (= (_ bv0 256) x149) x204) (= x103 (bvudiv x252 x149)) (= x182 x259) (= (ite (not x136) (_ bv1 256) (_ bv0 256)) x247) (= (ite (or x204 x145) (_ bv1 256) (_ bv0 256)) x36) (= x182 (bvudiv x252 x276)) (= (bvmul x149 x180) x252) (= (= x103 x180) x145) (= (= x276 (_ bv0 256)) x136) (bvule (_ bv0 256) x276) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x276)) (not x246)) (and (= x259 x149) x246)) (and (bvule x222 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x180) (not (= x248 (_ bv1289409798 256))) (= x222 x161) (not (bvugt (_ bv826074471 256) x248)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x272) (bvult (_ bv0 256) x296) (bvule (_ bv0 256) x97) (= x170 x97) (bvule (_ bv0 256) x222) (= x246 (= (_ bv0 256) x180)) (bvule (_ bv0 256) x180) (not (bvugt (_ bv1289409798 256) x248)) (= x267 x185) (bvule (_ bv0 256) x272) (= (_ bv1851080549 256) x248) (= x170 x270) (= x287 x186) (bvule x97 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvult x248 (_ bv2376452955 256)) (= x149 x240) (= x42 x153) (= x296 (x54 (x83 x58))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x267) (= x186 (_ bv0 256))))) (and x28 (bvugt (_ bv826074471 256) x104) (bvule x101 (_ bv1461501637330902918203684832716283019655932542975 256)) x2 (= (bvugt (x54 (x83 x262)) (_ bv0 256)) x18) (bvult (_ bv0 256) x262) (not (bvult x104 (_ bv170435703 256))) (bvuge x184 (_ bv0 256)) (= x165 x161) (= x49 x161) (not (= (_ bv330252341 256) x104)) (bvule x293 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x300 x293) (= x2 (not (= x134 x205))) (= x58 x205) (bvult x104 (_ bv2376452955 256)) (= x104 (_ bv404098525 256)) (= x61 (x76 (x83 x58))) (bvule (_ bv0 256) x180) (= x28 (not (= x159 x49))) (bvule x185 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x134 x185) (bvuge x165 (_ bv0 256)) x258 (bvuge x185 (_ bv0 256)) (= x159 x58) (= (x54 (x83 x58)) x98) (not (= (_ bv170435703 256) x104)) (= x180 x19) (bvule (_ bv0 256) x293) (bvule x262 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x180) (bvult (_ bv0 256) x98) (= (x76 (x83 x262)) x184) (not (= x262 x58)) (bvuge x61 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x58) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x165) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x74) (= (bvult (_ bv0 256) (x54 (x83 x58))) x258) x18 (bvule (_ bv0 256) x101) (bvult (_ bv0 256) x58) (bvuge x74 (_ bv0 256)))) x33) x123))
(assert (= (x83 (_ bv170435703 256)) (x273 (_ bv170435703 256))))
(assert (= (x52 (x273 (_ bv1461501637330902918203684832716283019655932542975 256))) (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x273 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)) (x83 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256))))
(assert (= x235 (=> (and (= x119 (x54 (x83 x262))) (not (= (_ bv826074471 256) x146)) (= x10 (bvadd (bvneg (_ bv4 256)) x34)) (= x224 (_ bv128 256)) (not (= (_ bv1889567281 256) x146)) (= x43 (bvsgt (_ bv64 256) x10)) (= x303 (bvand x138 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (bvadd (bvneg x209) x245) x114) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x253) (not (= x295 (_ bv0 256))) (not (bvult x245 x209)) (bvuge x245 (_ bv0 256)) (bvult (_ bv0 256) x119) (not (= x146 (_ bv2514000705 256))) (= (bvadd (bvneg x295) x253) x261) (bvule (_ bv0 256) x253) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x29) (= x122 x27) (= x146 (_ bv2835717307 256)) (bvuge x29 (_ bv0 256)) (not (bvult x253 x295)) (= x206 (bvadd (bvneg x209) x29)) (= x295 x221) (= (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256) x265) (= (_ bv68 256) x34) (not (bvult x146 (_ bv826074471 256))) (not (bvugt (_ bv4 256) x34)) (bvule x245 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x245 (x148 x81)) (= (x237 (x83 x303) (x273 (_ bv3 256)) (_ bv0 256)) x81)) (and (=> (and (and (= x171 x122) (= x172 (= x122 x27))) (not x43)) (and (=> (not x172) x152) (=> (and (and (= x40 (bvult x280 x295)) (= x221 x84) (= x280 (x292 x9)) (bvule (_ bv0 256) x280) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x280) (= x9 (x237 (x83 x58) (x273 (_ bv1 256)) (_ bv0 256)))) x172) (and (=> x40 x152) (=> (and (= (bvugt x221 x280) x6) (not x40)) (and (=> x6 x152) (=> (and (not x6) (and (= (x230 x254) x150) (= (x237 (x83 x122) (x273 (_ bv1 256)) (_ bv0 256)) x254) (= x215 (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg x221))) (= x142 (x237 (x83 x58) (x273 (_ bv1 256)) (_ bv0 256))) (= (bvult x215 x150) x223) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x150) (= x110 (bvadd x280 (bvneg x221))) (bvuge x150 (_ bv0 256)))) (and (=> x223 x152) (=> (and (and (= (bvult x77 x150) x117) (= (bvadd x150 x221) x77)) (not x223)) (and (=> (and (not x117) (and (= (_ bv1 256) x214) (= x133 (_ bv32 256)) (= (x237 (x83 x122) (x273 (_ bv1 256)) (_ bv0 256)) x99))) x290) (=> x117 x152))))))))))) (=> (and x43 (and (= x214 (_ bv0 256)) (= x133 x16))) x290)))))
(assert (= x233 (=> (and (= x53 (_ bv0 256)) (= x275 x276) (= x93 x199) (= x73 x180)) x25)))
(assert (= (x273 (_ bv3121116754 256)) (x83 (_ bv3121116754 256))))
(assert (= (and x282 (not x40)) x181))
(assert (= (x52 (x273 (_ bv3017275065 256))) (_ bv3017275065 256)))
(assert (= (and (not x274) x90) x106))
(assert (= (=> (and (or (and (and (= (bvmul x253 x209) x35) (bvult (_ bv0 256) x23) (= (bvudiv x35 x209) x13) (= (ite (not x139) (_ bv1 256) (_ bv0 256)) x160) (= (= (_ bv0 256) x29) x139) (= (ite (or x234 x144) (_ bv1 256) (_ bv0 256)) x250) (= x190 x295) (bvule x253 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x234 (= (_ bv0 256) x209)) (= x144 (= x13 x253)) (= (bvand x250 x160) x23) (= x190 (bvudiv x35 x29)) (bvuge x253 (_ bv0 256))) (not x264)) (and (= x209 x295) x264)) (and (bvule (_ bv0 256) x29) (bvule x29 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (= x29 (_ bv0 256)) x264))) x235) x66))
(assert (=> (bvuge (_ bv10000 256) x58) (= (x83 x58) (x273 x58))))
(assert (=> (bvuge (_ bv10000 256) x60) (= (x83 x60) (x273 x60))))
(assert (= (x52 (x83 x122)) x122))
(assert (= x47 (and x181 x6)))
(assert (= (and x202 x257) x94))
(assert (= (and x51 (not x223)) x105))
(assert (= (x52 (x273 (_ bv3337024914 256))) (_ bv3337024914 256)))
(assert (= (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256) (x52 (x273 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)))))
(assert (= x192 (and x112 x12)))
(assert (= (and x183 (not x298)) x210))
(assert (= (x52 (x83 x218)) x218))
(assert (= x90 (and x100 (not x131))))
(assert (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (x52 (x273 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))))
(assert (= (x52 (x273 (_ bv1851080549 256))) (_ bv1851080549 256)))
(assert (x128 x303))
(assert (=> (bvuge (_ bv10000 256) x218) (= (x273 x218) (x83 x218))))
(assert (= (x273 (_ bv599290589 256)) (x83 (_ bv599290589 256))))
(assert (= (x52 (x273 (_ bv2835717307 256))) (_ bv2835717307 256)))
(assert (= (x52 (x83 x60)) x60))
(assert (= (x273 (_ bv2835717307 256)) (x83 (_ bv2835717307 256))))
(assert (= (x52 (x273 (_ bv2376452955 256))) (_ bv2376452955 256)))
(assert (= (_ bv826074471 256) (x52 (x273 (_ bv826074471 256)))))
(assert (= (and (not x135) x279) x208))
(assert (x128 x50))
(assert (x128 x58))
(assert (= (or x79 (and (not x172) x297) x47 (and x117 x105) (and x282 x40)) x30))
(assert (= x303 (x52 (x83 x303))))
(assert (= (and x246 x302) x268))
(assert (= (and (not x91) x106) x183))
(assert (= x66 x191))
(assert (= x132 (and x298 x183)))
(assert (=> (bvuge (_ bv10000 256) x50) (= (x83 x50) (x273 x50))))
(assert (= (_ bv157198259 256) (x52 (x273 (_ bv157198259 256)))))
(assert (x128 x60))
(assert (= (x52 (x83 x216)) x216))
(assert (= (x52 (x273 (_ bv330252341 256))) (_ bv330252341 256)))
(assert (= (=> (and (and (= x295 x269) (= (ite (= (_ bv0 256) x133) (_ bv1 256) (_ bv0 256)) x108) (= x227 (ite (= (_ bv1 256) x303) (_ bv1 256) (_ bv0 256))) (bvult (_ bv0 256) x226) (= (bvor x108 x203) x121) (= x196 (ite (bvult (_ bv31 256) x133) (_ bv1 256) (_ bv0 256))) (= x226 (bvand x214 x121)) (= (bvand x196 x227) x203)) (and (and (= (bvule x72 x286) x24) (= x277 x59) (= x59 x286) (= x42 x72)) (and (bvule (_ bv0 256) x88) (bvule x88 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x288 (_ bv826074471 256))) (= x288 (_ bv1889567281 256)) (bvugt x113 (_ bv0 256)) (not (bvult x288 (_ bv826074471 256))) (bvule x58 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x237 (x83 x58) (x273 (_ bv1 256)) (_ bv0 256)) x115) (= (x147 x115) x88) (= x255 x269) (= x277 x88) (= (x54 (x83 x262)) x113)))) x24) x167))
(assert (= true x302))
(assert (= x279 (or x268 x21)))
(assert (= x58 (x52 (x83 x58))))
(assert (= (x52 (x83 x262)) x262))
(assert (= (=> (and (= (= (_ bv0 256) x214) x112) (or x112 (not x112))) x167) x290))
(assert (x128 x262))
(assert (=> (bvuge (_ bv10000 256) x161) (= (x83 x161) (x273 x161))))
(assert (=> (bvule x122 (_ bv10000 256)) (= (x273 x122) (x83 x122))))
(assert (not x123))
(assert (= (and x118 x17) x44))
(assert (= (x52 (x273 (_ bv1289409798 256))) (_ bv1289409798 256)))
(assert (= (and x131 x100) x162))
(assert (=> (bvule x216 (_ bv10000 256)) (= (x83 x216) (x273 x216))))
(assert (= (x83 (_ bv330252341 256)) (x273 (_ bv330252341 256))))
(assert (= (_ bv1889567281 256) (x52 (x273 (_ bv1889567281 256)))))
(assert (= (and (not x118) x17) x67))
(assert (= x297 (and (not x43) x8)))
(assert (= (or x192 (and (not x112) x12)) x129))
(assert (= (_ bv117300739 256) (x52 (x273 (_ bv117300739 256)))))
(assert (= x56 (and (not x117) x105)))
(assert (= (x52 (x273 (_ bv599290589 256))) (_ bv599290589 256)))
(assert (x128 x122))
(assert (= (x83 (_ bv2376452955 256)) (x273 (_ bv2376452955 256))))
(assert (= (x83 (_ bv3337024914 256)) (x273 (_ bv3337024914 256))))
(assert (= (or x251 (and x135 x279) x132 (and (not x116) x208) (and x94 x3) x162 (and x202 (not x257)) (and x274 x90) (and x91 x106)) x194))
(assert (x128 x218))
(assert (= (_ bv170435703 256) (x52 (x273 (_ bv170435703 256)))))
(assert (= (x273 (_ bv1289409798 256)) (x83 (_ bv1289409798 256))))
(assert (= (x273 (_ bv1889567281 256)) (x83 (_ bv1889567281 256))))
(assert (= (and x208 x116) x202))
(assert (= (or x194 x210) x22))
(assert (x128 x216))
(assert (= (and (not x6) x181) x51))
(assert (= x1 (or (and x22 (not x92)) x26)))
(assert (= (x52 (x273 (_ bv2514000705 256))) (_ bv2514000705 256)))
(assert (= x33 (=> (and (= (_ bv128 256) x244) (= (x54 (x83 x262)) x45) (not (= x239 (_ bv404098525 256))) (= x222 x50) (bvugt x45 (_ bv0 256)) (= (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x125) (bvult x239 (_ bv826074471 256)) (= x135 (bvsgt (_ bv96 256) x207)) (= x41 x149) (not (= (_ bv117300739 256) x239)) (not (= (_ bv157198259 256) x239)) (= (bvadd x271 (bvneg (_ bv4 256))) x207) (not (bvult x271 (_ bv4 256))) (= x271 (_ bv100 256)) (not (= x259 (_ bv0 256))) (= x218 x58) (= x239 (_ bv599290589 256))) (and (=> (and (not x135) (and (= true x116) (= x87 x50))) (and (=> (not x116) x233) (=> (and x116 (and (= x257 true) (= x197 x218))) (and (=> (and x257 (and (= x41 x193) (= x3 (bvugt x149 x68)) (= (x107 x189) x68) (bvule (_ bv0 256) x68) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x68) (= (x237 (x83 x50) (x273 (_ bv1 256)) (_ bv0 256)) x189))) (and (=> (and (not x3) (= (bvugt x41 x68) x283)) (and (=> (and (and (= x243 (x237 (x83 x218) (x273 (_ bv1 256)) (_ bv0 256))) (= x131 (bvult x212 x177)) (= (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg x41)) x212) (= x48 (bvadd x68 (bvneg x41))) (= (x237 (x83 x50) (x273 (_ bv1 256)) (_ bv0 256)) x166) (= (x124 x243) x177) (bvule (_ bv0 256) x177) (bvule x177 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (not x283)) (and (=> (and (not x131) (and (= (bvadd x41 x177) x57) (= x274 (bvugt x177 x57)))) (and (=> (and (and (bvule x163 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x163 (_ bv0 256)) (= x164 (x237 (x83 x58) x85 (_ bv0 256))) (= (x237 (x83 x50) (x273 (_ bv2 256)) (_ bv0 256)) x85) (= x163 (x198 x164)) (= (x237 (x83 x218) (x273 (_ bv1 256)) (_ bv0 256)) x232) (= x91 (bvult x163 x41))) (not x274)) (and (=> x91 x233) (=> (and (= (bvult x163 x41) x298) (not x91)) (and (=> x298 x233) (=> (and (and (= (_ bv1 256) x53) (= x275 x276) (= x73 x180) (= (_ bv32 256) x93) (= (bvadd (bvneg x41) x163) x281)) (not x298)) x25))))) (=> x274 x233))) (=> x131 x233))) (=> x283 x233))) (=> x3 x233))) (=> (not x257) x233))))) (=> x135 x233)))))
(assert (= (and x264 x238) x32))
(check-sat)
(exit)