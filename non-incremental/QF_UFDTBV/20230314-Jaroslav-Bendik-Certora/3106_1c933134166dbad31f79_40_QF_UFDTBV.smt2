(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x193 0)) (((x91 (x44 x193) (x204 x193) (x169 x193) (x76 x193) (x84 x193) (x4 x193) (x78 x193) (x59 (_ BitVec 256))) (x124 (x13 x193) (x217 x193) (x18 (_ BitVec 256))) (x71 (x123 x193) (x158 x193) (x61 x193) (x36 x193) (x75 x193) (x219 x193) (x202 (_ BitVec 256))) (x129 (x108 x193) (x162 (_ BitVec 256))) (x24 (x165 x193) (x160 x193) (x116 x193) (x201 x193) (x192 (_ BitVec 256))) (x132 (x21 (_ BitVec 256))) (x143 (x211 x193) (x85 x193) (x56 x193) (x152 x193) (x74 x193) (x3 (_ BitVec 256))) (x136 (x225 x193) (x147 x193) (x113 x193) (x109 (_ BitVec 256))))))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x135 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x137 () Bool)
(declare-fun x47 () (_ BitVec 256))
(declare-fun x127 () x193)
(declare-fun x190 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x89 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x87 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x42 () Bool)
(declare-fun x197 () Bool)
(declare-fun x199 () Bool)
(declare-fun x185 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x139 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x173 () Bool)
(declare-fun x93 () Bool)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x96 (x193) (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x58 () x193)
(declare-fun x133 () x193)
(declare-fun x94 () Bool)
(declare-fun x26 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x52 ((_ BitVec 256)) x193)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x27 () x193)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x191 (x193) (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x183 (x193) (_ BitVec 256))
(declare-fun x99 () Bool)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x112 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x55 () x193)
(declare-fun x181 () Bool)
(declare-fun x92 () Bool)
(declare-fun x195 () Bool)
(declare-fun x72 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x177 () Bool)
(declare-fun x40 () Bool)
(declare-fun x184 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x57 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x38 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x32 () Bool)
(declare-fun x150 () Bool)
(declare-fun x111 (x193) (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x187 () Bool)
(declare-fun x20 () Bool)
(declare-fun x171 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x41 () Bool)
(declare-fun x48 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x62 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x51 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x178 () Bool)
(declare-fun x8 (x193) (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x53 () x193)
(declare-fun x67 () Bool)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x141 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x206 () Bool)
(declare-fun x121 () Bool)
(declare-fun x12 () Bool)
(declare-fun x180 () Bool)
(declare-fun x203 () (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x49 () x193)
(declare-fun x83 () Bool)
(declare-fun x174 () Bool)
(declare-fun x148 () x193)
(declare-fun x66 () Bool)
(declare-fun x63 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x188 (x193) (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(define-fun x212 ((x193 x193) (x25 (_ BitVec 256))) x193 (ite ((_ is x91) x193) (x91 (x44 x193) (x204 x193) (x169 x193) (x76 x193) (x84 x193) (x4 x193) (x78 x193) (bvadd (x59 x193) x25)) (ite ((_ is x71) x193) (x71 (x123 x193) (x158 x193) (x61 x193) (x36 x193) (x75 x193) (x219 x193) (bvadd (x202 x193) x25)) (ite ((_ is x143) x193) (x143 (x211 x193) (x85 x193) (x56 x193) (x152 x193) (x74 x193) (bvadd x25 (x3 x193))) (ite ((_ is x24) x193) (x24 (x165 x193) (x160 x193) (x116 x193) (x201 x193) (bvadd x25 (x192 x193))) (ite ((_ is x136) x193) (x136 (x225 x193) (x147 x193) (x113 x193) (bvadd (x109 x193) x25)) (ite ((_ is x129) x193) (x129 (x108 x193) (bvadd x25 (x162 x193))) (ite ((_ is x124) x193) (x124 (x13 x193) (x217 x193) (bvadd (x18 x193) x25)) (x132 (bvadd (x21 x193) x25))))))))))
(define-fun x130 ((x97 (_ BitVec 256)) (x118 (_ BitVec 256))) Bool (= x97 (bvudiv (bvmul x97 x118) x118)))
(define-fun x22 ((x97 (_ BitVec 256)) (x118 (_ BitVec 256))) Bool (= x97 (bvsdiv (bvmul x118 x97) x118)))
(define-fun x149 ((x97 (_ BitVec 256)) (x118 (_ BitVec 256))) Bool (= x97 (bvsdiv (bvmul x118 x97) x118)))
(define-fun x43 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite (= x106 (_ bv128 256)) x122 (x87 x106)))
(define-fun x100 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x106) x81 (x38 x106)))
(define-fun x68 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite (= x106 (_ bv160 256)) x7 (x38 x106)))
(define-fun x2 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite (= x106 x77) (_ bv97199519776808029778168953285215024309695167179541945341261303444449322336256 256) (x185 x106)))
(define-fun x80 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite (= x207 x106) (x191 x133) (x2 x106)))
(define-fun x33 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x106 x77) (bvult x106 (bvadd (_ bv32 256) x77))) (x48 (bvadd (bvadd x106 (bvneg x77)) (_ bv0 256))) (x80 x106)))
(define-fun x144 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite x180 (x33 x106) (x80 x106)))
(define-fun x105 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite x89 (x144 x106) (x185 x106)))
(define-fun x11 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite (= x106 x95) x227 (x105 x106)))
(define-fun x110 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite (= x134 x106) x90 (x11 x106)))
(define-fun x35 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite (= x106 x39) x135 (x110 x106)))
(define-fun x1 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite (= x106 (_ bv192 256)) x220 (x100 x106)))
(define-fun x101 ((x106 (_ BitVec 256))) (_ BitVec 256) (ite x178 (x38 x106) (ite x177 (ite x66 (x100 x106) (x1 x106)) (x68 x106))))
(define-fun x164 ((x218 (_ BitVec 256))) Bool (=> (and (not (= x218 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (not (= (_ bv1461501637330902918203684832716283019655932542975 256) x218)) (bvugt x218 (_ bv10000 256)) (not (= (_ bv65536 256) x218)) (not (= (_ bv24706623 256) x218)) (not (= (_ bv549686827 256) x218)) (not (= (_ bv7776000 256) x218)) (not (= (_ bv131072 256) x218)) (not (= (_ bv97199519776808029778168953285215024309695167179541945341261303444449322336256 256) x218)) (not (= (_ bv18446744073709551615 256) x218)) (not (= (_ bv1666326814 256) x218)) (not (= x218 (_ bv4294967295 256))) (not (= x218 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))) (not (= x218 (_ bv4294967296 256))) (not (= x218 (_ bv16635278 256))) (not (= x218 (_ bv346787896 256)))) (not ((_ is x132) (x52 x218)))))
(assert (= (x101 (_ bv321 256)) (x191 (x52 (x101 (_ bv321 256))))))
(assert (= (_ bv549686827 256) (x191 (x132 (_ bv549686827 256)))))
(assert (= x72 (and x139 x181)))
(assert (=> (bvule (x101 (_ bv353 256)) (_ bv10000 256)) (= (x52 (x101 (_ bv353 256))) (x132 (x101 (_ bv353 256))))))
(assert (= (x132 (_ bv65536 256)) (x52 (_ bv65536 256))))
(assert (= (x52 (x191 x133)) x133))
(assert (=> (bvuge (_ bv10000 256) (x101 (_ bv193 256))) (= (x132 (x101 (_ bv193 256))) (x52 (x101 (_ bv193 256))))))
(assert (= x58 (x52 (x191 x58))))
(assert (= (x38 (_ bv289 256)) (_ bv0 256)))
(assert (= x213 (=> (and (= x54 (bvand (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256) x186)) (= x229 (bvadd x196 (_ bv7776000 256))) (= (bvand x141 (_ bv18446744073709551615 256)) x196) (= (bvadd x54 x77) x157) (= x157 x95) (not (bvslt x45 (_ bv32 256))) (= (bvadd (_ bv31 256) x45) x186) (= (x144 x77) x141) (= x229 x135) (not (bvult (_ bv18446744073709551615 256) x229)) (not (= (_ bv0 256) x208))) x83)))
(assert (= (x191 (x52 (x101 (_ bv289 256)))) (x101 (_ bv289 256))))
(assert (= (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (x191 (x132 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))))
(assert (= (x191 (x52 x30)) x30))
(assert (x164 (x101 (_ bv289 256))))
(assert (= (x38 (_ bv161 256)) (_ bv0 256)))
(assert (x164 (x101 (_ bv161 256))))
(assert (=> (bvuge (_ bv10000 256) (x101 (_ bv161 256))) (= (x132 (x101 (_ bv161 256))) (x52 (x101 (_ bv161 256))))))
(assert (= (x132 (_ bv24706623 256)) (x52 (_ bv24706623 256))))
(assert (=> (bvuge (_ bv10000 256) x30) (= (x52 x30) (x132 x30))))
(assert (= (=> (and (bvult x23 (_ bv1666326814 256)) (bvuge x126 (_ bv0 256)) (= x150 (bvult (_ bv0 256) (x8 (x52 x163)))) (bvuge x142 (_ bv0 256)) (bvugt (_ bv346787896 256) x23) (bvule x176 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x171 x70) (bvuge x16 (_ bv0 256)) (= x170 (_ bv1 256)) (bvult (_ bv0 256) x176) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x73) (bvslt (_ bv35 256) x98) (= x9 (x183 (x52 x163))) (= x182 x128) (= x200 x119) (= x5 (bvugt (x8 (x52 x176)) (_ bv0 256))) (not (bvugt (_ bv4 256) x98)) (= x26 x117) (bvule x34 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (_ bv24706623 256) x224) x150 (= x73 x104) (= x104 x14) (bvult (_ bv0 256) x163) (bvuge x34 (_ bv0 256)) (= x16 (x96 x148)) (= x182 (_ bv0 256)) x69 (not (bvsgt (_ bv32 256) x226)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x30) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x153) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x26) (= (_ bv24706623 256) x23) (= x50 x117) (not (= x176 x163)) (bvule (_ bv0 256) x171) (bvult (_ bv0 256) x190) (= false x184) (bvuge x153 (_ bv0 256)) (not (= x30 x163)) (= x190 (x8 (x52 x163))) (bvule (_ bv0 256) x26) (not (= x23 (_ bv16635278 256))) (bvule (_ bv0 256) x10) (not (= x30 x176)) (= (bvult (_ bv0 256) (x8 (x52 x30))) x69) (= false x57) (bvult (_ bv0 256) x30) (= (x183 (x52 x176)) x126) (= x19 x200) (bvule (_ bv0 256) x50) (= x121 false) (bvule (_ bv0 256) x9) (= (bvlshr x16 (_ bv160 256)) x189) (bvuge x167 (_ bv0 256)) (= x148 (x124 (x52 x200) (x132 (_ bv1 256)) (_ bv0 256))) (= x226 (bvadd x98 (bvneg (_ bv4 256)))) x5 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x167) (= x125 (bvand (_ bv131072 256) x189)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x142) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x50) (= x172 x200) (= x93 true) (bvule x163 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (= x125 (_ bv131072 256)) x181) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x171) (bvule (_ bv0 256) x73) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x16) (= x10 (x183 (x52 x30))) (bvugt (_ bv549686827 256) x23)) (and (=> (and x181 (and (= (bvand (_ bv1 256) x115) x223) (= (bvudiv x115 (_ bv2 256)) x31) (= x88 (bvudiv x151 (_ bv32 256))) (= (bvmul (_ bv32 256) x88) x209) (bvugt x161 (_ bv0 256)) (= (bvadd x122 (_ bv31 256)) x151) (= x127 (x124 (x52 x200) (x132 (_ bv5 256)) (_ bv0 256))) (= (bvadd (_ bv32 256) x209) x131) (= (bvugt (_ bv32 256) x122) x99) (= (bvadd x131 (_ bv128 256)) x60) (= x115 (x188 x127)) (= (bvadd x223 (bvneg (ite x99 (_ bv1 256) (_ bv0 256)))) x161) (= x122 (ite (bvult (_ bv0 256) x223) x31 (bvand x31 (_ bv127 256)))) (= (= x122 (_ bv0 256)) x112))) (and (=> (and (= x27 (x52 x200)) x112) x92) (=> (and (= x173 (bvugt x122 (_ bv31 256))) (not x112)) (and (=> (and (and (= x154 (x188 x127)) (= (x52 x200) x27) (= (bvudiv x154 (_ bv256 256)) x210) (= x7 (bvmul (_ bv256 256) x210))) (not x173)) x92) (=> (and (and (= x64 (bvadd (_ bv160 256) x122)) (= x49 (x212 x55 (_ bv1 256))) (= x20 (bvult (_ bv192 256) x64)) (= (x129 x127 (_ bv0 256)) x55) (= x81 (x111 x55))) x173) (and (=> (not x20) x206) (=> x20 x103))))))) (=> (and (and (= (_ bv128 256) x77) (= (x132 (_ bv0 256)) x133) (= (_ bv1 256) x156) (= (x52 x200) x58)) (not x181)) x166))) x194))
(assert (= (x191 (x132 (_ bv131072 256))) (_ bv131072 256)))
(assert (= (_ bv0 256) (x38 (_ bv193 256))))
(assert (= (x52 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)) (x132 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))))
(assert (x164 (x101 (_ bv321 256))))
(assert (= (and (not x199) x67) x195))
(assert (x164 x30))
(assert (x164 (x101 (_ bv353 256))))
(assert (= x92 (=> (and (= (x101 (_ bv160 256)) x221) (= x215 (bvult (_ bv0 256) x6)) (bvult (_ bv0 256) x79) (= x79 (x43 (_ bv128 256))) (= x6 (bvlshr x221 (_ bv248 256)))) (and (=> x215 x137) (=> (and (= (x132 (_ bv0 256)) x53) (not x215)) x222)))))
(assert (= (x191 (x52 (x101 (_ bv353 256)))) (x101 (_ bv353 256))))
(assert (= (x52 (_ bv1461501637330902918203684832716283019655932542975 256)) (x132 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= x102 (and x197 x41)))
(assert (= x137 (=> (and (= (bvuge (_ bv224 256) x6) x82) (= x140 (x43 (_ bv128 256))) (not (bvult x140 x114)) (= (bvadd (_ bv1 256) x6) x114)) (and x82 (=> (= x53 (ite (bvuge (_ bv32 256) x6) (x129 (x52 (x101 (_ bv161 256))) (_ bv0 256)) (ite (bvule x6 (_ bv64 256)) (x124 (x52 (x101 (_ bv161 256))) (x52 (x101 (_ bv193 256))) (_ bv0 256)) (ite (bvule x6 (_ bv96 256)) (x136 (x52 (x101 (_ bv161 256))) (x52 (x101 (_ bv193 256))) (x52 (x101 (_ bv225 256))) (_ bv0 256)) (ite (bvuge (_ bv128 256) x6) (x24 (x52 (x101 (_ bv161 256))) (x52 (x101 (_ bv193 256))) (x52 (x101 (_ bv225 256))) (x52 (x101 (_ bv257 256))) (_ bv0 256)) (ite (bvuge (_ bv160 256) x6) (x143 (x52 (x101 (_ bv161 256))) (x52 (x101 (_ bv193 256))) (x52 (x101 (_ bv225 256))) (x52 (x101 (_ bv257 256))) (x52 (x101 (_ bv289 256))) (_ bv0 256)) (ite (bvule x6 (_ bv192 256)) (x71 (x52 (x101 (_ bv161 256))) (x52 (x101 (_ bv193 256))) (x52 (x101 (_ bv225 256))) (x52 (x101 (_ bv257 256))) (x52 (x101 (_ bv289 256))) (x52 (x101 (_ bv321 256))) (_ bv0 256)) (ite (bvuge (_ bv224 256) x6) (x91 (x52 (x101 (_ bv161 256))) (x52 (x101 (_ bv193 256))) (x52 (x101 (_ bv225 256))) (x52 (x101 (_ bv257 256))) (x52 (x101 (_ bv289 256))) (x52 (x101 (_ bv321 256))) (x52 (x101 (_ bv353 256))) (_ bv0 256)) (x52 x203))))))))) x222)))))
(assert (= (x191 (x132 (_ bv24706623 256))) (_ bv24706623 256)))
(assert (=> (bvuge (_ bv10000 256) (x101 (_ bv321 256))) (= (x52 (x101 (_ bv321 256))) (x132 (x101 (_ bv321 256))))))
(assert (= (_ bv0 256) (x185 x15)))
(assert (= x146 (not (and (= x15 (bvadd x95 (_ bv64 256))) (= (bvadd x95 (_ bv32 256)) x134) (= (bvand x47 (_ bv1461501637330902918203684832716283019655932542975 256)) x227) (= x90 (bvand x17 (_ bv4294967295 256))) (= (= x65 (_ bv96 256)) x40) (= x65 (_ bv96 256)) (= (bvadd (_ bv32 256) x95) x155) (= (ite (= (_ bv0 256) x228) (x191 x58) (ite (= x228 (_ bv32 256)) x156 (ite (= (_ bv64 256) x228) x95 (x35 x228)))) x145) (= x179 (ite (= (_ bv0 256) x15) (x191 x58) (ite (= x15 (_ bv32 256)) x156 (ite (= (_ bv64 256) x15) x95 (x35 x15))))) (= x46 (ite (= (_ bv0 256) x155) (x191 x58) (ite (= x155 (_ bv32 256)) x156 (ite (= x155 (_ bv64 256)) x95 (x35 x155))))) (= (bvadd (_ bv32 256) x134) x39) (= x228 x95)))))
(assert (= (and x216 x37) x180))
(assert (= (x191 (x52 x163)) x163))
(assert (= (x191 (x52 (x101 (_ bv193 256)))) (x101 (_ bv193 256))))
(assert (= (_ bv0 256) (x38 (_ bv321 256))))
(assert (= (_ bv1666326814 256) (x191 (x132 (_ bv1666326814 256)))))
(assert (x164 x163))
(assert (x164 (x101 (_ bv193 256))))
(assert (= (_ bv4294967295 256) (x191 (x132 (_ bv4294967295 256)))))
(assert (= (x52 (_ bv16635278 256)) (x132 (_ bv16635278 256))))
(assert (x164 x200))
(assert (= x63 (and (not x173) x94)))
(assert (= (x52 (_ bv97199519776808029778168953285215024309695167179541945341261303444449322336256 256)) (x132 (_ bv97199519776808029778168953285215024309695167179541945341261303444449322336256 256))))
(assert (= (x38 (_ bv353 256)) (_ bv0 256)))
(assert (= (and x173 x94) x32))
(assert (= (and (not x20) x32) x66))
(assert (= (=> (and (= x199 (bvugt x28 x135)) (or (and x199 (and (= x17 (_ bv0 256)) (= x107 (bvand (_ bv65536 256) x189)) (= (= x107 (_ bv65536 256)) x29) (= x47 (ite x29 (_ bv0 256) x16)))) (and (not x199) (and (= x17 x189) (= x16 x47))))) x146) x83))
(assert (= (x185 x155) (_ bv0 256)))
(assert (= (x52 (_ bv131072 256)) (x132 (_ bv131072 256))))
(assert (= (x132 (_ bv18446744073709551615 256)) (x52 (_ bv18446744073709551615 256))))
(assert (= (x52 (_ bv549686827 256)) (x132 (_ bv549686827 256))))
(assert (= x62 (or x178 x177 x63)))
(assert (= (and x112 x72) x178))
(assert (x164 x176))
(assert (= (_ bv65536 256) (x191 (x132 (_ bv65536 256)))))
(assert (x164 (x101 (_ bv257 256))))
(assert (= (x185 x228) (_ bv0 256)))
(assert (= (x38 (_ bv257 256)) (_ bv0 256)))
(assert (= (x38 (_ bv160 256)) (_ bv0 256)))
(assert (= (and x32 x20) x198))
(assert (= x166 (=> (= x41 (= (x132 (_ bv0 256)) x133)) (and (=> (and x41 (and (= x77 x95) (= x135 (bvlshr x16 (_ bv192 256))))) x83) (=> (and (not x41) (and (or (and (= x214 x208) (not x37)) (and (and (bvugt (_ bv4294967296 256) x45) (= (_ bv1 256) x208)) x37)) (and (= (bvadd x77 (_ bv4 256)) x207) (= x37 (bvugt x214 (_ bv0 256)))))) x213)))))
(assert (= (x191 (x132 (_ bv16635278 256))) (_ bv16635278 256)))
(assert (= (or x66 x198) x177))
(assert (= (x191 (x52 x176)) x176))
(assert (= (x52 (_ bv4294967295 256)) (x132 (_ bv4294967295 256))))
(assert (x164 (x101 (_ bv225 256))))
(assert (=> (bvule x203 (_ bv10000 256)) (= (x52 x203) (x132 x203))))
(assert (= (_ bv18446744073709551615 256) (x191 (x132 (_ bv18446744073709551615 256)))))
(assert (= (=> (= x127 x27) x92) x206))
(assert (= x216 (and (not x41) x197)))
(assert (= x139 true))
(assert (= (_ bv1461501637330902918203684832716283019655932542975 256) (x191 (x132 (_ bv1461501637330902918203684832716283019655932542975 256)))))
(assert (= (x191 (x132 (_ bv4294967296 256))) (_ bv4294967296 256)))
(assert (= (x132 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x52 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (and x199 x67) x168))
(assert (= x103 (=> (and (= x174 (not (bvugt x64 (_ bv224 256)))) (= (x111 x49) x220)) (and x206 x174))))
(assert (= (or x168 x195) x42))
(assert (=> (bvule x163 (_ bv10000 256)) (= (x52 x163) (x132 x163))))
(assert (= (bvadd (_ bv1 256) (x191 x55)) (x191 (x212 x55 (_ bv1 256)))))
(assert (= x203 (x191 (x52 x203))))
(assert (not x194))
(assert (= (x191 (x132 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)))
(assert (= x94 (and x72 (not x112))))
(assert (= (x132 (_ bv346787896 256)) (x52 (_ bv346787896 256))))
(assert (= (or x138 x159) x205))
(assert (=> (bvuge (_ bv10000 256) (x101 (_ bv225 256))) (= (x132 (x101 (_ bv225 256))) (x52 (x101 (_ bv225 256))))))
(assert (= (x191 (x52 x200)) x200))
(assert (= x12 (and x139 (not x181))))
(assert (= (=> (and (= x58 x27) (= (_ bv5 256) x156) (= x133 x53) (= x60 x77) (not (bvugt x6 (bvadd (_ bv1 256) x6)))) x166) x222))
(assert (x164 x203))
(assert (= (or x89 x102) x67))
(assert (= (x132 (_ bv4294967296 256)) (x52 (_ bv4294967296 256))))
(assert (= (x191 (x132 (_ bv97199519776808029778168953285215024309695167179541945341261303444449322336256 256))) (_ bv97199519776808029778168953285215024309695167179541945341261303444449322336256 256)))
(assert (= (x101 (_ bv257 256)) (x191 (x52 (x101 (_ bv257 256))))))
(assert (= (_ bv0 256) (x38 (_ bv225 256))))
(assert (= (and x216 (not x37)) x187))
(assert (= (x101 (_ bv161 256)) (x191 (x52 (x101 (_ bv161 256))))))
(assert (= (x132 (_ bv7776000 256)) (x52 (_ bv7776000 256))))
(assert (= (_ bv7776000 256) (x191 (x132 (_ bv7776000 256)))))
(assert (=> (bvule (x101 (_ bv257 256)) (_ bv10000 256)) (= (x52 (x101 (_ bv257 256))) (x132 (x101 (_ bv257 256))))))
(assert (=> (bvule x200 (_ bv10000 256)) (= (x132 x200) (x52 x200))))
(assert (= x138 (and x215 x62)))
(assert (= (or x205 x12) x197))
(assert (= (x191 (x132 (_ bv346787896 256))) (_ bv346787896 256)))
(assert (= (x132 (_ bv1666326814 256)) (x52 (_ bv1666326814 256))))
(assert (= x159 (and (not x215) x62)))
(assert (=> (bvuge (_ bv10000 256) (x101 (_ bv289 256))) (= (x132 (x101 (_ bv289 256))) (x52 (x101 (_ bv289 256))))))
(assert (= x89 (or x187 x180)))
(assert (=> (bvuge (_ bv10000 256) x176) (= (x132 x176) (x52 x176))))
(assert (= (x101 (_ bv225 256)) (x191 (x52 (x101 (_ bv225 256))))))
(check-sat)
(exit)