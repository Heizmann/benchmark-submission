(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTBV)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x367 0)) (((x160 (x115 x367) (x242 (_ BitVec 256))) (x234 (x50 (_ BitVec 256))) (x90 (x329 x367) (x19 x367) (x45 (_ BitVec 256))))))
(declare-fun x345 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x185 () Bool)
(declare-fun x328 () (_ BitVec 256))
(declare-fun x259 () Bool)
(declare-fun x186 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x24 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x411 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x10 () x367)
(declare-fun x20 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x415 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x310 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x376 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x287 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x319 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x253 () Bool)
(declare-fun x264 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x423 () (_ BitVec 256))
(declare-fun x408 () (_ BitVec 256))
(declare-fun x173 () x367)
(declare-fun x394 () Bool)
(declare-fun x196 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x120 () x367)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x260 () x367)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x414 () Bool)
(declare-fun x135 () Bool)
(declare-fun x283 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x401 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x334 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x412 () Bool)
(declare-fun x303 () (_ BitVec 256))
(declare-fun x289 () Bool)
(declare-fun x56 () Bool)
(declare-fun x384 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x304 () (_ BitVec 256))
(declare-fun x428 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x410 () Bool)
(declare-fun x358 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x62 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x53 () Bool)
(declare-fun x141 () Bool)
(declare-fun x370 () Bool)
(declare-fun x325 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x422 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x320 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x78 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x359 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x311 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x294 () Bool)
(declare-fun x374 () (_ BitVec 256))
(declare-fun x338 () (_ BitVec 256))
(declare-fun x26 () Bool)
(declare-fun x337 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x354 () (_ BitVec 256))
(declare-fun x330 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x395 () (_ BitVec 256))
(declare-fun x402 () Bool)
(declare-fun x268 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x321 () Bool)
(declare-fun x204 () Bool)
(declare-fun x161 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x350 () (_ BitVec 256))
(declare-fun x352 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x361 () (_ BitVec 256))
(declare-fun x396 () (_ BitVec 256))
(declare-fun x426 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x420 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x390 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x65 () x367)
(declare-fun x246 () (_ BitVec 256))
(declare-fun x235 () x367)
(declare-fun x312 () (_ BitVec 256))
(declare-fun x127 () Bool)
(declare-fun x255 () Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x335 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x397 () Bool)
(declare-fun x154 () Bool)
(declare-fun x419 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x136 () Bool)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x377 () Bool)
(declare-fun x343 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x341 () x367)
(declare-fun x344 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x383 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x315 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x103 (x367) (_ BitVec 256))
(declare-fun x77 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x95 () Bool)
(declare-fun x250 () x367)
(declare-fun x121 () (_ BitVec 256))
(declare-fun x293 (x367) (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x290 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x309 () Bool)
(declare-fun x182 ((_ BitVec 256)) x367)
(declare-fun x389 () (_ BitVec 256))
(declare-fun x118 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x327 () (_ BitVec 256))
(declare-fun x348 () (_ BitVec 256))
(declare-fun x427 () (_ BitVec 256))
(declare-fun x219 () Bool)
(declare-fun x305 () Bool)
(declare-fun x12 () (_ BitVec 256))
(declare-fun x381 () (_ BitVec 256))
(declare-fun x74 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x385 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x355 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x403 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x391 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x349 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x342 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x424 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x351 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x76 () Bool)
(declare-fun x132 () Bool)
(declare-fun x184 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x331 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x368 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x336 () (_ BitVec 256))
(declare-fun x375 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x295 () Bool)
(declare-fun x291 () Bool)
(declare-fun x233 () (_ BitVec 256))
(declare-fun x347 () (_ BitVec 256))
(declare-fun x316 () x367)
(declare-fun x409 () Bool)
(declare-fun x3 () (_ BitVec 256))
(declare-fun x365 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x308 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x281 () Bool)
(declare-fun x366 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x399 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x245 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x126 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x322 (x367) (_ BitVec 256))
(declare-fun x326 () (_ BitVec 256))
(declare-fun x406 () (_ BitVec 256))
(declare-fun x378 () x367)
(declare-fun x172 () (_ BitVec 256))
(declare-fun x247 () x367)
(declare-fun x314 () (_ BitVec 256))
(declare-fun x363 () (_ BitVec 256))
(declare-fun x362 () (_ BitVec 256))
(declare-fun x417 () Bool)
(declare-fun x346 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x189 () Bool)
(declare-fun x166 () (_ BitVec 256))
(declare-fun x306 () (_ BitVec 256))
(declare-fun x28 () Bool)
(declare-fun x221 () (_ BitVec 256))
(declare-fun x379 () Bool)
(declare-fun x258 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x317 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x332 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x163 () x367)
(declare-fun x387 () (_ BitVec 256))
(declare-fun x416 () (_ BitVec 256))
(declare-fun x4 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x130 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x313 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x197 () x367)
(declare-fun x60 () Bool)
(declare-fun x280 () (_ BitVec 256))
(declare-fun x382 () Bool)
(declare-fun x257 () Bool)
(declare-fun x157 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x333 () Bool)
(declare-fun x388 () x367)
(declare-fun x195 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x425 () (_ BitVec 256))
(declare-fun x230 () x367)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x31 () Bool)
(declare-fun x229 () Bool)
(declare-fun x372 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x282 (x367) (_ BitVec 256))
(declare-fun x188 (x367) (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x421 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x277 () Bool)
(declare-fun x323 () (_ BitVec 256))
(declare-fun x340 () (_ BitVec 256))
(declare-fun x324 () x367)
(declare-fun x339 () (_ BitVec 256))
(declare-fun x307 () Bool)
(declare-fun x206 () (_ BitVec 256))
(declare-fun x405 () (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x83 () Bool)
(declare-fun x153 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x371 () (_ BitVec 256))
(declare-fun x369 () Bool)
(declare-fun x139 () x367)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x418 () Bool)
(declare-fun x271 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x364 () (_ BitVec 256))
(declare-fun x398 () (_ BitVec 256))
(declare-fun x357 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x244 () x367)
(declare-fun x236 () (_ BitVec 256))
(declare-fun x393 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x150 () Bool)
(define-fun x174 ((x367 x367) (x386 (_ BitVec 256))) x367 (ite ((_ is x160) x367) (x160 (x115 x367) (bvadd x386 (x242 x367))) (ite ((_ is x90) x367) (x90 (x329 x367) (x19 x367) (bvadd (x45 x367) x386)) (x234 (bvadd x386 (x50 x367))))))
(define-fun x1 ((x87 (_ BitVec 256)) (x356 (_ BitVec 256))) Bool (= (bvudiv (bvmul x87 x356) x356) x87))
(define-fun x380 ((x87 (_ BitVec 256)) (x356 (_ BitVec 256))) Bool (= (bvsdiv (bvmul x87 x356) x356) x87))
(define-fun x400 ((x87 (_ BitVec 256)) (x356 (_ BitVec 256))) Bool (= x87 (bvsdiv (bvmul x87 x356) x356)))
(define-fun x240 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x210) (_ bv94699471215667416670508682402181198833950827816622411988269365108481485438976 256) (x428 x210)))
(define-fun x208 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv132 256)) x119 (x240 x210)))
(define-fun x231 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x210) x117 (x208 x210)))
(define-fun x91 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv128 256)) (_ bv94699471215667416670508682402181198833950827816622411988269365108481485438976 256) (x74 x210)))
(define-fun x131 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv132 256) x210) x119 (x91 x210)))
(define-fun x300 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x210) x117 (x131 x210)))
(define-fun x35 ((x210 x367)) (_ BitVec 256) (ite (= x120 x210) (_ bv1000000000000000000000000000 256) (x282 x210)))
(define-fun x392 ((x210 x367)) (_ BitVec 256) (ite (= x210 x316) x143 (x188 x210)))
(define-fun x15 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv320 256)) (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256) (x77 x210)))
(define-fun x32 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv324 256) x210) x159 (x15 x210)))
(define-fun x70 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv356 256)) x264 (x32 x210)))
(define-fun x61 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv388 256)) x399 (x70 x210)))
(define-fun x176 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite x255 (x77 x210) (x61 x210)))
(define-fun x142 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x210) x290 (x176 x210)))
(define-fun x181 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x210) x290 (x142 x210)))
(define-fun x216 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x210) x340 (x181 x210)))
(define-fun x192 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv384 256)) (_ bv1000000000000000000000000000 256) (x216 x210)))
(define-fun x200 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x210) (ite x294 (_ bv1 256) (_ bv0 256)) (x192 x210)))
(define-fun x407 ((x210 x367)) (_ BitVec 256) (ite (= x163 x210) (_ bv1000000000000000000000000000 256) (x35 x210)))
(define-fun x36 ((x210 x367)) (_ BitVec 256) (ite (= x210 x173) x195 (x392 x210)))
(define-fun x276 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv320 256)) (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256) (x118 x210)))
(define-fun x2 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv324 256) x210) x223 (x276 x210)))
(define-fun x404 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv356 256)) x101 (x2 x210)))
(define-fun x125 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv388 256) x210) x381 (x404 x210)))
(define-fun x164 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite x409 (x118 x210) (x125 x210)))
(define-fun x123 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv320 256)) x363 (x164 x210)))
(define-fun x224 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv320 256)) x363 (x123 x210)))
(define-fun x148 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv352 256)) x99 (x224 x210)))
(define-fun x353 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv384 256)) (_ bv1000000000000000000000000000 256) (x148 x210)))
(define-fun x71 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv320 256)) (ite x185 (_ bv1 256) (_ bv0 256)) (x353 x210)))
(define-fun x88 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv128 256)) (_ bv94699471215667416670508682402181198833950827816622411988269365108481485438976 256) (x20 x210)))
(define-fun x93 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv132 256) x210) x119 (x88 x210)))
(define-fun x180 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x210) x117 (x93 x210)))
(define-fun x49 ((x210 x367)) (_ BitVec 256) (ite (= x235 x210) x21 (x36 x210)))
(define-fun x41 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x210) (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256) (x311 x210)))
(define-fun x211 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv324 256) x210) x22 (x41 x210)))
(define-fun x162 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv356 256)) x112 (x211 x210)))
(define-fun x82 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv388 256)) x33 (x162 x210)))
(define-fun x171 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite x325 (x311 x210) (x82 x210)))
(define-fun x254 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x210) x38 (x171 x210)))
(define-fun x133 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x210) x38 (x254 x210)))
(define-fun x6 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x210) x138 (x133 x210)))
(define-fun x413 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv384 256) x210) (_ bv1000000000000000000000000000 256) (x6 x210)))
(define-fun x187 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv320 256)) (ite x184 (_ bv1 256) (_ bv0 256)) (x413 x210)))
(define-fun x373 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv128 256)) (_ bv94699471215667416670508682402181198833950827816622411988269365108481485438976 256) (x393 x210)))
(define-fun x14 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv132 256)) x119 (x373 x210)))
(define-fun x360 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv128 256)) x117 (x14 x210)))
(define-fun x175 ((x292 (_ BitVec 256))) Bool (=> (and (not (= x292 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (not (= (_ bv3018967357 256) x292)) (not (= x292 (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256))) (not (= x292 (_ bv115792089237316195423570985008687907853269984665640 256))) (not (= x292 (_ bv340282366920938463463374607431768211455 256))) (not (= (_ bv340282366920938463463374607431768211456 256) x292)) (not (= x292 (_ bv1000000000000000000000000000 256))) (not (= x292 (_ bv1461501637330902918203684832716283019655932542976 256))) (not (= x292 (_ bv1889567281 256))) (not (= x292 (_ bv3607235850 256))) (not (= (_ bv500000000000000000000000000 256) x292)) (bvugt x292 (_ bv10000 256)) (not (= x292 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (= x292 (_ bv2113256763 256))) (not (= (_ bv826074471 256) x292)) (not (= x292 (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256))) (not (= x292 (_ bv1865579259 256))) (not (= (_ bv94699471215667416670508682402181198833950827816622411988269365108481485438976 256) x292))) (not ((_ is x234) (x182 x292)))))
(assert (= true x382))
(assert (= (x322 (x234 (_ bv115792089237316195423570985008687907853269984665640 256))) (_ bv115792089237316195423570985008687907853269984665640 256)))
(assert (=> (bvuge (_ bv10000 256) x423) (= (x234 x423) (x182 x423))))
(assert (= (x182 (_ bv1461501637330902918203684832716283019655932542975 256)) (x234 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256) (x322 (x234 (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256)))))
(assert (=> (bvule x24 (_ bv10000 256)) (= (x182 x24) (x234 x24))))
(assert (x175 x24))
(assert (x175 x159))
(assert (= x135 (=> (and (and (= x185 x136) (= x299 x344) (= (bvadd x344 x177) x363) (= x99 x177) (bvuge (bvadd x299 x99) x299) (= x313 (x71 (_ bv320 256))) (= (= (_ bv0 256) x48) x136)) (and (and (bvugt x357 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x119) (bvule x44 (_ bv340282366920938463463374607431768211455 256)) (= x236 x314) (bvult x44 (_ bv340282366920938463463374607431768211456 256)) (= (ite x28 (_ bv1 256) (_ bv0 256)) x357) (bvule (_ bv0 256) x44) (= (not x307) x258) (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x267) x167) (= (= (_ bv0 256) x267) x150) (= (bvadd (_ bv500000000000000000000000000 256) x168) x335) (not (bvugt (_ bv826074471 256) x220)) (not (bvult x220 (_ bv1865579259 256))) (bvule x314 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x298 x237) (bvugt x202 (_ bv0 256)) (= (x90 (x182 x314) (x234 (_ bv52 256)) (_ bv0 256)) x247) (= x168 (bvmul x44 x267)) (= (x180 (_ bv128 256)) x267) (= (or x150 x258) x28) (= (bvudiv x335 (_ bv1000000000000000000000000000 256)) x298) (not (= x220 (_ bv1865579259 256))) (bvult x119 (_ bv1461501637330902918203684832716283019655932542976 256)) (= (bvugt x44 x167) x307) (= x202 (x293 (x182 x46))) (bvugt (_ bv2113256763 256) x220) (= (_ bv1889567281 256) x220) (= (x36 x247) x44) (bvule (_ bv0 256) x119)) (and (and (bvult (_ bv0 256) x199) (= x285 x112) (bvult x33 (_ bv340282366920938463463374607431768211456 256)) (= x66 x342) (= x235 (x90 (x182 x22) (x234 (_ bv52 256)) (_ bv0 256))) (bvule x22 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x104 x266) (= x141 (not x305)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x269) x266) (= x139 (x90 (x182 x22) (x234 (_ bv52 256)) (_ bv0 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x364) (bvule x391 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (bvadd x256 (_ bv500000000000000000000000000 256)) x375) (= x296 (_ bv0 256)) (bvule (_ bv0 256) x364) (= (x36 x139) x64) (= x63 (_ bv3018967357 256)) (= x137 (bvadd (bvneg x67) x416)) (bvuge x67 (_ bv0 256)) (bvugt x178 (_ bv0 256)) (= x237 x73) (= (bvadd (_ bv500000000000000000000000000 256) x89) x302) (= x305 (bvult (_ bv115792089237316195423570985008687907853269984665640 256) x64)) (bvult (_ bv0 256) x121) (= (not x317) x94) (= x149 (bvadd x227 x12)) (= (bvmul x406 x64) x39) (= x416 (bvadd x21 x349)) (= (x90 (x182 x22) (x234 (_ bv52 256)) (_ bv0 256)) x341) (= x296 (ite x334 (_ bv1 256) (_ bv0 256))) (= x227 x206) x245 (bvule x406 (_ bv340282366920938463463374607431768211455 256)) (bvuge (_ bv340282366920938463463374607431768211455 256) x64) (bvule x21 (_ bv340282366920938463463374607431768211455 256)) (= x239 (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x406)) (= x12 x358) (bvugt (_ bv340282366920938463463374607431768211456 256) x64) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x66) (= (x293 (x182 x46)) x178) (= (= x406 (_ bv0 256)) x81) (= x111 (bvand x269 (_ bv1461501637330902918203684832716283019655932542975 256))) (not (bvugt (_ bv3018967357 256) x63)) (= x321 (not x30)) (= (ite x145 (_ bv1 256) (_ bv0 256)) x199) (bvule (_ bv0 256) x112) (bvuge (bvadd x33 x158) x33) (= x377 x141) (= x145 (or x81 x321)) (= (bvadd (bvneg x352) x140) x138) (= (bvudiv x302 (_ bv1000000000000000000000000000 256)) x158) (= x426 x22) (= x422 (_ bv1000000000000000000000000000 256)) (= x317 (not x277)) (bvugt (_ bv3607235850 256) x63) (bvuge x66 (_ bv0 256)) (= (bvult x239 x64) x30) (= (bvugt x149 (_ bv115792089237316195423570985008687907853269984665640 256)) x277) (= x217 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x207)) (bvule (_ bv0 256) x57) (bvuge x64 (_ bv0 256)) (bvuge x323 (_ bv0 256)) (= (bvand x207 (_ bv1461501637330902918203684832716283019655932542975 256)) x104) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x323) (not (= x158 (_ bv0 256))) (= (= x248 x137) x245) (bvule (_ bv0 256) x406) (= x391 x55) (= x111 x217) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x112) (= (bvadd x39 (_ bv500000000000000000000000000 256)) x273) (not (bvult x63 (_ bv2113256763 256))) (= x67 (x36 x235)) (bvule x112 (bvadd x112 x158)) (= (bvadd x285 x415) x420) (= x243 x395) (= x342 x102) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x57) (= x269 x57) (= x140 (bvudiv x375 (_ bv1000000000000000000000000000 256))) (= (x36 x341) x33) (= x109 x158) (= x114 (= (_ bv0 256) x323)) (bvugt (_ bv340282366920938463463374607431768211456 256) x406) (= (bvadd x215 x109) x21) (= x415 x158) (= x406 (x407 x388)) (= (bvudiv x273 (_ bv1000000000000000000000000000 256)) x352) (= x395 (_ bv0 256)) (= x388 (x90 (x182 x22) (x234 (_ bv52 256)) (_ bv0 256))) (= x89 (bvmul x149 (_ bv1000000000000000000000000000 256))) (not (bvugt x158 (_ bv340282366920938463463374607431768211455 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x33) (bvuge x33 (_ bv0 256)) (not (bvugt x352 x140)) (= (bvmul (_ bv1000000000000000000000000000 256) x64) x256) (= x121 (ite x377 (_ bv1 256) (_ bv0 256))) (bvult x323 (_ bv1461501637330902918203684832716283019655932542976 256)) (= x94 x334) (= x33 x215) (= x263 x419) (= x327 (_ bv1000000000000000000000000000 256)) (bvuge (_ bv340282366920938463463374607431768211455 256) x67)) (or (and (not x114) (and (= (x293 (x182 x323)) x303) (not (= x303 (_ bv0 256))))) x114)))) x394)))
(assert (= (_ bv1461501637330902918203684832716283019655932542975 256) (x322 (x234 (_ bv1461501637330902918203684832716283019655932542975 256)))))
(assert (= (or x284 x255) x291))
(assert (= (_ bv340282366920938463463374607431768211455 256) (x322 (x234 (_ bv340282366920938463463374607431768211455 256)))))
(assert (= (x182 (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256)) (x234 (_ bv22402283082756182618670880521465619040657731284550890770856599233457073160192 256))))
(assert (= (x182 (_ bv500000000000000000000000000 256)) (x234 (_ bv500000000000000000000000000 256))))
(assert (= (x234 (_ bv1889567281 256)) (x182 (_ bv1889567281 256))))
(assert (x175 x423))
(assert (= (x182 (_ bv2113256763 256)) (x234 (_ bv2113256763 256))))
(assert (= (=> (and (and (= x98 (bvudiv x331 (_ bv1000000000000000000000000000 256))) x170 (= x269 x368) (= x346 (ite x60 (_ bv1 256) (_ bv0 256))) (not (= x107 (_ bv1865579259 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x55) (bvule x119 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x268) (= x345 (x103 (x182 x46))) (bvule (_ bv0 256) x17) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x374) (bvuge (_ bv340282366920938463463374607431768211455 256) x398) (not (bvult x107 (_ bv826074471 256))) (bvuge (_ bv255 256) x157) (bvule x323 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvult (_ bv0 256) x268) (bvule (_ bv0 256) x368) (bvuge x345 (_ bv0 256)) (bvule (_ bv0 256) x119) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x368) (bvule (_ bv0 256) x323) (bvule (_ bv0 256) x146) (bvugt (_ bv1461501637330902918203684832716283019655932542976 256) x119) (bvule (_ bv0 256) x362) (bvule x236 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x268 x46)) (= x259 (bvult x348 x398)) (= x257 (bvugt (x293 (x182 x46)) (_ bv0 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x209) (bvuge (_ bv255 256) x146) (= x331 (bvadd x151 (_ bv500000000000000000000000000 256))) (bvult (_ bv0 256) x80) (= x209 x236) (bvule x362 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x348 (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x130)) (= (not x259) x225) (= x117 x263) (bvuge x426 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x426) (= x268 x119) (= x80 (x293 (x182 x46))) (= (x231 (_ bv128 256)) x130) (bvult (_ bv0 256) x346) (= (= (_ bv0 256) x130) x309) (bvult x107 (_ bv2113256763 256)) (= (x188 x230) x398) (= (x103 (x182 x268)) x17) x257 (= (or x309 x225) x60) (= (_ bv1000000000000000000000000000 256) x262) (bvult x398 (_ bv340282366920938463463374607431768211456 256)) (bvuge x119 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x119) (= x263 x232) (bvule (_ bv0 256) x55) (bvuge x236 (_ bv0 256)) (= x152 (bvudiv x232 (_ bv1000000000000000000000000000 256))) (bvule (_ bv0 256) x398) (= (x90 (x182 x209) (x234 (_ bv52 256)) (_ bv0 256)) x230) (bvule (_ bv0 256) x157) (= x170 (bvugt (x293 (x182 x268)) (_ bv0 256))) (= x98 x147) (bvult (_ bv0 256) x46) (= x155 x362) (= x151 (bvmul x130 x398)) (= x107 (_ bv1889567281 256)) (bvule (_ bv0 256) x374) (not (bvugt (_ bv1865579259 256) x107)) (bvule x46 (_ bv1461501637330902918203684832716283019655932542975 256))) (and (and (= x16 (or x226 x196)) (= x308 (x188 x260)) (= (bvugt x308 x43) x154) (bvult x119 (_ bv1461501637330902918203684832716283019655932542976 256)) (= (x293 (x182 x46)) x315) (= x260 (x90 (x182 x423) (x234 (_ bv52 256)) (_ bv0 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x119) (bvuge x308 (_ bv0 256)) (= x43 (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x179)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x423) (bvule (_ bv0 256) x119) (bvugt (_ bv340282366920938463463374607431768211456 256) x308) (bvult (_ bv0 256) x194) (= (ite x16 (_ bv1 256) (_ bv0 256)) x194) (not (bvult x153 (_ bv826074471 256))) (= (_ bv1889567281 256) x153) (= x426 x423) (not (bvult x153 (_ bv1865579259 256))) (= x147 x84) (= x9 (bvudiv x186 (_ bv1000000000000000000000000000 256))) (= x196 (not x154)) (= (bvmul x308 x179) x328) (bvugt (_ bv2113256763 256) x153) (= x186 (bvadd x328 (_ bv500000000000000000000000000 256))) (= x9 x100) (bvule x308 (_ bv340282366920938463463374607431768211455 256)) (= x179 (x300 (_ bv128 256))) (not (= (_ bv1865579259 256) x153)) (= (= (_ bv0 256) x179) x226) (bvugt x315 (_ bv0 256))) (and (or x289 (and (and (not (= x105 (_ bv0 256))) (= (x293 (x182 x323)) x105)) (not x289))) (and (= x205 (bvadd x212 (_ bv500000000000000000000000000 256))) (bvugt x280 (_ bv0 256)) (= (bvugt x190 x408) x418) (= x340 (bvadd (bvneg x11) x306)) (bvule x323 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x197 (x90 (x182 x159) (x234 (_ bv52 256)) (_ bv0 256))) (= x280 (ite x219 (_ bv1 256) (_ bv0 256))) (= x271 x193) (bvule (_ bv0 256) x264) (= x193 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x269)) (= (not (= x384 x319)) x379) (= x11 (bvudiv x3 (_ bv1000000000000000000000000000 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x264) (= x143 (bvadd x40 x274)) (= (x188 x378) x399) (= x128 (_ bv0 256)) (= x281 (not x402)) (bvult x190 (_ bv340282366920938463463374607431768211456 256)) (= (_ bv0 256) x249) x161 (= x40 x399) (= (bvadd x203 (_ bv500000000000000000000000000 256)) x122) (= x166 x100) (= x79 (_ bv1000000000000000000000000000 256)) (= x411 (bvadd (bvneg x304) x124)) (= x243 x249) (bvule (_ bv0 256) x399) (= x265 (ite x53 (_ bv1 256) (_ bv0 256))) (bvule x190 (_ bv340282366920938463463374607431768211455 256)) (= x213 (bvult (_ bv115792089237316195423570985008687907853269984665640 256) x190)) (bvule (_ bv0 256) x301) (= x326 x263) x95 (bvult x238 (_ bv3607235850 256)) (= (_ bv3018967357 256) x238) (bvugt (_ bv340282366920938463463374607431768211456 256) x301) (= x316 (x90 (x182 x159) (x234 (_ bv52 256)) (_ bv0 256))) (bvugt x265 (_ bv0 256)) (= x106 (x293 (x182 x46))) (= (bvult (_ bv115792089237316195423570985008687907853269984665640 256) x252) x287) (= (bvudiv x122 (_ bv1000000000000000000000000000 256)) x427) (= x101 x75) (= x301 (x282 x197)) (= x402 (not x287)) (= x351 x330) (bvule (_ bv0 256) x214) (= x113 x75) (= x161 (= x411 x172)) (bvule x304 (_ bv340282366920938463463374607431768211455 256)) (= x53 x295) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x207) x271) (= x10 (x90 (x182 x159) (x234 (_ bv52 256)) (_ bv0 256))) (= (x188 x316) x304) (= (bvadd x264 x427) x75) (= x78 x281) (= x384 x426) (not (bvugt x427 (_ bv340282366920938463463374607431768211455 256))) (bvule (_ bv0 256) x304) (= x414 (not x418)) (= (= (_ bv0 256) x301) x191) (= x295 (not x213)) (= x212 (bvmul x190 (_ bv1000000000000000000000000000 256))) (= (bvand x269 (_ bv1461501637330902918203684832716283019655932542975 256)) x330) (= x3 (bvadd (_ bv500000000000000000000000000 256) x387)) (= x23 (_ bv1000000000000000000000000000 256)) (= (= (_ bv0 256) x323) x289) (= (x90 (x182 x159) (x234 (_ bv52 256)) (_ bv0 256)) x378) (bvule x143 (_ bv340282366920938463463374607431768211455 256)) (= x269 x221) (= (or x414 x191) x219) (bvule x399 (_ bv340282366920938463463374607431768211455 256)) (= (bvand x207 (_ bv1461501637330902918203684832716283019655932542975 256)) x351) (= (bvadd x385 x143) x124) (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x301) x408) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x144) (not (bvugt (_ bv3018967357 256) x238)) (bvuge x221 (_ bv0 256)) (= x236 x159) (= x203 (bvmul x252 (_ bv1000000000000000000000000000 256))) (not (bvult x306 x11)) (= x128 (ite x78 (_ bv1 256) (_ bv0 256))) (bvule (_ bv0 256) x323) (bvult x399 (_ bv340282366920938463463374607431768211456 256)) (= x427 x274) (bvuge (bvadd x399 x427) x399) (bvuge x424 (_ bv0 256)) (= x55 x144) (bvule x301 (_ bv340282366920938463463374607431768211455 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x214) (not (= x427 (_ bv0 256))) (= x319 x236) (= x361 x102) (bvult (_ bv0 256) x106) (= x214 x361) (bvule x159 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x190 (x188 x10)) (bvugt (_ bv1461501637330902918203684832716283019655932542976 256) x323) (not (bvugt (_ bv2113256763 256) x238)) (= x387 (bvmul x301 x190)) (= x206 x252) (= x241 (= x84 x166)) (bvule x264 (bvadd x427 x264)) (= x120 (x90 (x182 x159) (x234 (_ bv52 256)) (_ bv0 256))) (bvule x424 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x221 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (bvudiv x205 (_ bv1000000000000000000000000000 256)) x306) (bvule (_ bv0 256) x190) (= (and x241 x379) x95))))) x127) x310))
(assert (= x209 (x322 (x182 x209))))
(assert (= (x322 (x234 (_ bv826074471 256))) (_ bv826074471 256)))
(assert (= x314 (x322 (x182 x314))))
(assert (=> (bvuge (_ bv10000 256) x268) (= (x182 x268) (x234 x268))))
(assert (= (x234 (_ bv1865579259 256)) (x182 (_ bv1865579259 256))))
(assert (x175 x46))
(assert (x175 x314))
(assert (= x255 (and x289 x382)))
(assert (= (x322 (x182 x46)) x46))
(assert (= x268 (x322 (x182 x268))))
(assert (= (x182 (_ bv3607235850 256)) (x234 (_ bv3607235850 256))))
(assert (= x409 (and x253 x291)))
(assert (=> (bvule x314 (_ bv10000 256)) (= (x182 x314) (x234 x314))))
(assert (= x325 (and x114 x229)))
(assert (= (x234 (_ bv115792089237316195423570985008687907853269984665640 256)) (x182 (_ bv115792089237316195423570985008687907853269984665640 256))))
(assert (x175 x223))
(assert (x175 x209))
(assert (= (x234 (_ bv826074471 256)) (x182 (_ bv826074471 256))))
(assert (= (or x325 x51) x59))
(assert (= x51 (and (not x114) x229)))
(assert (= x284 (and (not x289) x382)))
(assert (=> (bvule x323 (_ bv10000 256)) (= (x182 x323) (x234 x323))))
(assert (= (or x417 x409) x229))
(assert (= (x182 (_ bv94699471215667416670508682402181198833950827816622411988269365108481485438976 256)) (x234 (_ bv94699471215667416670508682402181198833950827816622411988269365108481485438976 256))))
(assert (= (x182 (_ bv340282366920938463463374607431768211456 256)) (x234 (_ bv340282366920938463463374607431768211456 256))))
(assert (= (x182 (_ bv1000000000000000000000000000 256)) (x234 (_ bv1000000000000000000000000000 256))))
(assert (=> (bvule x223 (_ bv10000 256)) (= (x234 x223) (x182 x223))))
(assert (= (x234 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (x182 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (_ bv2113256763 256) (x322 (x234 (_ bv2113256763 256)))))
(assert (= (=> (and (and (= x294 x27) (= x47 (x200 (_ bv320 256))) (bvule x252 (bvadd x252 x340)) (= x340 x42) (= x27 (= (_ bv0 256) x190)) (= x252 x183) (= (bvadd x183 x42) x290)) (and (or (and (not x253) (and (not (= (_ bv0 256) x279)) (= x279 (x293 (x182 x323))))) x253) (and (bvule x169 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvult x381 (_ bv340282366920938463463374607431768211456 256)) (bvuge (_ bv340282366920938463463374607431768211455 256) x195) (= x397 (not x86)) (= x318 x243) (bvule (_ bv0 256) x101) (= (bvmul (_ bv1000000000000000000000000000 256) x48) x25) (= (not x397) x7) (= x83 (not x126)) (= x173 (x90 (x182 x223) (x234 (_ bv52 256)) (_ bv0 256))) (= (bvand x269 (_ bv1461501637330902918203684832716283019655932542975 256)) x390) (= (ite x189 (_ bv1 256) (_ bv0 256)) x320) (= (x392 x173) x312) (bvuge x312 (_ bv0 256)) (= x412 (= x272 x349)) (= x286 x333) (= x332 x396) (= x7 x369) (bvult (_ bv0 256) x320) (= (bvugt x48 (_ bv115792089237316195423570985008687907853269984665640 256)) x56) (= x163 (x90 (x182 x223) (x234 (_ bv52 256)) (_ bv0 256))) (= x347 x350) (= x283 (bvadd x396 x101)) (bvule (_ bv0 256) x251) (= x253 (= (_ bv0 256) x323)) (= x189 (or x83 x198)) (= (x392 x324) x48) (= (x35 x65) x62) (not (bvugt x339 x165)) (bvule (_ bv0 256) x278) (= x324 (x90 (x182 x223) (x234 (_ bv52 256)) (_ bv0 256))) (= x263 x405) (bvuge x350 (_ bv0 256)) (= x228 (_ bv0 256)) (bvule x48 (_ bv340282366920938463463374607431768211455 256)) (= x112 x283) x412 (= x275 (bvand x207 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvule x251 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvult x62 (_ bv340282366920938463463374607431768211456 256)) (= (bvadd x336 (bvneg x312)) x272) (not (bvult (_ bv340282366920938463463374607431768211455 256) x396)) (= x37 (bvmul (_ bv1000000000000000000000000000 256) x299)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x350) (= x371 (bvadd (_ bv500000000000000000000000000 256) x25)) (= x169 x55) (not (bvugt (_ bv2113256763 256) x110)) (= x8 (bvadd x72 (_ bv500000000000000000000000000 256))) (= x236 x223) (= x396 (bvudiv x389 (_ bv1000000000000000000000000000 256))) (bvuge x62 (_ bv0 256)) (= x347 x102) (= x390 x5) (= x99 (bvadd (bvneg x339) x165)) (= (not x56) x333) (not (= x396 (_ bv0 256))) (= (x90 (x182 x223) (x234 (_ bv52 256)) (_ bv0 256)) x65) (bvule (_ bv0 256) x381) (= (= x62 (_ bv0 256)) x198) (= (bvadd x195 x172) x336) (bvult (_ bv0 256) x297) (bvuge (_ bv340282366920938463463374607431768211455 256) x312) (= x244 (x90 (x182 x223) (x234 (_ bv52 256)) (_ bv0 256))) (bvule x62 (_ bv340282366920938463463374607431768211455 256)) (= x358 x299) (bvugt (_ bv3607235850 256) x110) (= (_ bv0 256) x318) (= x246 x275) (= x126 (bvugt x48 x68)) (bvuge (bvadd x396 x101) x101) (= x381 (x392 x244)) (= (bvadd x359 x332) x195) (bvugt (_ bv1461501637330902918203684832716283019655932542976 256) x323) (bvule x381 (bvadd x396 x381)) (= (bvudiv x371 (_ bv1000000000000000000000000000 256)) x165) (= x288 x283) (bvuge x48 (_ bv0 256)) (= x269 x278) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x323) (= x381 x359) (bvult (_ bv0 256) x222) (not (bvugt (_ bv3018967357 256) x110)) (= (ite x369 (_ bv1 256) (_ bv0 256)) x228) (= (_ bv1000000000000000000000000000 256) x85) (= (bvult (_ bv115792089237316195423570985008687907853269984665640 256) x299) x86) (= x110 (_ bv3018967357 256)) (= (ite x286 (_ bv1 256) (_ bv0 256)) x297) (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x62) x68) (= x5 (bvand x207 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x223) (bvule (_ bv0 256) x323) (= x72 (bvmul x48 x62)) (bvule x278 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x246 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x269)) (bvule x101 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x339 (bvudiv x8 (_ bv1000000000000000000000000000 256))) (= (x293 (x182 x46)) x222) (= (_ bv1000000000000000000000000000 256) x355) (bvult x48 (_ bv340282366920938463463374607431768211456 256)) (bvule x381 (_ bv340282366920938463463374607431768211455 256)) (= (bvadd (_ bv500000000000000000000000000 256) x37) x389)))) x135) x127))
(assert (= (x322 (x182 x22)) x22))
(assert (= (x322 (x234 (_ bv3607235850 256))) (_ bv3607235850 256)))
(assert (= (x322 (x182 x223)) x223))
(assert (= (_ bv1000000000000000000000000000 256) (x322 (x234 (_ bv1000000000000000000000000000 256)))))
(assert (= x394 (=> (and (and (= x38 (bvadd x403 x372)) (= (= x64 (_ bv0 256)) x370) (= x403 x149) (bvuge (bvadd x138 x149) x149) (= x184 x370) (= x116 (x187 (_ bv320 256))) (= x372 x138)) (and (and (= (bvuge x97 x58) x52) (= (bvadd x270 x13) x233) (= x365 x13) (= x410 (bvule x69 x233)) (= x261 (bvmul (_ bv3 256) x354)) (= x97 (bvadd x261 x218)) (= x29 (_ bv3 256)) (= x73 x218) (= x73 x69) (= x365 x58) (= x270 (bvmul x54 (_ bv3 256))) (= x152 x54) (= x366 (_ bv3 256)) (= x365 x108) (= x152 x354) (= (and x52 x410) x26)) (and (= (bvult x156 x18) x132) (= x343 (bvudiv x96 (_ bv1000000000000000000000000000 256))) (bvugt x92 (_ bv0 256)) (bvuge x119 (_ bv0 256)) (= x250 (x90 (x182 x24) (x234 (_ bv52 256)) (_ bv0 256))) (bvule x24 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x156 (bvudiv (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) x421)) (= (bvadd (_ bv500000000000000000000000000 256) x134) x96) (not (bvult x338 (_ bv826074471 256))) (= (_ bv1889567281 256) x338) (bvult x338 (_ bv2113256763 256)) (= x204 (not x132)) (not (= (_ bv1865579259 256) x338)) (= x31 (= x421 (_ bv0 256))) (bvult (_ bv0 256) x201) (= x18 (x49 x250)) (not (bvugt (_ bv1865579259 256) x338)) (= x108 x343) (bvugt (_ bv1461501637330902918203684832716283019655932542976 256) x119) (= x426 x24) (bvuge (_ bv340282366920938463463374607431768211455 256) x18) (= (bvmul x18 x421) x134) (bvugt (_ bv340282366920938463463374607431768211456 256) x18) (bvule x119 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x293 (x182 x46)) x92) (bvuge x18 (_ bv0 256)) (= (ite x76 (_ bv1 256) (_ bv0 256)) x201) (= (or x204 x31) x76) (= x421 (x360 (_ bv128 256)))))) x26)))
(assert (= x159 (x322 (x182 x159))))
(assert (= (x182 (_ bv1461501637330902918203684832716283019655932542976 256)) (x234 (_ bv1461501637330902918203684832716283019655932542976 256))))
(assert (x175 x22))
(assert (= (_ bv1865579259 256) (x322 (x234 (_ bv1865579259 256)))))
(assert (not x310))
(assert (= (x182 (_ bv3018967357 256)) (x234 (_ bv3018967357 256))))
(assert (= (_ bv500000000000000000000000000 256) (x322 (x234 (_ bv500000000000000000000000000 256)))))
(assert (= (_ bv1000000000000000000000000000 256) x117))
(assert (= (x182 (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256)) (x234 (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256))))
(assert (= (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256) (x322 (x234 (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256)))))
(assert (= (x234 (_ bv340282366920938463463374607431768211455 256)) (x182 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (x322 (x234 (_ bv94699471215667416670508682402181198833950827816622411988269365108481485438976 256))) (_ bv94699471215667416670508682402181198833950827816622411988269365108481485438976 256)))
(assert (= (_ bv3018967357 256) (x322 (x234 (_ bv3018967357 256)))))
(assert (x175 x323))
(assert (= (x322 (x182 x24)) x24))
(assert (= x423 (x322 (x182 x423))))
(assert (= (x322 (x234 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x323 (x322 (x182 x323))))
(assert (= (and x291 (not x253)) x417))
(assert (= (_ bv340282366920938463463374607431768211456 256) (x322 (x234 (_ bv340282366920938463463374607431768211456 256)))))
(assert (=> (bvuge (_ bv10000 256) x159) (= (x234 x159) (x182 x159))))
(assert (x175 x268))
(assert (= (x322 (x234 (_ bv1889567281 256))) (_ bv1889567281 256)))
(assert (= (x322 (x234 (_ bv1461501637330902918203684832716283019655932542976 256))) (_ bv1461501637330902918203684832716283019655932542976 256)))
(assert (=> (bvule x22 (_ bv10000 256)) (= (x182 x22) (x234 x22))))
(assert (=> (bvuge (_ bv10000 256) x46) (= (x234 x46) (x182 x46))))
(assert (=> (bvule x209 (_ bv10000 256)) (= (x182 x209) (x234 x209))))
(check-sat)
(exit)