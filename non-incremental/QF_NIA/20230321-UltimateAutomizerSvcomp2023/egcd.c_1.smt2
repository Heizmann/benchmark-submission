(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |ULTIMATE.start_main_~y~0#1| () Int)
(declare-fun |ULTIMATE.start_main_~x~0#1| () Int)
(declare-fun |ULTIMATE.start_main_~a~0#1| () Int)
(declare-fun |ULTIMATE.start_main_~q~0#1| () Int)
(declare-fun |ULTIMATE.start_main_~r~0#1| () Int)
(declare-fun |ULTIMATE.start_main_~s~0#1| () Int)
(declare-fun |ULTIMATE.start_main_~b~0#1| () Int)
(declare-fun |ULTIMATE.start_main_~p~0#1| () Int)
(assert (not (and (let ((.cse0 (= |ULTIMATE.start_main_~p~0#1| 1)) (.cse1 (<= 1 |ULTIMATE.start_main_~y~0#1|)) (.cse2 (<= |ULTIMATE.start_main_~x~0#1| 2147483647)) (.cse3 (= |ULTIMATE.start_main_~b~0#1| |ULTIMATE.start_main_~y~0#1|)) (.cse4 (= |ULTIMATE.start_main_~q~0#1| 0)) (.cse5 (<= 1 |ULTIMATE.start_main_~x~0#1|)) (.cse6 (<= |ULTIMATE.start_main_~y~0#1| 2147483647)) (.cse7 (= |ULTIMATE.start_main_~s~0#1| 1))) (or (and .cse0 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7) (and .cse0 .cse1 .cse2 .cse3 (= |ULTIMATE.start_main_~r~0#1| 0) .cse4 .cse5 (= |ULTIMATE.start_main_~a~0#1| |ULTIMATE.start_main_~x~0#1|) .cse6 .cse7))) (= |ULTIMATE.start_main_~a~0#1| |ULTIMATE.start_main_~b~0#1|) (= (+ (* |ULTIMATE.start_main_~r~0#1| |ULTIMATE.start_main_~y~0#1|) (* |ULTIMATE.start_main_~p~0#1| |ULTIMATE.start_main_~x~0#1|)) |ULTIMATE.start_main_~a~0#1|))))
(assert (= (* |ULTIMATE.start_main_~p~0#1| |ULTIMATE.start_main_~s~0#1|) (+ (* |ULTIMATE.start_main_~q~0#1| |ULTIMATE.start_main_~r~0#1|) 1)))
(assert (<= 1 |ULTIMATE.start_main_~x~0#1|))
(assert (let ((.cse0 (<= 1 |ULTIMATE.start_main_~y~0#1|)) (.cse1 (<= |ULTIMATE.start_main_~x~0#1| 2147483647)) (.cse2 (* |ULTIMATE.start_main_~s~0#1| |ULTIMATE.start_main_~y~0#1|)) (.cse3 (* |ULTIMATE.start_main_~q~0#1| |ULTIMATE.start_main_~x~0#1|)) (.cse4 (= |ULTIMATE.start_main_~a~0#1| |ULTIMATE.start_main_~b~0#1|)) (.cse5 (<= |ULTIMATE.start_main_~y~0#1| 2147483647))) (or (and (= |ULTIMATE.start_main_~p~0#1| 1) .cse0 (= (+ |ULTIMATE.start_main_~r~0#1| 1) 0) .cse1 (= (+ |ULTIMATE.start_main_~a~0#1| |ULTIMATE.start_main_~y~0#1| .cse2 .cse3) (+ |ULTIMATE.start_main_~b~0#1| |ULTIMATE.start_main_~x~0#1|)) (= |ULTIMATE.start_main_~x~0#1| (+ |ULTIMATE.start_main_~a~0#1| |ULTIMATE.start_main_~y~0#1|)) .cse4 .cse5) (let ((.cse6 (* |ULTIMATE.start_main_~r~0#1| |ULTIMATE.start_main_~y~0#1|)) (.cse7 (* |ULTIMATE.start_main_~p~0#1| |ULTIMATE.start_main_~x~0#1|))) (and .cse0 .cse1 (= (+ .cse6 |ULTIMATE.start_main_~b~0#1| .cse7) (+ |ULTIMATE.start_main_~a~0#1| .cse2 .cse3)) .cse4 .cse5 (= (+ .cse6 .cse7) |ULTIMATE.start_main_~a~0#1|))))))
(check-sat)
(exit)
