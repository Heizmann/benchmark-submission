(set-info :smt-lib-version 2.6)
(set-logic ANIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_old(#memory_int)| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_ULTIMATE.start_main_~n~0#1| () Int)
(declare-fun |c_ULTIMATE.start_is_pow2_~x#1| () Int)
(declare-fun |c_downsweep_#in~a.base| () Int)
(declare-fun |c_downsweep_#in~a.offset| () Int)
(declare-fun |c_downsweep_#in~left| () Int)
(declare-fun |c_downsweep_#in~right| () Int)
(assert (and (exists ((|v_ULTIMATE.start_main_#t~malloc15#1.base_BEFORE_CALL_1| Int)) (= (select |c_#valid| |v_ULTIMATE.start_main_#t~malloc15#1.base_BEFORE_CALL_1|) 1)) (= |c_ULTIMATE.start_main_~n~0#1| |c_ULTIMATE.start_is_pow2_~x#1|) (< 1 |c_ULTIMATE.start_main_~n~0#1|) (< |c_ULTIMATE.start_main_~n~0#1| 1073741824) (< (* (div |c_ULTIMATE.start_is_pow2_~x#1| 2) 2) |c_ULTIMATE.start_is_pow2_~x#1|)))
(assert (not (and (exists ((|v_ULTIMATE.start_main_#t~malloc15#1.base_BEFORE_CALL_1| Int)) (= (select |c_#valid| |v_ULTIMATE.start_main_#t~malloc15#1.base_BEFORE_CALL_1|) 1)) (exists ((v_ArrVal_181 Int)) (= (store |c_old(#memory_int)| |c_downsweep_#in~a.base| (let ((.cse2 (+ |c_downsweep_#in~a.offset| (* |c_downsweep_#in~left| 4)))) (store (let ((.cse1 (+ |c_downsweep_#in~a.offset| (* |c_downsweep_#in~right| 4))) (.cse0 (select |c_old(#memory_int)| |c_downsweep_#in~a.base|))) (store .cse0 .cse1 (+ (select .cse0 .cse1) (select .cse0 .cse2)))) .cse2 v_ArrVal_181))) |c_#memory_int|)))))
(check-sat)
(exit)
