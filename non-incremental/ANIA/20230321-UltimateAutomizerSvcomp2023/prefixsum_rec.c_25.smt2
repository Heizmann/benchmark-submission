(set-info :smt-lib-version 2.6)
(set-logic ANIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2023 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2023-03-21, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Competition on Software Verification and
     Witness Validation: SV-COMP 2023.  TACAS 2023
[6] https://sv-comp.sosy-lab.org/2023/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |c_old(#memory_int)| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_downsweep_#in~a.base| () Int)
(declare-fun |c_downsweep_#in~a.offset| () Int)
(declare-fun |c_downsweep_#in~left| () Int)
(declare-fun |c_downsweep_#in~right| () Int)
(declare-fun c_downsweep_~space~1 () Int)
(declare-fun c_downsweep_~a.base () Int)
(declare-fun c_downsweep_~a.offset () Int)
(declare-fun c_downsweep_~right () Int)
(assert (and (= |c_downsweep_#in~a.base| c_downsweep_~a.base) (= |c_downsweep_#in~right| c_downsweep_~right) (exists ((v_ArrVal_499 Int) (v_ArrVal_497 Int) (v_downsweep_~left_41 Int) (downsweep_~left Int)) (and (<= (+ (div c_downsweep_~space~1 2) v_downsweep_~left_41) downsweep_~left) (< (+ downsweep_~left 1) c_downsweep_~right) (<= downsweep_~left (+ 1 v_downsweep_~left_41)) (= (store |c_old(#memory_int)| c_downsweep_~a.base (let ((.cse3 (+ c_downsweep_~a.offset (* 4 v_downsweep_~left_41)))) (store (let ((.cse4 (select |c_old(#memory_int)| c_downsweep_~a.base)) (.cse5 (+ (* c_downsweep_~right 4) c_downsweep_~a.offset))) (let ((.cse0 (store .cse4 .cse5 v_ArrVal_497)) (.cse1 (+ c_downsweep_~a.offset (* downsweep_~left 4)))) (store .cse0 .cse1 (let ((.cse2 (select .cse4 .cse5))) (+ .cse2 (select (store .cse0 .cse1 .cse2) .cse3)))))) .cse3 v_ArrVal_499))) |c_#memory_int|) (<= c_downsweep_~right (+ downsweep_~left c_downsweep_~space~1)) (<= |c_downsweep_#in~left| downsweep_~left))) (= |c_downsweep_#in~a.offset| c_downsweep_~a.offset)))
(assert (not (exists ((v_ArrVal_499 Int) (v_ArrVal_497 Int) (v_downsweep_~left_41 Int) (downsweep_~left Int) (v_downsweep_~left_42 Int) (v_ArrVal_504 Int) (v_ArrVal_503 Int)) (and (<= (+ |c_downsweep_#in~right| v_downsweep_~left_41) (+ downsweep_~left v_downsweep_~left_42)) (< (+ downsweep_~left 1) |c_downsweep_#in~right|) (= (store |c_old(#memory_int)| |c_downsweep_#in~a.base| (store (let ((.cse5 (+ |c_downsweep_#in~a.offset| (* |c_downsweep_#in~right| 4)))) (store (let ((.cse3 (+ |c_downsweep_#in~a.offset| (* 4 v_downsweep_~left_41)))) (store (let ((.cse4 (select |c_old(#memory_int)| |c_downsweep_#in~a.base|))) (let ((.cse0 (store .cse4 .cse5 v_ArrVal_497)) (.cse1 (+ |c_downsweep_#in~a.offset| (* downsweep_~left 4)))) (store .cse0 .cse1 (let ((.cse2 (select .cse4 .cse5))) (+ (select (store .cse0 .cse1 .cse2) .cse3) .cse2))))) .cse3 v_ArrVal_499)) .cse5 v_ArrVal_504)) (+ |c_downsweep_#in~a.offset| (* 4 v_downsweep_~left_42)) v_ArrVal_503)) |c_#memory_int|) (<= downsweep_~left (+ 1 v_downsweep_~left_41)) (<= (+ |c_downsweep_#in~right| (* 2 v_downsweep_~left_41)) (+ (* downsweep_~left 3) 1)) (<= |c_downsweep_#in~left| downsweep_~left)))))
(check-sat)
(exit)
