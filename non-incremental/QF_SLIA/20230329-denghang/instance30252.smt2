(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Denghang Hu
Generated on: 2023-03-29
Application: Evaluate string solvers
Description: The instance consists of:
(1) a regular membership predicate from the real world
(2) a regular membership predicate to sanitize danger letters in javascript such as <,>,&,",'
(3) a lower bound for string length
Target solver: Ostrich, Z3str3, CVC5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
        ;test regex select regexp_extract('http://mpp.xyz.com/conv/v=5;m=1;t=16901;ts=20150516234355;he=5e3152eafc50ed0346df7f10095d07c4;catname=Horoscope',r'he=(.{32})')
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "s") (re.++ (str.to_re "e") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (re.++ (str.to_re " ") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "p") (re.++ (str.to_re "_") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (re.++ (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "p") (re.++ (str.to_re ":") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (re.++ (str.to_re "m") (re.++ (str.to_re "p") (re.++ (str.to_re "p") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "x") (re.++ (str.to_re "y") (re.++ (str.to_re "z") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re "m") (re.++ (str.to_re "/") (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re "n") (re.++ (str.to_re "v") (re.++ (str.to_re "/") (re.++ (str.to_re "v") (re.++ (str.to_re "=") (re.++ (str.to_re "5") (re.++ (str.to_re ";") (re.++ (str.to_re "m") (re.++ (str.to_re "=") (re.++ (str.to_re "1") (re.++ (str.to_re ";") (re.++ (str.to_re "t") (re.++ (str.to_re "=") (re.++ (str.to_re "16901") (re.++ (str.to_re ";") (re.++ (str.to_re "t") (re.++ (str.to_re "s") (re.++ (str.to_re "=") (re.++ (str.to_re "20150516234355") (re.++ (str.to_re ";") (re.++ (str.to_re "h") (re.++ (str.to_re "e") (re.++ (str.to_re "=") (re.++ (str.to_re "5") (re.++ (str.to_re "e") (re.++ (str.to_re "3152") (re.++ (str.to_re "e") (re.++ (str.to_re "a") (re.++ (str.to_re "f") (re.++ (str.to_re "c") (re.++ (str.to_re "50") (re.++ (str.to_re "e") (re.++ (str.to_re "d") (re.++ (str.to_re "0346") (re.++ (str.to_re "d") (re.++ (str.to_re "f") (re.++ (str.to_re "7") (re.++ (str.to_re "f") (re.++ (str.to_re "10095") (re.++ (str.to_re "d") (re.++ (str.to_re "07") (re.++ (str.to_re "c") (re.++ (str.to_re "4") (re.++ (str.to_re ";") (re.++ (str.to_re "c") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (re.++ (str.to_re "n") (re.++ (str.to_re "a") (re.++ (str.to_re "m") (re.++ (str.to_re "e") (re.++ (str.to_re "=") (re.++ (str.to_re "H") (re.++ (str.to_re "o") (re.++ (str.to_re "r") (re.++ (str.to_re "o") (re.++ (str.to_re "s") (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re "p") (re.++ (str.to_re "e") (str.to_re "\u{27}")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (re.++ (str.to_re ",") (re.++ (str.to_re "r") (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "h") (re.++ (str.to_re "e") (re.++ (str.to_re "=") (re.++ ((_ re.loop 32 32) (re.diff re.allchar (str.to_re "\n"))) (str.to_re "\u{27}"))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 20 (str.len X)))
(check-sat)
(exit)
