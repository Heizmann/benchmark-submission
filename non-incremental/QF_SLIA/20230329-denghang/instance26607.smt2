(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Denghang Hu,
Generated on: 20230329,
Application: Evaluate string solvers
Description: The instance consists of:
(1) a regular membership predicate from the real world
(2) a regular membership predicate to sanitize danger letters in javascript such as <,>,&,",'
(3) a lower bound for string length
Target solver: Ostrich, Z3str3, CVC5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
        ;test regex [a-zA-Z!$.&\\d]{4,24}[@][a-zA-Z]{2,}[.edu|.com|.net]
(declare-const X String)
(assert (str.in_re X (re.++ ((_ re.loop 4 24) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re "!") (re.union (str.to_re "$") (re.union (str.to_re ".") (re.union (str.to_re "&") (re.union (str.to_re "\\") (str.to_re "d"))))))))) (re.++ (str.to_re "@") (re.++ (re.++ (re.* (re.union (re.range "a" "z") (re.range "A" "Z"))) ((_ re.loop 2 2) (re.union (re.range "a" "z") (re.range "A" "Z")))) (re.union (str.to_re ".") (re.union (str.to_re "e") (re.union (str.to_re "d") (re.union (str.to_re "u") (re.union (str.to_re "|") (re.union (str.to_re ".") (re.union (str.to_re "c") (re.union (str.to_re "o") (re.union (str.to_re "m") (re.union (str.to_re "|") (re.union (str.to_re ".") (re.union (str.to_re "n") (re.union (str.to_re "e") (str.to_re "t")))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 20 (str.len X)))
(check-sat)
(exit)
