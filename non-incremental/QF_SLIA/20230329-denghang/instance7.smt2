(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Denghang Hu
Generated on: 2023-03-29
Application: Evaluate string solvers
Description: The instance consists of:
(1) a regular membership predicate from the real world
(2) a regular membership predicate to sanitize danger letters in javascript such as <,>,&,",'
(3) a lower bound for string length
Target solver: Ostrich, Z3str3, CVC5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
        ;test regex ^\n*[rR][cC][pP][tT] [tT][oO]\u{3a}[\u{20}\u{09}\u{0b}]+[a-zA-Z0-9\u{5f}\u{20}\u{09}\u{0b}\u{40}\.]{0,200}\u{3b}[a-zA-Z0-9\u{5f}\u{20}\u{09}\u{0b}=x40\.]{200,}\u{3b}[a-zA-Z0-9\u{5f}\u{20}\u{09}\u{0b}\u{40}\.]{0,200}
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "") (re.++ (re.* (str.to_re "\u{0a}")) (re.++ (re.union (str.to_re "r") (str.to_re "R")) (re.++ (re.union (str.to_re "c") (str.to_re "C")) (re.++ (re.union (str.to_re "p") (str.to_re "P")) (re.++ (re.union (str.to_re "t") (str.to_re "T")) (re.++ (str.to_re " ") (re.++ (re.union (str.to_re "t") (str.to_re "T")) (re.++ (re.union (str.to_re "o") (str.to_re "O")) (re.++ (str.to_re "\u{3a}") (re.++ (re.+ (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0b}")))) (re.++ ((_ re.loop 0 200) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (re.union (str.to_re "\u{5f}") (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{09}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{40}") (str.to_re ".")))))))))) (re.++ (str.to_re "\u{3b}") (re.++ (re.++ (re.* (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (re.union (str.to_re "\u{5f}") (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{09}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "=") (re.union (str.to_re "x") (re.union (str.to_re "40") (str.to_re ".")))))))))))) ((_ re.loop 200 200) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (re.union (str.to_re "\u{5f}") (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{09}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "=") (re.union (str.to_re "x") (re.union (str.to_re "40") (str.to_re "."))))))))))))) (re.++ (str.to_re "\u{3b}") ((_ re.loop 0 200) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (re.union (str.to_re "\u{5f}") (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{09}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{40}") (str.to_re ".")))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 50 (str.len X)))
(check-sat)
(exit)
