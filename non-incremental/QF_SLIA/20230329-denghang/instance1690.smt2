(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Denghang Hu,
Generated on: 2023-03-29
Application: Evaluate string solvers
Description: The instance consists of:
(1) a regular membership predicate from the real world
(2) a regular membership predicate to sanitize danger letters in javascript such as <,>,&,",'
(3) a lower bound for string length
Target solver: Ostrich, Z3str3, CVC5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
        ;test regex ^[\|]{1}[DUA]{1}[\|]{1}[0-9,A-Z]{8}[\|]{1}[0-9,A-Z]{8}[\|]{1}.{0,25}[\|]{1}.{0,25}[\|]{1}.{0,25}[\|]{1}[A-Z,a-z]{2}[\|]{1}[0-9]{5}[\|]{1}[A-Z,a-z,0-9]{12}[\|]{1}[A-Z,a-z,0-9]{10}[\|]{1}.{0,25}[\|]{1}[0,1]{1}[\|]{1}[0-9]{12}[\|]{1}[0,1]{1}[\|]{1}[0-9]{12}[\|]{1}[0,1]{1}[\|]{1}[0-9]{15}[\|]{1}[0,1]{1}[\|]{1}[0-9]{12}[\|]{1}[0,1]{1}[\|]{1}[0-9]{12}[\|]{1}[0,1]{1}[\|]{1}[0-9]{12}[\|]{1}[0,1]{1}[\|]{1}[0-9]{12}[\|]{1}[0,1]{1}[\|]{1}[0-9]{12}[\|]{1}
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "") (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "D") (re.union (str.to_re "U") (str.to_re "A")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9") (re.union (str.to_re ",") (re.range "A" "Z")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9") (re.union (str.to_re ",") (re.range "A" "Z")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 0 25) (re.diff re.allchar (str.to_re "\n"))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 0 25) (re.diff re.allchar (str.to_re "\n"))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 0 25) (re.diff re.allchar (str.to_re "\n"))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.union (str.to_re ",") (re.range "a" "z")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 5 5) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 12 12) (re.union (re.range "A" "Z") (re.union (str.to_re ",") (re.union (re.range "a" "z") (re.union (str.to_re ",") (re.range "0" "9")))))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 10 10) (re.union (re.range "A" "Z") (re.union (str.to_re ",") (re.union (re.range "a" "z") (re.union (str.to_re ",") (re.range "0" "9")))))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 0 25) (re.diff re.allchar (str.to_re "\n"))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "0") (re.union (str.to_re ",") (str.to_re "1")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "0") (re.union (str.to_re ",") (str.to_re "1")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "0") (re.union (str.to_re ",") (str.to_re "1")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 15 15) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "0") (re.union (str.to_re ",") (str.to_re "1")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "0") (re.union (str.to_re ",") (str.to_re "1")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "0") (re.union (str.to_re ",") (str.to_re "1")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "0") (re.union (str.to_re ",") (str.to_re "1")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "0") (re.union (str.to_re ",") (str.to_re "1")))) (re.++ ((_ re.loop 1 1) (str.to_re "|")) (re.++ ((_ re.loop 12 12) (re.range "0" "9")) ((_ re.loop 1 1) (str.to_re "|")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 50 (str.len X)))
(check-sat)
(exit)
