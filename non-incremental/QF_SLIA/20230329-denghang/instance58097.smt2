(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Denghang Hu,
Generated on: 20230329,
Application: Evaluate string solvers
Description: The instance consists of:
(1) a regular membership predicate from the real world
(2) a regular membership predicate to sanitize danger letters in javascript such as <,>,&,",'
(3) a lower bound for string length
Target solver: Ostrich, Z3str3, CVC5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
        ;test regex (?:^[^0-9a-zA-Z]??|[^=(:][^0-9a-zA-Z\-]|=[^ 0-9a-zA-Z]|\([^ "0-9a-zA-Z]|:[^ 0-9a-zA-Z]|[^0-9a-zA-Z]-)((?:[0-9a-z][0-9a-z\-]*\.){2,}(?:[ac-hj-su-z][a-z]*|b[a-z]?|bi[a-y]|b[a-z]{3,}|i[a-z]{0,2}|inf[a-np-z]|i[a-z]{4,}|t|t[a-uw-z]|t[a-z]{2,}))(?:[^a-zA-Z "]| [^=:)]|"[^)]|[ "]?$)
(declare-const X String)
(assert (str.in_re X (re.++ (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "") (re.opt (re.inter (re.diff re.allchar (re.range "0" "9")) (re.inter (re.diff re.allchar (re.range "a" "z")) (re.diff re.allchar (re.range "A" "Z")))))) (re.++ (re.inter (re.diff re.allchar (str.to_re "=")) (re.inter (re.diff re.allchar (str.to_re "(")) (re.diff re.allchar (str.to_re ":")))) (re.inter (re.diff re.allchar (re.range "0" "9")) (re.inter (re.diff re.allchar (re.range "a" "z")) (re.inter (re.diff re.allchar (re.range "A" "Z")) (re.diff re.allchar (str.to_re "-"))))))) (re.++ (str.to_re "=") (re.inter (re.diff re.allchar (str.to_re " ")) (re.inter (re.diff re.allchar (re.range "0" "9")) (re.inter (re.diff re.allchar (re.range "a" "z")) (re.diff re.allchar (re.range "A" "Z"))))))) (re.++ (str.to_re "(") (re.inter (re.diff re.allchar (str.to_re " ")) (re.inter (re.diff re.allchar (str.to_re "\u{22}")) (re.inter (re.diff re.allchar (re.range "0" "9")) (re.inter (re.diff re.allchar (re.range "a" "z")) (re.diff re.allchar (re.range "A" "Z")))))))) (re.++ (str.to_re ":") (re.inter (re.diff re.allchar (str.to_re " ")) (re.inter (re.diff re.allchar (re.range "0" "9")) (re.inter (re.diff re.allchar (re.range "a" "z")) (re.diff re.allchar (re.range "A" "Z"))))))) (re.++ (re.inter (re.diff re.allchar (re.range "0" "9")) (re.inter (re.diff re.allchar (re.range "a" "z")) (re.diff re.allchar (re.range "A" "Z")))) (str.to_re "-"))) (re.++ (re.++ (re.++ (re.* (re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.++ (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (str.to_re "-")))) (str.to_re ".")))) ((_ re.loop 2 2) (re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.++ (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (str.to_re "-")))) (str.to_re "."))))) (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.union (str.to_re "a") (re.union (re.range "c" "h") (re.union (re.range "j" "s") (re.range "u" "z")))) (re.* (re.range "a" "z"))) (re.++ (str.to_re "b") (re.opt (re.range "a" "z")))) (re.++ (str.to_re "b") (re.++ (str.to_re "i") (re.range "a" "y")))) (re.++ (str.to_re "b") (re.++ (re.* (re.range "a" "z")) ((_ re.loop 3 3) (re.range "a" "z"))))) (re.++ (str.to_re "i") ((_ re.loop 0 2) (re.range "a" "z")))) (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "f") (re.union (re.range "a" "n") (re.range "p" "z")))))) (re.++ (str.to_re "i") (re.++ (re.* (re.range "a" "z")) ((_ re.loop 4 4) (re.range "a" "z"))))) (str.to_re "t")) (re.++ (str.to_re "t") (re.union (re.range "a" "u") (re.range "w" "z")))) (re.++ (str.to_re "t") (re.++ (re.* (re.range "a" "z")) ((_ re.loop 2 2) (re.range "a" "z")))))) (re.union (re.union (re.union (re.inter (re.diff re.allchar (re.range "a" "z")) (re.inter (re.diff re.allchar (re.range "A" "Z")) (re.inter (re.diff re.allchar (str.to_re " ")) (re.diff re.allchar (str.to_re "\u{22}"))))) (re.++ (str.to_re " ") (re.inter (re.diff re.allchar (str.to_re "=")) (re.inter (re.diff re.allchar (str.to_re ":")) (re.diff re.allchar (str.to_re ")")))))) (re.++ (str.to_re "\u{22}") (re.diff re.allchar (str.to_re ")")))) (re.++ (re.opt (re.union (str.to_re " ") (str.to_re "\u{22}"))) (str.to_re "")))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 20 (str.len X)))
(check-sat)
(exit)
