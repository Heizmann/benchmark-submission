(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Denghang Hu,
Generated on: 20230329,
Application: Evaluate string solvers
Description: The instance consists of:
(1) a regular membership predicate from the real world
(2) a regular membership predicate to sanitize danger letters in javascript such as <,>,&,",'
(3) a lower bound for string length
Target solver: Ostrich, Z3str3, CVC5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
        ;test regex commentRegex = /^([A-Za-z0-9\u00C0-\u017F\u20AC\u2122\u2150\u00A9 \/.,\-_$!\'&*()="?#+%:;\<\[\]\r\r\n]{1,2000})$/;
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re "m") (re.++ (str.to_re "m") (re.++ (str.to_re "e") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "R") (re.++ (str.to_re "e") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (str.to_re "/")))))))))))))))) (re.++ (str.to_re "") ((_ re.loop 1 2000) (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.union (re.range "0" "9") (re.union (re.range "\u{00c0}" "\u{017f}") (re.union (str.to_re "\u{20ac}") (re.union (str.to_re "\u{2122}") (re.union (str.to_re "\u{2150}") (re.union (str.to_re "\u{00a9}") (re.union (str.to_re " ") (re.union (str.to_re "/") (re.union (str.to_re ".") (re.union (str.to_re ",") (re.union (str.to_re "-") (re.union (str.to_re "_") (re.union (str.to_re "$") (re.union (str.to_re "!") (re.union (str.to_re "\u{27}") (re.union (str.to_re "&") (re.union (str.to_re "*") (re.union (str.to_re "(") (re.union (str.to_re ")") (re.union (str.to_re "=") (re.union (str.to_re "\u{22}") (re.union (str.to_re "?") (re.union (str.to_re "#") (re.union (str.to_re "+") (re.union (str.to_re "%") (re.union (str.to_re ":") (re.union (str.to_re ";") (re.union (str.to_re "<") (re.union (str.to_re "[") (re.union (str.to_re "]") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{0d}") (str.to_re "\u{0a}")))))))))))))))))))))))))))))))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "/") (str.to_re ";"))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 50 (str.len X)))
(check-sat)
(exit)
