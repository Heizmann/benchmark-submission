(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Denghang Hu
Generated on: 2023-03-29
Application: Evaluate string solvers
Description: The instance consists of:
(1) a regular membership predicate from the real world
(2) a regular membership predicate to sanitize danger letters in javascript such as <,>,&,",'
(3) a lower bound for string length
Target solver: Ostrich, Z3str3, CVC5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
        ;test regex MSH|^~\&|DATACAPTOR|\d{3}|\d{3}|(\d{4}\d{2}\d{2}\d{2}\d{2}\d{2})|ORU\\^R01|\d{20}|P|2.3|8859/1
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "M") (re.++ (str.to_re "S") (str.to_re "H"))) (re.++ (str.to_re "") (re.++ (str.to_re "~") (str.to_re "&")))) (re.++ (str.to_re "D") (re.++ (str.to_re "A") (re.++ (str.to_re "T") (re.++ (str.to_re "A") (re.++ (str.to_re "C") (re.++ (str.to_re "A") (re.++ (str.to_re "P") (re.++ (str.to_re "T") (re.++ (str.to_re "O") (str.to_re "R"))))))))))) ((_ re.loop 3 3) (re.range "0" "9"))) ((_ re.loop 3 3) (re.range "0" "9"))) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "0" "9")))))))) (re.++ (re.++ (str.to_re "O") (re.++ (str.to_re "R") (re.++ (str.to_re "U") (str.to_re "\\")))) (re.++ (str.to_re "") (re.++ (str.to_re "R") (str.to_re "01"))))) ((_ re.loop 20 20) (re.range "0" "9"))) (str.to_re "P")) (re.++ (str.to_re "2") (re.++ (re.diff re.allchar (str.to_re "\n")) (str.to_re "3")))) (re.++ (str.to_re "8859") (re.++ (str.to_re "/") (str.to_re "1"))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 20 (str.len X)))
(check-sat)
(exit)
