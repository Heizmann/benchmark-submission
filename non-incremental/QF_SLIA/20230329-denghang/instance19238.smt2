(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Denghang Hu,
Generated on: 2023-03-29
Application: Evaluate string solvers
Description: The instance consists of:
(1) a regular membership predicate from the real world
(2) a regular membership predicate to sanitize danger letters in javascript such as <,>,&,",'
(3) a lower bound for string length
Target solver: Ostrich, Z3str3, CVC5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
        ;test regex ^((([a-h,A-H,j-n,J-N,p-z,P-Z,0-9]{9})([a-h,A-H,j-n,J-N,p,P,r-t,R-T,v-z,V-Z,0-9])([a-h,A-H,j-n,J-N,p-z,P-Z,0-9])(\d{6}))|(([a-h,A-H,j-z,J-Z,0-9]{6,11})(\d{5})))$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.union (re.++ ((_ re.loop 9 9) (re.union (re.range "a" "h") (re.union (str.to_re ",") (re.union (re.range "A" "H") (re.union (str.to_re ",") (re.union (re.range "j" "n") (re.union (str.to_re ",") (re.union (re.range "J" "N") (re.union (str.to_re ",") (re.union (re.range "p" "z") (re.union (str.to_re ",") (re.union (re.range "P" "Z") (re.union (str.to_re ",") (re.range "0" "9")))))))))))))) (re.++ (re.union (re.range "a" "h") (re.union (str.to_re ",") (re.union (re.range "A" "H") (re.union (str.to_re ",") (re.union (re.range "j" "n") (re.union (str.to_re ",") (re.union (re.range "J" "N") (re.union (str.to_re ",") (re.union (str.to_re "p") (re.union (str.to_re ",") (re.union (str.to_re "P") (re.union (str.to_re ",") (re.union (re.range "r" "t") (re.union (str.to_re ",") (re.union (re.range "R" "T") (re.union (str.to_re ",") (re.union (re.range "v" "z") (re.union (str.to_re ",") (re.union (re.range "V" "Z") (re.union (str.to_re ",") (re.range "0" "9"))))))))))))))))))))) (re.++ (re.union (re.range "a" "h") (re.union (str.to_re ",") (re.union (re.range "A" "H") (re.union (str.to_re ",") (re.union (re.range "j" "n") (re.union (str.to_re ",") (re.union (re.range "J" "N") (re.union (str.to_re ",") (re.union (re.range "p" "z") (re.union (str.to_re ",") (re.union (re.range "P" "Z") (re.union (str.to_re ",") (re.range "0" "9"))))))))))))) ((_ re.loop 6 6) (re.range "0" "9"))))) (re.++ ((_ re.loop 6 11) (re.union (re.range "a" "h") (re.union (str.to_re ",") (re.union (re.range "A" "H") (re.union (str.to_re ",") (re.union (re.range "j" "z") (re.union (str.to_re ",") (re.union (re.range "J" "Z") (re.union (str.to_re ",") (re.range "0" "9")))))))))) ((_ re.loop 5 5) (re.range "0" "9"))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 20 (str.len X)))
(check-sat)
(exit)
