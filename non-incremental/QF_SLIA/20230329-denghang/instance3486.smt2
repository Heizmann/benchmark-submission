(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Denghang Hu
Generated on: 2023-03-29
Application: Evaluate string solvers
Target solver: Ostrich, Z3str3, CVC5
Description: The instance consists of:
(1) a regular membership predicate from the real world
(2) a regular membership predicate to sanitize danger letters in javascript such as <,>,&,",'
(3) a lower bound for string length
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
        ;test regex "^(([1-9]|0[1-9]|1[0-9]|2[1-9]|3[0-1])[-]([JAN|FEB|MAR|APR|MAY|JUN|JULY|AUG|SEP|OCT|NOV|DEC])[-](d{4}))$"
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "") (re.++ (re.union (re.union (re.union (re.union (re.range "1" "9") (re.++ (str.to_re "0") (re.range "1" "9"))) (re.++ (str.to_re "1") (re.range "0" "9"))) (re.++ (str.to_re "2") (re.range "1" "9"))) (re.++ (str.to_re "3") (re.range "0" "1"))) (re.++ (str.to_re "-") (re.++ (re.union (str.to_re "J") (re.union (str.to_re "A") (re.union (str.to_re "N") (re.union (str.to_re "|") (re.union (str.to_re "F") (re.union (str.to_re "E") (re.union (str.to_re "B") (re.union (str.to_re "|") (re.union (str.to_re "M") (re.union (str.to_re "A") (re.union (str.to_re "R") (re.union (str.to_re "|") (re.union (str.to_re "A") (re.union (str.to_re "P") (re.union (str.to_re "R") (re.union (str.to_re "|") (re.union (str.to_re "M") (re.union (str.to_re "A") (re.union (str.to_re "Y") (re.union (str.to_re "|") (re.union (str.to_re "J") (re.union (str.to_re "U") (re.union (str.to_re "N") (re.union (str.to_re "|") (re.union (str.to_re "J") (re.union (str.to_re "U") (re.union (str.to_re "L") (re.union (str.to_re "Y") (re.union (str.to_re "|") (re.union (str.to_re "A") (re.union (str.to_re "U") (re.union (str.to_re "G") (re.union (str.to_re "|") (re.union (str.to_re "S") (re.union (str.to_re "E") (re.union (str.to_re "P") (re.union (str.to_re "|") (re.union (str.to_re "O") (re.union (str.to_re "C") (re.union (str.to_re "T") (re.union (str.to_re "|") (re.union (str.to_re "N") (re.union (str.to_re "O") (re.union (str.to_re "V") (re.union (str.to_re "|") (re.union (str.to_re "D") (re.union (str.to_re "E") (str.to_re "C")))))))))))))))))))))))))))))))))))))))))))))))) (re.++ (str.to_re "-") ((_ re.loop 4 4) (str.to_re "d")))))))) (re.++ (str.to_re "") (str.to_re "\u{22}")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 20 (str.len X)))
(check-sat)
(exit)
